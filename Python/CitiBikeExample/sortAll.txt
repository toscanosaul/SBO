



         5935572049 function calls (5915466229 primitive calls) in 15792.472 seconds
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 <string>:1(ArgInfo)
        1    0.000    0.000    0.000    0.000 <string>:1(ArgSpec)
        1    0.000    0.000    0.000    0.000 <string>:1(Arguments)
        1    0.000    0.000    0.000    0.000 <string>:1(Attribute)
        1    0.000    0.000    0.000    0.000 <string>:1(Boxplot)
        1    0.000    0.000    0.000    0.000 <string>:1(Components)
        1    0.000    0.000    0.000    0.000 <string>:1(DecimalTuple)
        1    0.000    0.000    0.000    0.000 <string>:1(DeprecatedOption)
        1    0.000    0.000    0.000    0.000 <string>:1(DescribeResult)
        1    0.000    0.000    0.000    0.000 <string>:1(Match)
        1    0.000    0.000    0.000    0.000 <string>:1(Mismatch)
        1    0.000    0.000    0.000    0.000 <string>:1(ModuleInfo)
        1    0.000    0.000    0.000    0.000 <string>:1(ParseResult)
        1    0.000    0.000    0.000    0.000 <string>:1(RegisteredOption)
        1    0.000    0.000    0.000    0.000 <string>:1(SplitResult)
        1    0.000    0.000    0.000    0.000 <string>:1(Traceback)
        1    0.000    0.000    0.000    0.000 <string>:1(_Version)
        1    0.000    0.000    0.000    0.000 <string>:1(manifest_mod)
        1    0.000    0.000    0.000    0.000 <string>:2(<module>)
        1    0.000    0.000    0.000    0.000 <string>:2(_parse_args)
        1    0.000    0.000    0.000    0.000 AffineBreakPoints.py:3(<module>)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:112(Error)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:139(NoSectionError)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:147(DuplicateSectionError)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:155(NoOptionError)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:165(InterpolationError)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:174(InterpolationMissingOptionError)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:188(InterpolationSyntaxError)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:192(InterpolationDepthError)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:204(ParsingError)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:217(MissingSectionHeaderError)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:558(_Chainmap)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:588(ConfigParser)
        1    0.000    0.000    0.000    0.000 ConfigParser.py:686(SafeConfigParser)
        1    0.000    0.000    0.000    0.000 ElementPath.py:237(_SelectorContext)
        1    0.000    0.000    0.000    0.000 ElementTree.py:104(_SimpleElementPath)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1205(_IterParseIterator)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1365(TreeBuilder)
        1    0.000    0.000    0.000    0.000 ElementTree.py:138(ParseError)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1455(XMLParser)
        1    0.000    0.000    0.000    0.000 ElementTree.py:171(Element)
        1    0.000    0.000    0.000    0.000 ElementTree.py:580(QName)
        1    0.000    0.000    0.000    0.000 ElementTree.py:605(ElementTree)
        1    0.000    0.000    0.000    0.000 FixTk.py:1(<module>)
        1    0.000    0.000    0.000    0.000 Image.py:1942(_ImageCrop)
        1    0.000    0.000    0.000    0.000 Image.py:1978(ImagePointHandler)
        1    0.000    0.000    0.000    0.000 Image.py:1983(ImageTransformHandler)
        1    0.000    0.000    0.000    0.000 Image.py:34(DecompressionBombWarning)
        1    0.000    0.000    0.000    0.000 Image.py:38(_imaging_not_installed)
        1    0.000    0.000    0.000    0.000 Image.py:446(_E)
        1    0.000    0.000    0.000    0.000 Image.py:481(Image)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:113(MaxFilter)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:127(ModeFilter)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:145(GaussianBlur)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:159(UnsharpMask)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:18(<module>)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:184(BLUR)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:195(CONTOUR)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:204(DETAIL)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:21(Filter)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:213(EDGE_ENHANCE)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:222(EDGE_ENHANCE_MORE)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:231(EMBOSS)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:240(FIND_EDGES)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:249(SMOOTH)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:25(Kernel)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:258(SMOOTH_MORE)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:269(SHARPEN)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:57(BuiltinFilter)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:62(RankFilter)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:85(MedianFilter)
        1    0.000    0.000    0.000    0.000 ImageFilter.py:99(MinFilter)
        1    0.000    0.000    0.000    0.000 ImageMode.py:17(<module>)
        1    0.000    0.000    0.000    0.000 ImageMode.py:23(ModeDescriptor)
        1    0.000    0.000    0.000    0.000 LBFGS.py:5(<module>)
        1    0.000    0.000    0.000    0.000 LBFGS.py:7(LBFGS)
        1    0.000    0.000    0.000    0.000 SBOGeneral2.py:62(SBO)
        1    0.000    0.000    0.000    0.000 SquaredExponentialKernel.py:26(SEK)
        1    0.000    0.000    0.000    0.000 SquaredExponentialKernel.py:27(__init__)
        1    0.000    0.000    0.000    0.000 SquaredExponentialKernel.py:44(getParamaters)
        1    0.000    0.000    0.000    0.000 StringIO.py:30(<module>)
        1    0.000    0.000    0.000    0.000 StringIO.py:42(StringIO)
        1    0.000    0.000    0.000    0.000 UserDict.py:39(keys)
        1    0.000    0.000    0.000    0.000 VOIGeneral.py:11(VOI)
        1    0.000    0.000    0.000    0.000 VOIGeneral.py:14(__init__)
        1    0.000    0.000    0.000    0.000 VOIGeneral.py:149(EI)
        1    0.000    0.000    0.000    0.000 VOIGeneral.py:182(KG)
        1    0.000    0.000    0.000    0.000 VOIGeneral.py:255(PI)
        1    0.000    0.000    0.000    0.000 VOIGeneral.py:35(VOISBO)
        1    0.000    0.000    0.000    0.000 VOIGeneral.py:36(__init__)
        1    0.000    0.000    0.000    0.000 __about__.py:14(<module>)
        1    0.000    0.000    0.000    0.000 __future__.py:48(<module>)
        1    0.000    0.000    0.000    0.000 __future__.py:74(_Feature)
        1    0.000    0.000    0.000    0.000 __init__.py:10(ProjectionRegistry)
        1    0.000    0.000    0.000    0.000 __init__.py:105(_SetuptoolsVersionMixin)
        1    0.000    0.000    0.000    0.000 __init__.py:1095(Logger)
        1    0.000    0.000    0.000    0.000 __init__.py:1119(ExtractionError)
        1    0.000    0.000    0.000    0.000 __init__.py:112(ModuleDeprecationWarning)
        1    0.000    0.000    0.000    0.000 __init__.py:113(get_projection_names)
        1    0.000    0.000    0.000    0.000 __init__.py:1135(ResourceManager)
        1    0.000    0.000    0.000    0.000 __init__.py:1139(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1221(rc_context)
        1    0.000    0.000    0.000    0.000 __init__.py:124(VisibleDeprecationWarning)
        1    0.000    0.000    0.000    0.000 __init__.py:1335(get_backend)
        1    0.000    0.000    0.000    0.000 __init__.py:1347(is_interactive)
        1    0.000    0.000    0.000    0.000 __init__.py:1370(RootLogger)
        1    0.000    0.000    0.000    0.000 __init__.py:1376(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1384(LoggerAdapter)
        1    0.000    0.000    0.000    0.000 __init__.py:1392(MarkerEvaluation)
        1    0.000    0.000    0.000    0.000 __init__.py:14(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:148(py_object)
        1    0.000    0.000    0.000    0.000 __init__.py:157(c_short)
        1    0.000    0.000    0.000    0.000 __init__.py:1577(NullProvider)
        1    0.000    0.000    0.000    0.000 __init__.py:16(NoseWrapper)
        1    0.000    0.000    0.000    0.000 __init__.py:161(c_ushort)
        1    0.000    0.000    0.000    0.000 __init__.py:165(c_long)
        1    0.000    0.000    0.000    0.000 __init__.py:1672(NullHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:1681(EggProvider)
        1    0.000    0.000    0.000    0.000 __init__.py:169(c_ulong)
        1    0.000    0.000    0.000    0.000 __init__.py:17(register)
        1    0.000    0.000    0.000    0.000 __init__.py:1702(DefaultProvider)
        1    0.000    0.000    0.000    0.000 __init__.py:1727(EmptyProvider)
        1    0.000    0.000    0.000    0.000 __init__.py:1735(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:1741(ZipManifests)
        1    0.000    0.000    0.000    0.000 __init__.py:1768(MemoizedZipManifests)
        1    0.000    0.000    0.000    0.000 __init__.py:178(c_int)
        1    0.000    0.000    0.000    0.000 __init__.py:1788(ContextualZipFile)
        1    0.000    0.000    0.000    0.000 __init__.py:1808(ZipProvider)
        1    0.000    0.000    0.000    0.000 __init__.py:182(c_uint)
        1    0.000    0.000    0.000    0.000 __init__.py:186(c_float)
        1    0.000    0.000    0.000    0.000 __init__.py:190(c_double)
        1    0.000    0.000    0.000    0.000 __init__.py:194(UTC)
        1    0.000    0.000    0.000    0.000 __init__.py:1940(_index)
        1    0.000    0.000    0.000    0.000 __init__.py:1976(FileMetadata)
        1    0.000    0.000    0.000    0.000 __init__.py:2005(PathMetadata)
        1    0.000    0.000    0.000    0.000 __init__.py:2030(EggMetadata)
        1    0.000    0.000    0.000    0.000 __init__.py:204(SetuptoolsVersion)
        1    0.000    0.000    0.000    0.000 __init__.py:208(SetuptoolsLegacyVersion)
        1    0.000    0.000    0.000    0.000 __init__.py:210(c_ubyte)
        1    0.000    0.000    0.000    0.000 __init__.py:217(c_byte)
        1    0.000    0.000    0.000    0.000 __init__.py:219(add_metaclass)
        1    0.000    0.000    0.000    0.000 __init__.py:221(wrapper)
        1    0.000    0.000    0.000    0.000 __init__.py:222(c_char)
        1    0.000    0.000    0.000    0.000 __init__.py:227(c_char_p)
        1    0.000    0.000    0.000    0.000 __init__.py:23(<module>)
        1    0.000    0.000    0.000    0.000 __init__.py:23(PatsyError)
        1    0.000    0.000    0.000    0.000 __init__.py:230(LogRecord)
        1    0.000    0.000    0.000    0.000 __init__.py:231(c_void_p)
        1    0.000    0.000    0.000    0.000 __init__.py:2444(Distribution)
        1    0.000    0.000    0.000    0.000 __init__.py:249(Verbose)
        1    0.000    0.000    0.000    0.000 __init__.py:251(_OrderedDict)
        1    0.000    0.000    0.000    0.000 __init__.py:255(get_supported_platform)
        1    0.000    0.000    0.000    0.000 __init__.py:268(c_wchar_p)
        1    0.000    0.000    0.000    0.000 __init__.py:27(tzfile)
        1    0.000    0.000    0.000    0.000 __init__.py:271(c_wchar)
        1    0.000    0.000    0.000    0.000 __init__.py:273(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:2773(DistInfoDistribution)
        1    0.000    0.000    0.000    0.000 __init__.py:2856(RequirementParseError)
        1    0.000    0.000    0.000    0.000 __init__.py:288(set_fileo)
        1    0.000    0.000    0.000    0.000 __init__.py:291(_CountryTimezoneDict)
        1    0.000    0.000    0.000    0.000 __init__.py:2925(Requirement)
        1    0.000    0.000    0.000    0.000 __init__.py:3064(_initialize)
        1    0.000    0.000    0.000    0.000 __init__.py:31(get_projection_names)
        1    0.000    0.000    0.000    0.000 __init__.py:319(CDLL)
        1    0.000    0.000    0.000    0.000 __init__.py:324(ResolutionError)
        1    0.000    0.000    0.000    0.000 __init__.py:330(VersionConflict)
        1    0.000    0.000    0.000    0.000 __init__.py:333(_FuncPtr)
        1    0.000    0.000    0.000    0.000 __init__.py:346(Formatter)
        1    0.000    0.000    0.000    0.000 __init__.py:349(_CountryNameDict)
        1    0.000    0.000    0.000    0.000 __init__.py:362(ContextualVersionConflict)
        1    0.000    0.000    0.000    0.000 __init__.py:363(PyDLL)
        1    0.000    0.000    0.000    0.000 __init__.py:368(_FuncPtr)
        1    0.000    0.000    0.000    0.000 __init__.py:374(_FixedOffset)
        1    0.000    0.000    0.000    0.000 __init__.py:375(DistributionNotFound)
        1    0.000    0.000    0.000    0.000 __init__.py:390(__init__)
        1    0.000    0.000    0.000    0.000 __init__.py:40(ZoneInfoFile)
        1    0.000    0.000    0.000    0.000 __init__.py:402(UnknownExtra)
        1    0.000    0.000    0.000    0.000 __init__.py:408(LibraryLoader)
        1    0.000    0.000    0.000    0.000 __init__.py:427(checkdep_ps_distiller)
        1    0.000    0.000    0.000    0.000 __init__.py:452(get_build_platform)
        1    0.000    0.000    0.000    0.000 __init__.py:463(checkdep_usetex)
        1    0.000    0.000    0.000    0.000 __init__.py:469(PYFUNCTYPE)
        1    0.000    0.000    0.000    0.000 __init__.py:470(CFunctionType)
        1    0.000    0.000    0.000    0.000 __init__.py:494(BufferingFormatter)
        1    0.000    0.000    0.000    0.000 __init__.py:512(_Counter)
        1    0.000    0.000    0.000    0.000 __init__.py:536(Filter)
        1    0.000    0.000    0.000    0.000 __init__.py:563(IMetadataProvider)
        1    0.000    0.000    0.000    0.000 __init__.py:573(Filterer)
        1    0.000    0.000    0.000    0.000 __init__.py:587(IResourceProvider)
        1    0.000    0.000    0.000    0.000 __init__.py:615(WorkingSet)
        1    0.000    0.000    0.000    0.000 __init__.py:646(Handler)
        1    0.000    0.000    0.000    0.000 __init__.py:652(_get_data_path)
        1    0.000    0.000    0.000    0.000 __init__.py:71(ProcessError)
        1    0.000    0.000    0.000    0.000 __init__.py:735(OrderedDefaultdict)
        1    0.000    0.000    0.000    0.000 __init__.py:74(BufferTooShort)
        1    0.000    0.000    0.000    0.000 __init__.py:74(LazyImporter)
        1    0.000    0.000    0.000    0.000 __init__.py:77(TimeoutError)
        1    0.000    0.000    0.000    0.000 __init__.py:80(AuthenticationError)
        1    0.000    0.000    0.000    0.000 __init__.py:810(StreamHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:824(RcParams)
        1    0.000    0.000    0.000    0.000 __init__.py:881(FileHandler)
        1    0.000    0.000    0.000    0.000 __init__.py:887(update)
        1    0.000    0.000    0.000    0.000 __init__.py:946(PlaceHolder)
        1    0.000    0.000    0.000    0.000 __init__.py:979(Environment)
        1    0.000    0.000    0.000    0.000 __init__.py:98(PEP440Warning)
        1    0.000    0.000    0.000    0.000 __init__.py:993(Manager)
        1    0.000    0.000    0.000    0.000 __init__.py:998(__init__)
        1    0.000    0.000    0.000    0.000 _add_newdocs.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _arraytools.py:3(<module>)
        1    0.000    0.000    0.000    0.000 _base.py:127(_process_plot_var_args)
        1    0.000    0.000    0.000    0.000 _base.py:318(_AxesBase)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:14(Storage)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:185(AdaptiveStepsize)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:252(RandomDisplacement)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:266(MinimizerWrapper)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:282(Metropolis)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:3(<module>)
        1    0.000    0.000    0.000    0.000 _basinhopping.py:36(BasinHoppingRunner)
        1    0.000    0.000    0.000    0.000 _binary.py:14(<module>)
        1    0.000    0.000    0.000    0.000 _binned_statistic.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _cm.py:59(cubehelix)
        1    0.000    0.000    0.000    0.000 _cm.py:6(<module>)
        1    0.000    0.000    0.000    0.000 _compat.py:14(<module>)
        1    0.000    0.000    0.000    0.000 _compat.py:30(with_metaclass)
        1    0.000    0.000    0.000    0.000 _compat.py:37(metaclass)
        1    0.000    0.000    0.000    0.000 _compat.py:38(__new__)
        1    0.000    0.000    0.000    0.000 _components.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _constants.py:4(<module>)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1005(exponpow_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1049(fatiguelife_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:109(norm_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1108(foldcauchy_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1138(f_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1218(foldnorm_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1271(frechet_r_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1313(frechet_l_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1357(genlogistic_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1399(genpareto_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1472(genexpon_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1510(genextreme_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1636(gamma_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1769(erlang_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1828(gengamma_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1874(genhalflogistic_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1915(gompertz_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:193(alpha_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1948(gumbel_r_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:1994(gumbel_l_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2037(halfcauchy_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2073(halflogistic_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2117(halfnorm_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2159(hypsecant_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2190(gausshyper_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2223(invgamma_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:226(anglit_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2275(invgauss_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2316(invweibull_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2358(johnsonsb_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2393(johnsonsu_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2430(laplace_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2464(levy_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2503(levy_l_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2542(levy_stable_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2589(logistic_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:259(arcsine_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2629(loggamma_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2669(loglaplace_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2714(lognorm_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2762(gilbrat_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2806(maxwell_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2851(mielke_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2879(nakagami_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2915(ncx2_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:2954(ncf_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:296(FitDataError)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3012(t_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3065(nct_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:309(FitSolverError)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3148(pareto_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3205(lomax_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3251(pearson3_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3378(powerlaw_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:341(beta_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3422(powerlognorm_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3452(powernorm_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3483(rdist_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3518(rayleigh_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3558(reciprocal_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3601(rice_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3639(recipinvgauss_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3672(semicircular_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:37(ksone_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3702(triang_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3744(truncexpon_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3794(truncnorm_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3851(tukeylambda_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3898(uniform_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3928(vonmises_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:3967(wald_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:4001(wrapcauchy_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:498(betaprime_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:51(kstwobign_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:549(bradford_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:595(burr_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:630(fisk_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:663(cauchy_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:703(chi_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:748(chi2_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:792(cosine_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:823(dgamma_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:869(dweibull_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:917(expon_gen)
        1    0.000    0.000    0.000    0.000 _continuous_distns.py:969(exponweib_gen)
        1    0.000    0.000    0.000    0.000 _datasource.py:154(DataSource)
        1    0.000    0.000    0.000    0.000 _datasource.py:35(<module>)
        1    0.000    0.000    0.000    0.000 _datasource.py:50(_FileOpeners)
        1    0.000    0.000    0.000    0.000 _datasource.py:504(Repository)
        1    0.000    0.000    0.000    0.000 _datasource.py:74(__init__)
        1    0.000    0.000    0.000    0.000 _decomp_polar.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _decomp_qz.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _differentialevolution.py:205(DifferentialEvolutionSolver)
        1    0.000    0.000    0.000    0.000 _differentialevolution.py:4(<module>)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:133(nbinom_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:19(binom_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:190(geom_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:246(hypergeom_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:358(logser_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:404(poisson_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:455(planck_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:513(boltzmann_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:562(randint_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:625(zipf_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:661(dlaplace_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:707(skellam_gen)
        1    0.000    0.000    0.000    0.000 _discrete_distns.py:85(bernoulli_gen)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:1192(rv_continuous)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:2397(rv_discrete)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:426(rv_frozen)
        1    0.000    0.000    0.000    0.000 _distn_infrastructure.py:606(rv_generic)
        1    0.000    0.000    0.000    0.000 _distr_params.py:3(<module>)
        1    0.000    0.000    0.000    0.000 _endian.py:22(_swapped_meta)
        1    0.000    0.000    0.000    0.000 _endian.py:4(<module>)
        1    0.000    0.000    0.000    0.000 _endian.py:45(BigEndianStructure)
        1    0.000    0.000    0.000    0.000 _expm_frechet.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _expm_multiply.py:2(<module>)
        1    0.000    0.000    0.000    0.000 _expm_multiply.py:241(MatrixPowerOperator)
        1    0.000    0.000    0.000    0.000 _expm_multiply.py:316(LazyOperatorNormInfo)
        1    0.000    0.000    0.000    0.000 _import_tools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _import_tools.py:336(PackageLoaderDebug)
        1    0.000    0.000    0.000    0.000 _import_tools.py:8(PackageLoader)
        1    0.000    0.000    0.000    0.000 _inspect.py:162(<lambda>)
        1    0.000    0.000    0.000    0.000 _inspect.py:7(<module>)
        1    0.000    0.000    0.000    0.000 _internal.py:196(_getintp_ctype)
        1    0.000    0.000    0.000    0.000 _internal.py:217(_missing_ctypes)
        1    0.000    0.000    0.000    0.000 _internal.py:224(_ctypes)
        1    0.000    0.000    0.000    0.000 _iotools.py:152(LineSplitter)
        1    0.000    0.000    0.000    0.000 _iotools.py:248(NameValidator)
        1    0.000    0.000    0.000    0.000 _iotools.py:3(<module>)
        1    0.000    0.000    0.000    0.000 _iotools.py:441(ConverterError)
        1    0.000    0.000    0.000    0.000 _iotools.py:448(ConverterLockError)
        1    0.000    0.000    0.000    0.000 _iotools.py:455(ConversionWarning)
        1    0.000    0.000    0.000    0.000 _iotools.py:468(StringConverter)
        1    0.000    0.000    0.000    0.000 _kernel_base.py:100(GenericKDE)
        1    0.000    0.000    0.000    0.000 _kernel_base.py:337(EstimatorSettings)
        1    0.000    0.000    0.000    0.000 _kernel_base.py:396(LeaveOneOut)
        1    0.000    0.000    0.000    0.000 _laplacian.py:3(<module>)
        1    0.000    0.000    0.000    0.000 _linprog.py:16(<module>)
        1    0.000    0.000    0.000    0.000 _matfuncs_sqrtm.py:20(SqrtmError)
        1    0.000    0.000    0.000    0.000 _matfuncs_sqrtm.py:6(<module>)
        1    0.000    0.000    0.000    0.000 _methods.py:5(<module>)
        1    0.000    0.000    0.000    0.000 _monotone.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _monotone.py:13(PchipInterpolator)
        1    0.000    0.000    0.000    0.000 _monotone.py:241(Akima1DInterpolator)
        1    0.000    0.000    0.000    0.000 _multivariate.py:164(_PSD)
        1    0.000    0.000    0.000    0.000 _multivariate.py:268(multivariate_normal_gen)
        1    0.000    0.000    0.000    0.000 _multivariate.py:343(__init__)
        1    0.000    0.000    0.000    0.000 _multivariate.py:485(multivariate_normal_frozen)
        1    0.000    0.000    0.000    0.000 _multivariate.py:633(dirichlet_gen)
        1    0.000    0.000    0.000    0.000 _multivariate.py:697(__init__)
        1    0.000    0.000    0.000    0.000 _multivariate.py:853(dirichlet_frozen)
        1    0.000    0.000    0.000    0.000 _ni_support.py:31(<module>)
        1    0.000    0.000    0.000    0.000 _numpy_compat.py:3(<module>)
        1    0.000    0.000    0.000    0.000 _ode.py:103(ode)
        1    0.000    0.000    0.000    0.000 _ode.py:1035(dop853)
        1    0.000    0.000    0.000    0.000 _ode.py:1086(lsoda)
        1    0.000    0.000    0.000    0.000 _ode.py:459(complex_ode)
        1    0.000    0.000    0.000    0.000 _ode.py:602(IntegratorConcurrencyError)
        1    0.000    0.000    0.000    0.000 _ode.py:616(IntegratorBase)
        1    0.000    0.000    0.000    0.000 _ode.py:678(vode)
        1    0.000    0.000    0.000    0.000 _ode.py:878(zvode)
        1    0.000    0.000    0.000    0.000 _ode.py:950(dopri5)
        1    0.000    0.000    0.000    0.000 _onenormest.py:2(<module>)
        1    0.000    0.000    0.000    0.000 _parseaddr.py:172(AddrlistClass)
        1    0.000    0.000    0.000    0.000 _parseaddr.py:452(AddressList)
        1    0.000    0.000    0.000    0.000 _parseaddr.py:7(<module>)
        1    0.000    0.000    0.000    0.000 _peak_finding.py:3(<module>)
        1    0.000    0.000    0.000    0.000 _penalties.py:120(CovariancePenalty)
        1    0.000    0.000    0.000    0.000 _penalties.py:158(PSD)
        1    0.000    0.000    0.000    0.000 _penalties.py:20(<module>)
        1    0.000    0.000    0.000    0.000 _penalties.py:24(Penalty)
        1    0.000    0.000    0.000    0.000 _penalties.py:77(L2)
        1    0.000    0.000    0.000    0.000 _penalties.py:96(PseudoHuber)
        1    0.000    0.000    0.000    0.000 _polybase.py:19(ABCPolyBase)
        1    0.000    0.000    0.000    0.000 _polybase.py:8(<module>)
        1    0.000    0.000    0.000    0.000 _procrustes.py:4(<module>)
        1    0.000    0.000    0.000    0.000 _pylab_helpers.py:17(Gcf)
        1    0.000    0.000    0.000    0.000 _pylab_helpers.py:3(<module>)
        1    0.000    0.000    0.000    0.000 _solvers.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _structures.py:14(<module>)
        1    0.000    0.000    0.000    0.000 _structures.py:17(Infinity)
        1    0.000    0.000    0.000    0.000 _structures.py:49(NegativeInfinity)
        1    0.000    0.000    0.000    0.000 _subplots.py:16(SubplotBase)
        1    0.000    0.000    0.000    0.000 _subplots.py:161(subplot_class_factory)
        1    0.000    0.000    0.000    0.000 _subplots.py:183(_PicklableSubplotClassConstructor)
        1    0.000    0.000    0.000    0.000 _trustregion.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _trustregion.py:14(BaseQuadraticSubproblem)
        1    0.000    0.000    0.000    0.000 _trustregion_dogleg.py:29(DoglegSubproblem)
        1    0.000    0.000    0.000    0.000 _trustregion_ncg.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _trustregion_ncg.py:33(CGSteihaugSubproblem)
        1    0.000    0.000    0.000    0.000 _tukeylambda_stats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _util.py:22(deferred_error)
        1    0.000    0.000    0.000    0.000 _util.py:37(DeprecatedImport)
        1    0.000    0.000    0.000    0.000 _utils.py:1(<module>)
        1    0.000    0.000    0.000    0.000 _version.py:17(NumpyVersion)
        1    0.000    0.000    0.000    0.000 _version.py:18(NumpyVersion)
        1    0.000    0.000    0.000    0.000 adfvalues.py:1(<module>)
        1    0.000    0.000    0.000    0.000 adnorm.py:7(<module>)
        1    0.000    0.000    0.000    0.000 afm.py:339(AFM)
        1    0.000    0.000    0.000    0.000 aft_el.py:173(emplikeAFT)
        1    0.000    0.000    0.000    0.000 aft_el.py:29(<module>)
        1    0.000    0.000    0.000    0.000 aft_el.py:369(AFTResults)
        1    0.000    0.000    0.000    0.000 aft_el.py:41(OptAFT)
        1    0.000    0.000    0.000    0.000 algorithms.py:4(<module>)
        1    0.000    0.000    0.000    0.000 align.py:2(<module>)
        1    0.000    0.000    0.000    0.000 align.py:43(_filter_special_cases)
        1    0.000    0.000    0.000    0.000 anneal.py:120(cauchy_sa)
        1    0.000    0.000    0.000    0.000 anneal.py:134(boltzmann_sa)
        1    0.000    0.000    0.000    0.000 anneal.py:150(_state)
        1    0.000    0.000    0.000    0.000 anneal.py:18(base_schedule)
        1    0.000    0.000    0.000    0.000 anneal.py:4(<module>)
        1    0.000    0.000    0.000    0.000 anneal.py:96(fast_sa)
        1    0.000    0.000    0.000    0.000 anova.py:1(<module>)
        1    0.000    0.000    0.000    0.000 ar_model.py:604(ARResults)
        1    0.000    0.000    0.000    0.000 ar_model.py:65(AR)
        1    0.000    0.000    0.000    0.000 ar_model.py:823(ARResultsWrapper)
        1    0.000    0.000    0.000    0.000 arcgis.py:20(ArcGIS)
        1    0.000    0.000    0.000    0.000 arima_model.py:1208(ARMAResults)
        1    0.000    0.000    0.000    0.000 arima_model.py:1745(ARMAResultsWrapper)
        1    0.000    0.000    0.000    0.000 arima_model.py:1755(ARIMAResults)
        1    0.000    0.000    0.000    0.000 arima_model.py:1874(ARIMAResultsWrapper)
        1    0.000    0.000    0.000    0.000 arima_model.py:436(ARMA)
        1    0.000    0.000    0.000    0.000 arima_model.py:951(ARIMA)
        1    0.000    0.000    0.000    0.000 arima_process.py:54(<module>)
        1    0.000    0.000    0.000    0.000 arima_process.py:597(ArmaProcess)
        1    0.000    0.000    0.000    0.000 arpack.py:277(ArpackError)
        1    0.000    0.000    0.000    0.000 arpack.py:286(ArpackNoConvergence)
        1    0.000    0.000    0.000    0.000 arpack.py:304(_ArpackParams)
        1    0.000    0.000    0.000    0.000 arpack.py:374(_SymmetricArpackParams)
        1    0.000    0.000    0.000    0.000 arpack.py:592(_UnsymmetricArpackParams)
        1    0.000    0.000    0.000    0.000 arpack.py:896(SpLuInv)
        1    0.000    0.000    0.000    0.000 arpack.py:918(LuInv)
        1    0.000    0.000    0.000    0.000 arpack.py:932(IterInv)
        1    0.000    0.000    0.000    0.000 arpack.py:962(IterOpInv)
        1    0.000    0.000    0.000    0.000 array.py:97(SparseArray)
        1    0.000    0.000    0.000    0.000 arraypad.py:5(<module>)
        1    0.000    0.000    0.000    0.000 arrayprint.py:532(FloatFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:638(IntegerFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:658(LongFloatFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:688(LongComplexFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:699(ComplexFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:715(DatetimeFormat)
        1    0.000    0.000    0.000    0.000 arrayprint.py:743(TimedeltaFormat)
        1    0.000    0.000    0.000    0.000 arraysetops.py:26(<module>)
        1    0.000    0.000    0.000    0.000 arrayterator.py:20(Arrayterator)
        1    0.000    0.000    0.000    0.000 arrayterator.py:9(<module>)
        1    0.000    0.000    0.000    0.000 artist.py:70(Artist)
        1    0.000    0.000    0.000    0.000 ast.py:217(NodeVisitor)
        1    0.000    0.000    0.000    0.000 ast.py:254(NodeTransformer)
        1    0.000    0.000    0.000    0.000 ast.py:27(<module>)
        1    0.000    0.000    0.000    0.000 atexit.py:6(<module>)
        1    0.000    0.000    0.000    0.000 axis.py:1634(XAxis)
        1    0.000    0.000    0.000    0.000 axis.py:1934(YAxis)
        1    0.000    0.000    0.000    0.000 axis.py:27(Tick)
        1    0.000    0.000    0.000    0.000 axis.py:326(XTick)
        1    0.000    0.000    0.000    0.000 axis.py:468(YTick)
        1    0.000    0.000    0.000    0.000 axis.py:606(Ticker)
        1    0.000    0.000    0.000    0.000 axis.py:611(Axis)
        1    0.000    0.000    0.000    0.000 backend_agg.py:440(FigureCanvasAgg)
        1    0.000    0.000    0.000    0.000 backend_agg.py:65(RendererAgg)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1147(TimerBase)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1300(Event)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1323(IdleEvent)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1331(DrawEvent)
        1    0.000    0.000    0.000    0.000 backend_bases.py:134(ShowBase)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1347(ResizeEvent)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1366(CloseEvent)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1377(LocationEvent)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1482(MouseEvent)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1540(PickEvent)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1581(KeyEvent)
        1    0.000    0.000    0.000    0.000 backend_bases.py:1618(FigureCanvasBase)
        1    0.000    0.000    0.000    0.000 backend_bases.py:190(RendererBase)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2534(NonGuiException)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2538(FigureManagerBase)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2615(Cursors)
        1    0.000    0.000    0.000    0.000 backend_bases.py:2621(NavigationToolbar2)
        1    0.000    0.000    0.000    0.000 backend_bases.py:761(GraphicsContextBase)
        1    0.000    0.000    0.000    0.000 baidu.py:19(Baidu)
        1    0.000    0.000    0.000    0.000 baidu.py:3(<module>)
        1    0.000    0.000    0.000    0.000 bandwidths.py:1(<module>)
        1    0.000    0.000    0.000    0.000 base.py:11(AllPairsResults)
        1    0.000    0.000    0.000    0.000 base.py:117(PandasDelegate)
        1    0.000    0.000    0.000    0.000 base.py:120(IPluginInterface)
        1    0.000    0.000    0.000    0.000 base.py:16(SparseWarning)
        1    0.000    0.000    0.000    0.000 base.py:179(AccessorProperty)
        1    0.000    0.000    0.000    0.000 base.py:20(SparseFormatWarning)
        1    0.000    0.000    0.000    0.000 base.py:200(FrozenList)
        1    0.000    0.000    0.000    0.000 base.py:21(StringMixin)
        1    0.000    0.000    0.000    0.000 base.py:22(DatetimeIndexOpsMixin)
        1    0.000    0.000    0.000    0.000 base.py:24(SparseEfficiencyWarning)
        1    0.000    0.000    0.000    0.000 base.py:267(FrozenNDArray)
        1    0.000    0.000    0.000    0.000 base.py:304(IndexOpsMixin)
        1    0.000    0.000    0.000    0.000 base.py:55(spmatrix)
        1    0.000    0.000    0.000    0.000 base.py:63(Geocoder)
        1    0.000    0.000    0.000    0.000 base.py:7(<module>)
        1    0.000    0.000    0.000    0.000 base.py:7(Plugin)
        1    0.000    0.000    0.000    0.000 base.py:70(PandasObject)
        1    0.000    0.000    0.000    0.000 base64.py:3(<module>)
        1    0.000    0.000    0.000    0.000 basic.py:40(SpecialFunctionWarning)
        1    0.000    0.000    0.000    0.000 bezier.py:153(BezierSegment)
        1    0.000    0.000    0.000    0.000 bezier.py:17(NonIntersectingPathException)
        1    0.000    0.000    0.000    0.000 bezier.py:3(<module>)
        1    0.000    0.000    0.000    0.000 bing.py:22(Bing)
        1    0.000    0.000    0.000    0.000 bing.py:3(<module>)
        1    0.000    0.000    0.000    0.000 blocking_input.py:123(BlockingMouseInput)
        1    0.000    0.000    0.000    0.000 blocking_input.py:23(<module>)
        1    0.000    0.000    0.000    0.000 blocking_input.py:296(BlockingContourLabeler)
        1    0.000    0.000    0.000    0.000 blocking_input.py:34(BlockingInput)
        1    0.000    0.000    0.000    0.000 blocking_input.py:349(BlockingKeyMouseInput)
        1    0.000    0.000    0.000    0.000 boxplots.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bsplines.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bsr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 bsr.py:22(bsr_matrix)
        1    0.000    0.000    0.000    0.000 build.py:32(_MockFactor)
        1    0.000    0.000    0.000    0.000 build.py:774(_CheckMatch)
        1    0.000    0.000    0.000    0.000 calc_lwork.py:16(_deprecated)
        1    0.000    0.000    0.000    0.000 calendar.py:126(Calendar)
        1    0.000    0.000    0.000    0.000 calendar.py:132(__init__)
        1    0.000    0.000    0.000    0.000 calendar.py:138(setfirstweekday)
        1    0.000    0.000    0.000    0.000 calendar.py:21(IllegalMonthError)
        1    0.000    0.000    0.000    0.000 calendar.py:259(TextCalendar)
        1    0.000    0.000    0.000    0.000 calendar.py:28(IllegalWeekdayError)
        1    0.000    0.000    0.000    0.000 calendar.py:376(HTMLCalendar)
        1    0.000    0.000    0.000    0.000 calendar.py:47(_localized_month)
        1    0.000    0.000    0.000    0.000 calendar.py:488(TimeEncoding)
        1    0.000    0.000    0.000    0.000 calendar.py:501(LocaleTextCalendar)
        1    0.000    0.000    0.000    0.000 calendar.py:536(LocaleHTMLCalendar)
        1    0.000    0.000    0.000    0.000 calendar.py:6(<module>)
        1    0.000    0.000    0.000    0.000 calendar.py:66(_localized_day)
        1    0.000    0.000    0.000    0.000 case.py:1018(FunctionTestCase)
        1    0.000    0.000    0.000    0.000 case.py:133(TestCase)
        1    0.000    0.000    0.000    0.000 case.py:180(__init__)
        1    0.000    0.000    0.000    0.000 case.py:188(TestBase)
        1    0.000    0.000    0.000    0.000 case.py:19(Test)
        1    0.000    0.000    0.000    0.000 case.py:209(FunctionTestCase)
        1    0.000    0.000    0.000    0.000 case.py:25(SkipTest)
        1    0.000    0.000    0.000    0.000 case.py:307(MethodTestCase)
        1    0.000    0.000    0.000    0.000 case.py:34(_ExpectedFailure)
        1    0.000    0.000    0.000    0.000 case.py:4(<module>)
        1    0.000    0.000    0.000    0.000 case.py:45(_UnexpectedSuccess)
        1    0.000    0.000    0.000    0.000 case.py:98(_AssertRaisesContext)
        1    0.000    0.000    0.000    0.000 categorical.py:125(Categorical)
        1    0.000    0.000    0.000    0.000 categorical.py:1605(CategoricalAccessor)
        1    0.000    0.000    0.000    0.000 categorical.py:165(CategoricalSniffer)
        1    0.000    0.000    0.000    0.000 categorical.py:5(<module>)
        1    0.000    0.000    0.000    0.000 categorical.py:56(_CategoricalBox)
        1    0.000    0.000    0.000    0.000 cbook.py:1011(GetRealpathAndStat)
        1    0.000    0.000    0.000    0.000 cbook.py:1012(__init__)
        1    0.000    0.000    0.000    0.000 cbook.py:1039(RingBuffer)
        1    0.000    0.000    0.000    0.000 cbook.py:1045(__Full)
        1    0.000    0.000    0.000    0.000 cbook.py:1278(maxdict)
        1    0.000    0.000    0.000    0.000 cbook.py:1298(Stack)
        1    0.000    0.000    0.000    0.000 cbook.py:1502(MemoryMonitor)
        1    0.000    0.000    0.000    0.000 cbook.py:1621(Grouper)
        1    0.000    0.000    0.000    0.000 cbook.py:2282(_NestedClassGetter)
        1    0.000    0.000    0.000    0.000 cbook.py:2302(_InstanceMethodPickler)
        1    0.000    0.000    0.000    0.000 cbook.py:275(converter)
        1    0.000    0.000    0.000    0.000 cbook.py:293(tostr)
        1    0.000    0.000    0.000    0.000 cbook.py:299(todatetime)
        1    0.000    0.000    0.000    0.000 cbook.py:313(todate)
        1    0.000    0.000    0.000    0.000 cbook.py:327(tofloat)
        1    0.000    0.000    0.000    0.000 cbook.py:339(toint)
        1    0.000    0.000    0.000    0.000 cbook.py:350(_BoundMethodProxy)
        1    0.000    0.000    0.000    0.000 cbook.py:37(MatplotlibDeprecationWarning)
        1    0.000    0.000    0.000    0.000 cbook.py:437(CallbackRegistry)
        1    0.000    0.000    0.000    0.000 cbook.py:543(Scheduler)
        1    0.000    0.000    0.000    0.000 cbook.py:565(Timeout)
        1    0.000    0.000    0.000    0.000 cbook.py:585(Idle)
        1    0.000    0.000    0.000    0.000 cbook.py:609(silent_list)
        1    0.000    0.000    0.000    0.000 cbook.py:644(Bunch)
        1    0.000    0.000    0.000    0.000 cbook.py:657(__init__)
        1    0.000    0.000    0.000    0.000 cbook.py:850(Sorter)
        1    0.000    0.000    0.000    0.000 cbook.py:898(Xlator)
        1    0.000    0.000    0.000    0.000 cbook.py:958(Null)
        1    0.000    0.000    0.000    0.000 cf_filter.py:1(<module>)
        1    0.000    0.000    0.000    0.000 chainmap.py:7(DeepChainMap)
        1    0.000    0.000    0.000    0.000 chainmap_impl.py:1(<module>)
        1    0.000    0.000    0.000    0.000 chainmap_impl.py:12(decorating_function)
        1    0.000    0.000    0.000    0.000 chainmap_impl.py:35(ChainMap)
        1    0.000    0.000    0.000    0.000 chainmap_impl.py:9(recursive_repr)
        1    0.000    0.000    0.000    0.000 charset.py:156(Charset)
        1    0.000    0.000    0.000    0.000 chebyshev.py:2017(Chebyshev)
        1    0.000    0.000    0.000    0.000 chebyshev.py:87(<module>)
        1    0.000    0.000    0.000    0.000 clipboard.py:1(<module>)
        1    0.000    0.000    0.000    0.000 cm.py:166(ScalarMappable)
        1    0.000    0.000    0.000    0.000 collections.py:1155(EventCollection)
        1    0.000    0.000    0.000    0.000 collections.py:1407(CircleCollection)
        1    0.000    0.000    0.000    0.000 collections.py:1427(EllipseCollection)
        1    0.000    0.000    0.000    0.000 collections.py:1517(PatchCollection)
        1    0.000    0.000    0.000    0.000 collections.py:1580(TriMesh)
        1    0.000    0.000    0.000    0.000 collections.py:1650(QuadMesh)
        1    0.000    0.000    0.000    0.000 collections.py:26(OrderedDict)
        1    0.000    0.000    0.000    0.000 collections.py:36(Collection)
        1    0.000    0.000    0.000    0.000 collections.py:387(Counter)
        1    0.000    0.000    0.000    0.000 collections.py:727(_CollectionWithSizes)
        1    0.000    0.000    0.000    0.000 collections.py:775(PathCollection)
        1    0.000    0.000    0.000    0.000 collections.py:799(PolyCollection)
        1    0.000    0.000    0.000    0.000 collections.py:851(BrokenBarHCollection)
        1    0.000    0.000    0.000    0.000 collections.py:898(RegularPolyCollection)
        1    0.000    0.000    0.000    0.000 collections.py:963(StarPolygonCollection)
        1    0.000    0.000    0.000    0.000 collections.py:970(AsteriskPolygonCollection)
        1    0.000    0.000    0.000    0.000 collections.py:977(LineCollection)
        1    0.000    0.000    0.000    0.000 colorbar.py:1229(ColorbarPatch)
        1    0.000    0.000    0.000    0.000 colorbar.py:218(ColorbarBase)
        1    0.000    0.000    0.000    0.000 colorbar.py:854(Colorbar)
        1    0.000    0.000    0.000    0.000 colors.py:1034(SymLogNorm)
        1    0.000    0.000    0.000    0.000 colors.py:1148(PowerNorm)
        1    0.000    0.000    0.000    0.000 colors.py:1224(BoundaryNorm)
        1    0.000    0.000    0.000    0.000 colors.py:1292(NoNorm)
        1    0.000    0.000    0.000    0.000 colors.py:1464(LightSource)
        1    0.000    0.000    0.000    0.000 colors.py:243(ColorConverter)
        1    0.000    0.000    0.000    0.000 colors.py:490(Colormap)
        1    0.000    0.000    0.000    0.000 colors.py:669(LinearSegmentedColormap)
        1    0.000    0.000    0.000    0.000 colors.py:782(ListedColormap)
        1    0.000    0.000    0.000    0.000 colors.py:846(Normalize)
        1    0.000    0.000    0.000    0.000 colors.py:963(LogNorm)
        1    0.000    0.000    0.000    0.000 common.py:107(DatetimeProperties)
        1    0.000    0.000    0.000    0.000 common.py:107(_ABCGeneric)
        1    0.000    0.000    0.000    0.000 common.py:131(TimedeltaProperties)
        1    0.000    0.000    0.000    0.000 common.py:140(CategoricalDtypeType)
        1    0.000    0.000    0.000    0.000 common.py:147(CategoricalDtype)
        1    0.000    0.000    0.000    0.000 common.py:167(PeriodProperties)
        1    0.000    0.000    0.000    0.000 common.py:186(CombinedDatetimelikeProperties)
        1    0.000    0.000    0.000    0.000 common.py:1974(_possibly_cast_to_datetime)
        1    0.000    0.000    0.000    0.000 common.py:2(<module>)
        1    0.000    0.000    0.000    0.000 common.py:2049(_possibly_infer_to_datetimelike)
        1    0.000    0.000    0.000    0.000 common.py:2144(_default_index)
        1    0.000    0.000    0.000    0.000 common.py:2296(groupby)
        1    0.000    0.000    0.000    0.000 common.py:23(NameResolutionError)
        1    0.000    0.000    0.000    0.000 common.py:26(PandasError)
        1    0.000    0.000    0.000    0.000 common.py:2770(UTF8Recoder)
        1    0.000    0.000    0.000    0.000 common.py:2844(UnicodeReader)
        1    0.000    0.000    0.000    0.000 common.py:2868(UnicodeWriter)
        1    0.000    0.000    0.000    0.000 common.py:30(SettingWithCopyError)
        1    0.000    0.000    0.000    0.000 common.py:34(SettingWithCopyWarning)
        1    0.000    0.000    0.000    0.000 common.py:38(AmbiguousIndexError)
        1    0.000    0.000    0.000    0.000 common.py:4(<module>)
        1    0.000    0.000    0.000    0.000 common.py:42(AbstractMethodError)
        1    0.000    0.000    0.000    0.000 common.py:42(PerformanceWarning)
        1    0.000    0.000    0.000    0.000 common.py:46(DtypeWarning)
        1    0.000    0.000    0.000    0.000 common.py:58(Properties)
        1    0.000    0.000    0.000    0.000 common.py:70(_check)
        1    0.000    0.000    0.000    0.000 compat.py:11(<module>)
        1    0.000    0.000    0.000    0.000 compat.py:3(<module>)
        1    0.000    0.000    0.000    0.000 compressed.py:21(_cs_matrix)
        1    0.000    0.000    0.000    0.000 config.py:141(Config)
        1    0.000    0.000    0.000    0.000 config.py:165(get_default_val)
        1    0.000    0.000    0.000    0.000 config.py:170(DictWrapper)
        1    0.000    0.000    0.000    0.000 config.py:175(__init__)
        1    0.000    0.000    0.000    0.000 config.py:215(CallableDynamicDoc)
        1    0.000    0.000    0.000    0.000 config.py:31(NoSuchOptionError)
        1    0.000    0.000    0.000    0.000 config.py:37(ConfigError)
        1    0.000    0.000    0.000    0.000 config.py:371(option_context)
        1    0.000    0.000    0.000    0.000 config.py:41(ConfiguredDefaultsOptionParser)
        1    0.000    0.000    0.000    0.000 config.py:527(_select_options)
        1    0.000    0.000    0.000    0.000 config.py:560(_get_deprecated_option)
        1    0.000    0.000    0.000    0.000 config.py:577(_get_registered_option)
        1    0.000    0.000    0.000    0.000 config.py:588(_translate_key)
        1    0.000    0.000    0.000    0.000 config.py:614(NoOptions)
        1    0.000    0.000    0.000    0.000 config.py:69(OptionError)
        1    0.000    0.000    0.000    0.000 config.py:78(_get_single_key)
        1    0.000    0.000    0.000    0.000 config_init.py:353(_register_xlsx)
        1    0.000    0.000    0.000    0.000 constraint.py:228(_EvalConstraint)
        1    0.000    0.000    0.000    0.000 constraint.py:24(LinearConstraint)
        1    0.000    0.000    0.000    0.000 construct.py:2(<module>)
        1    0.000    0.000    0.000    0.000 container.py:1(<module>)
        1    0.000    0.000    0.000    0.000 container.py:105(BarContainer)
        1    0.000    0.000    0.000    0.000 container.py:113(ErrorbarContainer)
        1    0.000    0.000    0.000    0.000 container.py:122(StemContainer)
        1    0.000    0.000    0.000    0.000 container.py:9(Container)
        1    0.000    0.000    0.000    0.000 contextlib.py:1(<module>)
        1    0.000    0.000    0.000    0.000 contextlib.py:132(closing)
        1    0.000    0.000    0.000    0.000 contextlib.py:9(GeneratorContextManager)
        1    0.000    0.000    0.000    0.000 contingency.py:2(<module>)
        1    0.000    0.000    0.000    0.000 contour.py:1400(QuadContourSet)
        1    0.000    0.000    0.000    0.000 contour.py:41(ClabelText)
        1    0.000    0.000    0.000    0.000 contour.py:56(ContourLabeler)
        1    0.000    0.000    0.000    0.000 contour.py:762(ContourSet)
        1    0.000    0.000    0.000    0.000 contrast.py:1(<module>)
        1    0.000    0.000    0.000    0.000 contrast.py:11(ContrastResults)
        1    0.000    0.000    0.000    0.000 contrast.py:185(Contrast)
        1    0.000    0.000    0.000    0.000 contrasts.py:137(Treatment)
        1    0.000    0.000    0.000    0.000 contrasts.py:210(Poly)
        1    0.000    0.000    0.000    0.000 contrasts.py:22(ContrastMatrix)
        1    0.000    0.000    0.000    0.000 contrasts.py:334(Sum)
        1    0.000    0.000    0.000    0.000 contrasts.py:435(Helmert)
        1    0.000    0.000    0.000    0.000 contrasts.py:512(Diff)
        1    0.000    0.000    0.000    0.000 contrasts.py:8(<module>)
        1    0.000    0.000    0.000    0.000 converter.py:1(<module>)
        1    0.000    0.000    0.000    0.000 converter.py:106(PeriodConverter)
        1    0.000    0.000    0.000    0.000 converter.py:159(DatetimeConverter)
        1    0.000    0.000    0.000    0.000 converter.py:218(PandasAutoDateFormatter)
        1    0.000    0.000    0.000    0.000 converter.py:252(PandasAutoDateLocator)
        1    0.000    0.000    0.000    0.000 converter.py:27(register)
        1    0.000    0.000    0.000    0.000 converter.py:277(MilliSecondLocator)
        1    0.000    0.000    0.000    0.000 converter.py:53(TimeConverter)
        1    0.000    0.000    0.000    0.000 converter.py:82(TimeFormatter)
        1    0.000    0.000    0.000    0.000 converter.py:849(TimeSeries_DateLocator)
        1    0.000    0.000    0.000    0.000 converter.py:931(TimeSeries_DateFormatter)
        1    0.000    0.000    0.000    0.000 coo.py:1(<module>)
        1    0.000    0.000    0.000    0.000 coo.py:21(coo_matrix)
        1    0.000    0.000    0.000    0.000 copy.py:113(_copy_with_constructor)
        1    0.000    0.000    0.000    0.000 core.py:1039(_DomainedBinaryOperation)
        1    0.000    0.000    0.000    0.000 core.py:105(update_user_library)
        1    0.000    0.000    0.000    0.000 core.py:128(MAError)
        1    0.000    0.000    0.000    0.000 core.py:131(MaskError)
        1    0.000    0.000    0.000    0.000 core.py:155(reload_library)
        1    0.000    0.000    0.000    0.000 core.py:2255(_MaskedPrintOption)
        1    0.000    0.000    0.000    0.000 core.py:2260(__init__)
        1    0.000    0.000    0.000    0.000 core.py:2404(_arraymethod)
        1    0.000    0.000    0.000    0.000 core.py:2473(MaskedIterator)
        1    0.000    0.000    0.000    0.000 core.py:2586(MaskedArray)
        1    0.000    0.000    0.000    0.000 core.py:27(TextTestRunner)
        1    0.000    0.000    0.000    0.000 core.py:5636(mvoid)
        1    0.000    0.000    0.000    0.000 core.py:5832(MaskedConstant)
        1    0.000    0.000    0.000    0.000 core.py:5838(__new__)
        1    0.000    0.000    0.000    0.000 core.py:5841(__array_finalize__)
        1    0.000    0.000    0.000    0.000 core.py:5942(_extrema_operation)
        1    0.000    0.000    0.000    0.000 core.py:5997(_minimum_operation)
        1    0.000    0.000    0.000    0.000 core.py:5999(__init__)
        1    0.000    0.000    0.000    0.000 core.py:6009(_maximum_operation)
        1    0.000    0.000    0.000    0.000 core.py:6011(__init__)
        1    0.000    0.000    0.000    0.000 core.py:6053(_frommethod)
        1    0.000    0.000    0.000    0.000 core.py:72(TestProgram)
        1    0.000    0.000    0.000    0.000 core.py:7278(_convert2ma)
        1    0.000    0.000    0.000    0.000 core.py:739(_DomainCheckInterval)
        1    0.000    0.000    0.000    0.000 core.py:761(_DomainTan)
        1    0.000    0.000    0.000    0.000 core.py:767(__init__)
        1    0.000    0.000    0.000    0.000 core.py:777(_DomainSafeDivide)
        1    0.000    0.000    0.000    0.000 core.py:794(_DomainGreater)
        1    0.000    0.000    0.000    0.000 core.py:806(_DomainGreaterEqual)
        1    0.000    0.000    0.000    0.000 core.py:817(_MaskedUnaryOperation)
        1    0.000    0.000    0.000    0.000 core.py:894(_MaskedBinaryOperation)
        1    0.000    0.000    0.000    0.000 core.py:98(iter_user_libraries)
        1    0.000    0.000    0.000    0.000 correlation.py:9(<module>)
        1    0.000    0.000    0.000    0.000 correlation_tools.py:418(Bunch)
        1    0.000    0.000    0.000    0.000 correlation_tools.py:425(FactoredPSDMatrix)
        1    0.000    0.000    0.000    0.000 correlation_tools.py:8(<module>)
        1    0.000    0.000    0.000    0.000 counter.py:15(Counter)
        1    0.000    0.000    0.000    0.000 counter.py:7(<module>)
        1    0.000    0.000    0.000    0.000 cov_struct.py:10(CovStruct)
        1    0.000    0.000    0.000    0.000 cov_struct.py:175(Independence)
        1    0.000    0.000    0.000    0.000 cov_struct.py:206(Exchangeable)
        1    0.000    0.000    0.000    0.000 cov_struct.py:282(Nested)
        1    0.000    0.000    0.000    0.000 cov_struct.py:470(Autoregressive)
        1    0.000    0.000    0.000    0.000 cov_struct.py:672(GlobalOddsRatio)
        1    0.000    0.000    0.000    0.000 csc.py:1(<module>)
        1    0.000    0.000    0.000    0.000 csc.py:21(csc_matrix)
        1    0.000    0.000    0.000    0.000 csr.py:20(csr_matrix)
        1    0.000    0.000    0.000    0.000 csv.py:123(DictWriter)
        1    0.000    0.000    0.000    0.000 csv.py:162(Sniffer)
        1    0.000    0.000    0.000    0.000 csv.py:26(Dialect)
        1    0.000    0.000    0.000    0.000 csv.py:57(excel)
        1    0.000    0.000    0.000    0.000 csv.py:67(excel_tab)
        1    0.000    0.000    0.000    0.000 csv.py:73(DictReader)
        1    0.000    0.000    0.000    0.000 ctypeslib.py:150(_ndptr)
        1    0.000    0.000    0.000    0.000 data.py:100(_minmax_mixin)
        1    0.000    0.000    0.000    0.000 data.py:2(<module>)
        1    0.000    0.000    0.000    0.000 data.py:24(_data_matrix)
        1    0.000    0.000    0.000    0.000 data.py:412(PatsyData)
        1    0.000    0.000    0.000    0.000 data.py:417(PandasData)
        1    0.000    0.000    0.000    0.000 data.py:50(ModelData)
        1    0.000    0.000    0.000    0.000 databc.py:16(DataBC)
        1    0.000    0.000    0.000    0.000 databc.py:3(<module>)
        1    0.000    0.000    0.000    0.000 date_converters.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dates.py:1043(MonthLocator)
        1    0.000    0.000    0.000    0.000 dates.py:1062(WeekdayLocator)
        1    0.000    0.000    0.000    0.000 dates.py:1084(DayLocator)
        1    0.000    0.000    0.000    0.000 dates.py:1103(HourLocator)
        1    0.000    0.000    0.000    0.000 dates.py:1122(MinuteLocator)
        1    0.000    0.000    0.000    0.000 dates.py:1141(SecondLocator)
        1    0.000    0.000    0.000    0.000 dates.py:1160(MicrosecondLocator)
        1    0.000    0.000    0.000    0.000 dates.py:1322(DateConverter)
        1    0.000    0.000    0.000    0.000 dates.py:156(_UTC)
        1    0.000    0.000    0.000    0.000 dates.py:247(strpdate2num)
        1    0.000    0.000    0.000    0.000 dates.py:382(DateFormatter)
        1    0.000    0.000    0.000    0.000 dates.py:469(IndexDateFormatter)
        1    0.000    0.000    0.000    0.000 dates.py:496(AutoDateFormatter)
        1    0.000    0.000    0.000    0.000 dates.py:590(rrulewrapper)
        1    0.000    0.000    0.000    0.000 dates.py:607(DateLocator)
        1    0.000    0.000    0.000    0.000 dates.py:656(RRuleLocator)
        1    0.000    0.000    0.000    0.000 dates.py:776(AutoDateLocator)
        1    0.000    0.000    0.000    0.000 dates.py:987(YearLocator)
        1    0.000    0.000    0.000    0.000 datetools.py:11(_freq_to_pandas_class)
        1    0.000    0.000    0.000    0.000 decimal.py:161(DecimalException)
        1    0.000    0.000    0.000    0.000 decimal.py:184(Clamped)
        1    0.000    0.000    0.000    0.000 decimal.py:196(InvalidOperation)
        1    0.000    0.000    0.000    0.000 decimal.py:225(ConversionSyntax)
        1    0.000    0.000    0.000    0.000 decimal.py:235(DivisionByZero)
        1    0.000    0.000    0.000    0.000 decimal.py:251(DivisionImpossible)
        1    0.000    0.000    0.000    0.000 decimal.py:262(DivisionUndefined)
        1    0.000    0.000    0.000    0.000 decimal.py:273(Inexact)
        1    0.000    0.000    0.000    0.000 decimal.py:285(InvalidContext)
        1    0.000    0.000    0.000    0.000 decimal.py:299(Rounded)
        1    0.000    0.000    0.000    0.000 decimal.py:311(Subnormal)
        1    0.000    0.000    0.000    0.000 decimal.py:322(Overflow)
        1    0.000    0.000    0.000    0.000 decimal.py:360(Underflow)
        1    0.000    0.000    0.000    0.000 decimal.py:3748(_ContextManager)
        1    0.000    0.000    0.000    0.000 decimal.py:3763(Context)
        1    0.000    0.000    0.000    0.000 decimal.py:506(Decimal)
        1    0.000    0.000    0.000    0.000 decimal.py:5418(_WorkRep)
        1    0.000    0.000    0.000    0.000 decimal.py:5672(_Log10Memoize)
        1    0.000    0.000    0.000    0.000 decimal.py:5676(__init__)
        1    0.000    0.000    0.000    0.000 decoder.py:273(JSONDecoder)
        1    0.000    0.000    0.000    0.000 decoder.py:303(__init__)
        1    0.000    0.000    0.000    0.000 decomp.py:15(<module>)
        1    0.000    0.000    0.000    0.000 decomp_cholesky.py:1(<module>)
        1    0.000    0.000    0.000    0.000 decomp_lu.py:1(<module>)
        1    0.000    0.000    0.000    0.000 decomp_qr.py:1(<module>)
        1    0.000    0.000    0.000    0.000 decomp_svd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 decorator.py:61(getfullargspec)
        1    0.000    0.000    0.000    0.000 decorator.py:81(FunctionMaker)
        1    0.000    0.000    0.000    0.000 decorators.py:116(CachedWritableAttribute)
        1    0.000    0.000    0.000    0.000 decorators.py:126(_cache_readonly)
        1    0.000    0.000    0.000    0.000 decorators.py:142(cache_writable)
        1    0.000    0.000    0.000    0.000 decorators.py:15(<module>)
        1    0.000    0.000    0.000    0.000 decorators.py:152(Appender)
        1    0.000    0.000    0.000    0.000 decorators.py:154(OneTimeProperty)
        1    0.000    0.000    0.000    0.000 decorators.py:204(KnownFailureTest)
        1    0.000    0.000    0.000    0.000 decorators.py:71(CachedAttribute)
        1    0.000    0.000    0.000    0.000 decorators.py:9(ResettableCache)
        1    0.000    0.000    0.000    0.000 decorators.py:97(Substitution)
        1    0.000    0.000    0.000    0.000 defchararray.py:1668(chararray)
        1    0.000    0.000    0.000    0.000 defchararray.py:17(<module>)
        1    0.000    0.000    0.000    0.000 defmatrix.py:1(<module>)
        1    0.000    0.000    0.000    0.000 defmatrix.py:206(matrix)
        1    0.000    0.000    0.000    0.000 denton.py:2(<module>)
        1    0.000    0.000    0.000    0.000 deprecated.py:12(DeprecatedTest)
        1    0.000    0.000    0.000    0.000 deprecated.py:18(Deprecated)
        1    0.000    0.000    0.000    0.000 deprecated.py:7(<module>)
        1    0.000    0.000    0.000    0.000 desc.py:194(IntermediateExpr)
        1    0.000    0.000    0.000    0.000 desc.py:28(Term)
        1    0.000    0.000    0.000    0.000 desc.py:361(Evaluator)
        1    0.000    0.000    0.000    0.000 desc.py:43(__init__)
        1    0.000    0.000    0.000    0.000 desc.py:72(_MockFactor)
        1    0.000    0.000    0.000    0.000 desc.py:91(ModelDesc)
        1    0.000    0.000    0.000    0.000 descriptive.py:467(DescStatUV)
        1    0.000    0.000    0.000    0.000 descriptive.py:49(_OptFuncts)
        1    0.000    0.000    0.000    0.000 descriptive.py:934(DescStatMV)
        1    0.000    0.000    0.000    0.000 descriptivestats.py:1(<module>)
        1    0.000    0.000    0.000    0.000 descriptivestats.py:76(Describe)
        1    0.000    0.000    0.000    0.000 design_info.py:161(SubtermInfo)
        1    0.000    0.000    0.000    0.000 design_info.py:249(DesignInfo)
        1    0.000    0.000    0.000    0.000 design_info.py:40(FactorInfo)
        1    0.000    0.000    0.000    0.000 design_info.py:980(DesignMatrix)
        1    0.000    0.000    0.000    0.000 dia.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dia.py:17(dia_matrix)
        1    0.000    0.000    0.000    0.000 diagnostic.py:1403(StatTestMC)
        1    0.000    0.000    0.000    0.000 diagnostic.py:146(CompareJ)
        1    0.000    0.000    0.000    0.000 diagnostic.py:31(<module>)
        1    0.000    0.000    0.000    0.000 diagnostic.py:49(ResultsStore)
        1    0.000    0.000    0.000    0.000 diagnostic.py:55(CompareCox)
        1    0.000    0.000    0.000    0.000 diagnostic.py:752(HetGoldfeldQuandt)
        1    0.000    0.000    0.000    0.000 difflib.py:1672(HtmlDiff)
        1    0.000    0.000    0.000    0.000 difflib.py:46(SequenceMatcher)
        1    0.000    0.000    0.000    0.000 difflib.py:766(Differ)
        1    0.000    0.000    0.000    0.000 discrete_margins.py:3(<module>)
        1    0.000    0.000    0.000    0.000 discrete_margins.py:361(Margins)
        1    0.000    0.000    0.000    0.000 discrete_margins.py:408(DiscreteMargins)
        1    0.000    0.000    0.000    0.000 discrete_model.py:1177(Logit)
        1    0.000    0.000    0.000    0.000 discrete_model.py:1382(Probit)
        1    0.000    0.000    0.000    0.000 discrete_model.py:145(DiscreteModel)
        1    0.000    0.000    0.000    0.000 discrete_model.py:1604(MNLogit)
        1    0.000    0.000    0.000    0.000 discrete_model.py:1918(NegativeBinomial)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2340(DiscreteResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2609(CountResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2629(NegativeBinomialResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2655(L1CountResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2678(PoissonResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2708(L1PoissonResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2711(L1NegativeBinomialResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2714(OrderedResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2718(BinaryResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2846(LogitResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2867(ProbitResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2890(L1BinaryResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:2906(MultinomialResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3038(L1MultinomialResults)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3058(OrderedResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3062(CountResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3066(NegativeBinomialResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3071(PoissonResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3081(L1CountResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3084(L1PoissonResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3094(L1NegativeBinomialResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3099(BinaryResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3109(L1BinaryResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3113(MultinomialResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:3119(L1MultinomialResultsWrapper)
        1    0.000    0.000    0.000    0.000 discrete_model.py:398(BinaryModel)
        1    0.000    0.000    0.000    0.000 discrete_model.py:502(MultinomialModel)
        1    0.000    0.000    0.000    0.000 discrete_model.py:707(CountModel)
        1    0.000    0.000    0.000    0.000 discrete_model.py:845(OrderedModel)
        1    0.000    0.000    0.000    0.000 discrete_model.py:850(Poisson)
        1    0.000    0.000    0.000    0.000 distance.py:101(Distance)
        1    0.000    0.000    0.000    0.000 distance.py:212(great_circle)
        1    0.000    0.000    0.000    0.000 distance.py:285(vincenty)
        1    0.000    0.000    0.000    0.000 distance.py:71(<module>)
        1    0.000    0.000    0.000    0.000 dltisys.py:3(<module>)
        1    0.000    0.000    0.000    0.000 doccer.py:153(filldoc)
        1    0.000    0.000    0.000    0.000 doccer.py:179(unindent_dict)
        1    0.000    0.000    0.000    0.000 doccer.py:2(<module>)
        1    0.000    0.000    0.000    0.000 docstring.py:1(<module>)
        1    0.000    0.000    0.000    0.000 docstring.py:11(Substitution)
        1    0.000    0.000    0.000    0.000 docstring.py:65(Appender)
        1    0.000    0.000    0.000    0.000 dok.py:1(<module>)
        1    0.000    0.000    0.000    0.000 dok.py:29(dok_matrix)
        1    0.000    0.000    0.000    0.000 dot_us.py:21(GeocoderDotUS)
        1    0.000    0.000    0.000    0.000 dot_us.py:3(<module>)
        1    0.000    0.000    0.000    0.000 dual.py:12(<module>)
        1    0.000    0.000    0.000    0.000 dviread.py:20(<module>)
        1    0.000    0.000    0.000    0.000 dviread.py:420(DviFont)
        1    0.000    0.000    0.000    0.000 dviread.py:43(Dvi)
        1    0.000    0.000    0.000    0.000 dviread.py:501(Vf)
        1    0.000    0.000    0.000    0.000 dviread.py:607(Tfm)
        1    0.000    0.000    0.000    0.000 dviread.py:663(PsfontsMap)
        1    0.000    0.000    0.000    0.000 dviread.py:794(Encoding)
        1    0.000    0.000    0.000    0.000 dynamic.py:265(DynamicPanelVAR)
        1    0.000    0.000    0.000    0.000 dynamic.py:3(<module>)
        1    0.000    0.000    0.000    0.000 dynamic.py:33(DynamicVAR)
        1    0.000    0.000    0.000    0.000 dynamic.py:345(Equation)
        1    0.000    0.000    0.000    0.000 easter.py:5(<module>)
        1    0.000    0.000    0.000    0.000 edgeworth.py:1(<module>)
        1    0.000    0.000    0.000    0.000 edgeworth.py:104(ExpandedNormal)
        1    0.000    0.000    0.000    0.000 elanova.py:11(<module>)
        1    0.000    0.000    0.000    0.000 elanova.py:20(_ANOVAOpt)
        1    0.000    0.000    0.000    0.000 elanova.py:61(ANOVA)
        1    0.000    0.000    0.000    0.000 elregress.py:20(_ELRegOpts)
        1    0.000    0.000    0.000    0.000 empirical_distribution.py:108(ECDF)
        1    0.000    0.000    0.000    0.000 empirical_distribution.py:34(StepFunction)
        1    0.000    0.000    0.000    0.000 encoder.py:101(__init__)
        1    0.000    0.000    0.000    0.000 encoder.py:70(JSONEncoder)
        1    0.000    0.000    0.000    0.000 encoders.py:5(<module>)
        1    0.000    0.000    0.000    0.000 engines.py:129(PythonEngine)
        1    0.000    0.000    0.000    0.000 engines.py:16(NumExprClobberingError)
        1    0.000    0.000    0.000    0.000 engines.py:37(AbstractEngine)
        1    0.000    0.000    0.000    0.000 engines.py:97(NumExprEngine)
        1    0.000    0.000    0.000    0.000 errorclass.py:100(MetaErrorClass)
        1    0.000    0.000    0.000    0.000 errorclass.py:116(ErrorClass)
        1    0.000    0.000    0.000    0.000 errorclass.py:130(ErrorClassPlugin)
        1    0.000    0.000    0.000    0.000 errorclass.py:93(<module>)
        1    0.000    0.000    0.000    0.000 errors.py:13(DistutilsError)
        1    0.000    0.000    0.000    0.000 errors.py:13(MessageParseError)
        1    0.000    0.000    0.000    0.000 errors.py:16(DistutilsModuleError)
        1    0.000    0.000    0.000    0.000 errors.py:17(HeaderParseError)
        1    0.000    0.000    0.000    0.000 errors.py:20(DistutilsClassError)
        1    0.000    0.000    0.000    0.000 errors.py:21(BoundaryError)
        1    0.000    0.000    0.000    0.000 errors.py:25(MultipartConversionError)
        1    0.000    0.000    0.000    0.000 errors.py:26(DistutilsGetoptError)
        1    0.000    0.000    0.000    0.000 errors.py:29(CharsetError)
        1    0.000    0.000    0.000    0.000 errors.py:29(DistutilsArgError)
        1    0.000    0.000    0.000    0.000 errors.py:33(DistutilsFileError)
        1    0.000    0.000    0.000    0.000 errors.py:35(MessageDefect)
        1    0.000    0.000    0.000    0.000 errors.py:38(DistutilsOptionError)
        1    0.000    0.000    0.000    0.000 errors.py:41(NoBoundaryInMultipartDefect)
        1    0.000    0.000    0.000    0.000 errors.py:44(StartBoundaryNotFoundDefect)
        1    0.000    0.000    0.000    0.000 errors.py:46(DistutilsSetupError)
        1    0.000    0.000    0.000    0.000 errors.py:47(FirstHeaderLineIsContinuationDefect)
        1    0.000    0.000    0.000    0.000 errors.py:5(<module>)
        1    0.000    0.000    0.000    0.000 errors.py:50(DistutilsPlatformError)
        1    0.000    0.000    0.000    0.000 errors.py:50(MisplacedEnvelopeHeaderDefect)
        1    0.000    0.000    0.000    0.000 errors.py:53(MalformedHeaderDefect)
        1    0.000    0.000    0.000    0.000 errors.py:55(DistutilsExecError)
        1    0.000    0.000    0.000    0.000 errors.py:56(MultipartInvariantViolationDefect)
        1    0.000    0.000    0.000    0.000 errors.py:59(DistutilsInternalError)
        1    0.000    0.000    0.000    0.000 errors.py:63(DistutilsTemplateError)
        1    0.000    0.000    0.000    0.000 errors.py:66(DistutilsByteCompileError)
        1    0.000    0.000    0.000    0.000 errors.py:70(CCompilerError)
        1    0.000    0.000    0.000    0.000 errors.py:73(PreprocessError)
        1    0.000    0.000    0.000    0.000 errors.py:76(CompileError)
        1    0.000    0.000    0.000    0.000 errors.py:79(LibError)
        1    0.000    0.000    0.000    0.000 errors.py:83(LinkError)
        1    0.000    0.000    0.000    0.000 errors.py:87(UnknownFileError)
        1    0.000    0.000    0.000    0.000 errors.py:9(<module>)
        1    0.000    0.000    0.000    0.000 errors.py:9(MessageError)
        1    0.000    0.000    0.000    0.000 eval.py:131(EvalEnvironment)
        1    0.000    0.000    0.000    0.000 eval.py:28(_all_future_flags)
        1    0.000    0.000    0.000    0.000 eval.py:41(VarLookupDict)
        1    0.000    0.000    0.000    0.000 eval.py:424(EvalFactor)
        1    0.000    0.000    0.000    0.000 eval.py:624(_MockTransform)
        1    0.000    0.000    0.000    0.000 eval.py:754(_FuncallCapturer)
        1    0.000    0.000    0.000    0.000 exc.py:10(ConfigurationError)
        1    0.000    0.000    0.000    0.000 exc.py:16(GeocoderServiceError)
        1    0.000    0.000    0.000    0.000 exc.py:26(GeocoderQueryError)
        1    0.000    0.000    0.000    0.000 exc.py:3(<module>)
        1    0.000    0.000    0.000    0.000 exc.py:33(GeocoderQuotaExceeded)
        1    0.000    0.000    0.000    0.000 exc.py:39(GeocoderAuthenticationFailure)
        1    0.000    0.000    0.000    0.000 exc.py:45(GeocoderInsufficientPrivileges)
        1    0.000    0.000    0.000    0.000 exc.py:5(GeopyError)
        1    0.000    0.000    0.000    0.000 exc.py:51(GeocoderTimedOut)
        1    0.000    0.000    0.000    0.000 exc.py:59(GeocoderUnavailable)
        1    0.000    0.000    0.000    0.000 exc.py:66(GeocoderParseError)
        1    0.000    0.000    0.000    0.000 exc.py:71(GeocoderNotFound)
        1    0.000    0.000    0.000    0.000 excel.py:1155(_XlwtWriter)
        1    0.000    0.000    0.000    0.000 excel.py:1278(_XlsxWriter)
        1    0.000    0.000    0.000    0.000 excel.py:154(ExcelFile)
        1    0.000    0.000    0.000    0.000 excel.py:481(ExcelWriter)
        1    0.000    0.000    0.000    0.000 excel.py:626(_Openpyxl1Writer)
        1    0.000    0.000    0.000    0.000 excel.py:734(_OpenpyxlWriter)
        1    0.000    0.000    0.000    0.000 excel.py:740(_Openpyxl2Writer)
        1    0.000    0.000    0.000    0.000 exceptions.py:11(UnknownTimeZoneError)
        1    0.000    0.000    0.000    0.000 exceptions.py:27(InvalidTimeError)
        1    0.000    0.000    0.000    0.000 exceptions.py:3(<module>)
        1    0.000    0.000    0.000    0.000 exceptions.py:31(AmbiguousTimeError)
        1    0.000    0.000    0.000    0.000 exceptions.py:42(NonExistentTimeError)
        1    0.000    0.000    0.000    0.000 expr.py:251(add_ops)
        1    0.000    0.000    0.000    0.000 expr.py:253(f)
        1    0.000    0.000    0.000    0.000 expr.py:266(BaseExprVisitor)
        1    0.000    0.000    0.000    0.000 expr.py:594(PandasExprVisitor)
        1    0.000    0.000    0.000    0.000 expr.py:605(PythonExprVisitor)
        1    0.000    0.000    0.000    0.000 expr.py:613(Expr)
        1    0.000    0.000    0.000    0.000 expressions.py:42(set_use_numexpr)
        1    0.000    0.000    0.000    0.000 extract.py:2(<module>)
        1    0.000    0.000    0.000    0.000 extras.py:1464(MAxisConcatenator)
        1    0.000    0.000    0.000    0.000 extras.py:1476(__init__)
        1    0.000    0.000    0.000    0.000 extras.py:1530(mr_class)
        1    0.000    0.000    0.000    0.000 extras.py:1546(__init__)
        1    0.000    0.000    0.000    0.000 extras.py:224(_fromnxfunction)
        1    0.000    0.000    0.000    0.000 failure.py:1(<module>)
        1    0.000    0.000    0.000    0.000 failure.py:12(Failure)
        1    0.000    0.000    0.000    0.000 fama_macbeth.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fama_macbeth.py:142(MovingFamaMacBeth)
        1    0.000    0.000    0.000    0.000 fama_macbeth.py:30(FamaMacBeth)
        1    0.000    0.000    0.000    0.000 family.py:1099(NegativeBinomial)
        1    0.000    0.000    0.000    0.000 family.py:16(Family)
        1    0.000    0.000    0.000    0.000 family.py:250(Poisson)
        1    0.000    0.000    0.000    0.000 family.py:403(Gaussian)
        1    0.000    0.000    0.000    0.000 family.py:550(Gamma)
        1    0.000    0.000    0.000    0.000 family.py:704(Binomial)
        1    0.000    0.000    0.000    0.000 family.py:962(InverseGaussian)
        1    0.000    0.000    0.000    0.000 feedparser.py:137(FeedParser)
        1    0.000    0.000    0.000    0.000 feedparser.py:43(BufferedSubFile)
        1    0.000    0.000    0.000    0.000 fftpack_version.py:1(<module>)
        1    0.000    0.000    0.000    0.000 figure.py:154(SubplotParams)
        1    0.000    0.000    0.000    0.000 figure.py:237(Figure)
        1    0.000    0.000    0.000    0.000 figure.py:54(AxesStack)
        1    0.000    0.000    0.000    0.000 filter_design.py:2(<module>)
        1    0.000    0.000    0.000    0.000 filter_design.py:24(BadCoefficients)
        1    0.000    0.000    0.000    0.000 filtertools.py:11(<module>)
        1    0.000    0.000    0.000    0.000 financial.py:10(<module>)
        1    0.000    0.000    0.000    0.000 fir_filter_design.py:1(<module>)
        1    0.000    0.000    0.000    0.000 fitpack2.py:1010(RectBivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:1096(SphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:1178(SmoothSphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:1269(LSQSphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:1402(RectSphereBivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:440(InterpolatedUnivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:531(LSQUnivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:642(_BivariateSplineBase)
        1    0.000    0.000    0.000    0.000 fitpack2.py:7(<module>)
        1    0.000    0.000    0.000    0.000 fitpack2.py:71(UnivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:796(BivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:876(SmoothBivariateSpline)
        1    0.000    0.000    0.000    0.000 fitpack2.py:938(LSQBivariateSpline)
        1    0.000    0.000    0.000    0.000 fnmatch.py:11(<module>)
        1    0.000    0.000    0.000    0.000 font_manager.py:1002(FontManager)
        1    0.000    0.000    0.000    0.000 font_manager.py:353(FontEntry)
        1    0.000    0.000    0.000    0.000 font_manager.py:596(FontProperties)
        1    0.000    0.000    0.000    0.000 font_manager.py:965(TempCache)
        1    0.000    0.000    0.000    0.000 fontconfig_pattern.py:39(FontconfigPatternParser)
        1    0.000    0.000    0.000    0.000 foreign.py:154(_StataMissingValue)
        1    0.000    0.000    0.000    0.000 foreign.py:187(_StataVariable)
        1    0.000    0.000    0.000    0.000 foreign.py:236(StataReader)
        1    0.000    0.000    0.000    0.000 foreign.py:24(is_py3)
        1    0.000    0.000    0.000    0.000 foreign.py:671(StataWriter)
        1    0.000    0.000    0.000    0.000 format.py:118(<dictcomp>)
        1    0.000    0.000    0.000    0.000 format.py:1202(CSVFormatter)
        1    0.000    0.000    0.000    0.000 format.py:123(<dictcomp>)
        1    0.000    0.000    0.000    0.000 format.py:129(SeriesFormatter)
        1    0.000    0.000    0.000    0.000 format.py:136(<module>)
        1    0.000    0.000    0.000    0.000 format.py:1576(ExcelCell)
        1    0.000    0.000    0.000    0.000 format.py:1598(ExcelFormatter)
        1    0.000    0.000    0.000    0.000 format.py:1908(GenericArrayFormatter)
        1    0.000    0.000    0.000    0.000 format.py:1964(FloatArrayFormatter)
        1    0.000    0.000    0.000    0.000 format.py:2026(IntArrayFormatter)
        1    0.000    0.000    0.000    0.000 format.py:2036(Datetime64Formatter)
        1    0.000    0.000    0.000    0.000 format.py:2120(Timedelta64Formatter)
        1    0.000    0.000    0.000    0.000 format.py:2257(detect_console_encoding)
        1    0.000    0.000    0.000    0.000 format.py:2328(EngFormatter)
        1    0.000    0.000    0.000    0.000 format.py:271(TableFormatter)
        1    0.000    0.000    0.000    0.000 format.py:292(DataFrameFormatter)
        1    0.000    0.000    0.000    0.000 format.py:3(<module>)
        1    0.000    0.000    0.000    0.000 format.py:67(CategoricalFormatter)
        1    0.000    0.000    0.000    0.000 format.py:807(HTMLFormatter)
        1    0.000    0.000    0.000    0.000 formulatools.py:13(NAAction)
        1    0.000    0.000    0.000    0.000 fourier.py:31(<module>)
        1    0.000    0.000    0.000    0.000 fractions.py:44(Fraction)
        1    0.000    0.000    0.000    0.000 frame.py:148(DataFrame)
        1    0.000    0.000    0.000    0.000 frame.py:30(SparseDataFrame)
        1    0.000    0.000    0.000    0.000 frequencies.py:18(FreqGroup)
        1    0.000    0.000    0.000    0.000 frequencies.py:33(Resolution)
        1    0.000    0.000    0.000    0.000 frequencies.py:536(_period_alias_dictionary)
        1    0.000    0.000    0.000    0.000 frequencies.py:721(_FrequencyInferer)
        1    0.000    0.000    0.000    0.000 frequencies.py:949(_TimedeltaFrequencyInferer)
        1    0.000    0.000    0.000    0.000 function_base.py:1529(vectorize)
        1    0.000    0.000    0.000    0.000 function_base.py:47(iterable)
        1    0.000    0.000    0.000    0.000 functional.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gbq.py:36(InvalidPageToken)
        1    0.000    0.000    0.000    0.000 gbq.py:43(InvalidQueryException)
        1    0.000    0.000    0.000    0.000 gbq.py:49(AccessDeniedException)
        1    0.000    0.000    0.000    0.000 gbq.py:55(NotFoundException)
        1    0.000    0.000    0.000    0.000 gbq.py:61(TermsOfServiceNotAcceptedException)
        1    0.000    0.000    0.000    0.000 gbq.py:67(UnknownGBQException)
        1    0.000    0.000    0.000    0.000 gbq.py:74(InvalidColumnOrder)
        1    0.000    0.000    0.000    0.000 gbq.py:82(GbqConnector)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:1234(GEEResults)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:1635(GEEResultsWrapper)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:1644(OrdinalGEE)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:1767(OrdinalGEEResults)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:1861(OrdinalGEEResultsWrapper)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:1866(NominalGEE)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:1991(NominalGEEResults)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:2078(NominalGEEResultsWrapper)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:2083(_MultinomialLogit)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:2219(_Multinomial)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:2253(GEEMargins)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:437(GEE)
        1    0.000    0.000    0.000    0.000 generalized_estimating_equations.py:67(ParameterConstraint)
        1    0.000    0.000    0.000    0.000 generalized_linear_model.py:1132(GLMResultsWrapper)
        1    0.000    0.000    0.000    0.000 generalized_linear_model.py:39(GLM)
        1    0.000    0.000    0.000    0.000 generalized_linear_model.py:796(GLMResults)
        1    0.000    0.000    0.000    0.000 generic.py:69(NDFrame)
        1    0.000    0.000    0.000    0.000 generic.py:90(__init__)
        1    0.000    0.000    0.000    0.000 geo.py:1(<module>)
        1    0.000    0.000    0.000    0.000 geo.py:23(GeoAxes)
        1    0.000    0.000    0.000    0.000 geo.py:251(AitoffAxes)
        1    0.000    0.000    0.000    0.000 geo.py:254(AitoffTransform)
        1    0.000    0.000    0.000    0.000 geo.py:27(ThetaFormatter)
        1    0.000    0.000    0.000    0.000 geo.py:302(InvertedAitoffTransform)
        1    0.000    0.000    0.000    0.000 geo.py:330(HammerAxes)
        1    0.000    0.000    0.000    0.000 geo.py:333(HammerTransform)
        1    0.000    0.000    0.000    0.000 geo.py:375(InvertedHammerTransform)
        1    0.000    0.000    0.000    0.000 geo.py:410(MollweideAxes)
        1    0.000    0.000    0.000    0.000 geo.py:413(MollweideTransform)
        1    0.000    0.000    0.000    0.000 geo.py:474(InvertedMollweideTransform)
        1    0.000    0.000    0.000    0.000 geo.py:510(LambertAxes)
        1    0.000    0.000    0.000    0.000 geo.py:513(LambertTransform)
        1    0.000    0.000    0.000    0.000 geo.py:568(InvertedLambertTransform)
        1    0.000    0.000    0.000    0.000 geocodefarm.py:17(GeocodeFarm)
        1    0.000    0.000    0.000    0.000 geocodefarm.py:3(<module>)
        1    0.000    0.000    0.000    0.000 geonames.py:20(GeoNames)
        1    0.000    0.000    0.000    0.000 geonames.py:3(<module>)
        1    0.000    0.000    0.000    0.000 getlimits.py:194(iinfo)
        1    0.000    0.000    0.000    0.000 getlimits.py:24(finfo)
        1    0.000    0.000    0.000    0.000 getlimits.py:3(<module>)
        1    0.000    0.000    0.000    0.000 glob.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gof.py:19(<module>)
        1    0.000    0.000    0.000    0.000 gofplots.py:1(<module>)
        1    0.000    0.000    0.000    0.000 gofplots.py:14(ProbPlot)
        1    0.000    0.000    0.000    0.000 googlev3.py:33(GoogleV3)
        1    0.000    0.000    0.000    0.000 grid.py:3(<module>)
        1    0.000    0.000    0.000    0.000 gridspec.py:15(<module>)
        1    0.000    0.000    0.000    0.000 gridspec.py:187(GridSpec)
        1    0.000    0.000    0.000    0.000 gridspec.py:31(GridSpecBase)
        1    0.000    0.000    0.000    0.000 gridspec.py:318(GridSpecFromSubplotSpec)
        1    0.000    0.000    0.000    0.000 gridspec.py:382(SubplotSpec)
        1    0.000    0.000    0.000    0.000 groupby.py:1216(BaseGrouper)
        1    0.000    0.000    0.000    0.000 groupby.py:154(Grouper)
        1    0.000    0.000    0.000    0.000 groupby.py:1675(BinGrouper)
        1    0.000    0.000    0.000    0.000 groupby.py:1842(Grouping)
        1    0.000    0.000    0.000    0.000 groupby.py:2534(NDFrameGroupBy)
        1    0.000    0.000    0.000    0.000 groupby.py:292(GroupBy)
        1    0.000    0.000    0.000    0.000 groupby.py:3302(PanelGroupBy)
        1    0.000    0.000    0.000    0.000 groupby.py:3384(NDArrayGroupBy)
        1    0.000    0.000    0.000    0.000 groupby.py:3392(DataSplitter)
        1    0.000    0.000    0.000    0.000 groupby.py:3438(ArraySplitter)
        1    0.000    0.000    0.000    0.000 groupby.py:3442(SeriesSplitter)
        1    0.000    0.000    0.000    0.000 groupby.py:3448(FrameSplitter)
        1    0.000    0.000    0.000    0.000 groupby.py:3473(NDFrameSplitter)
        1    0.000    0.000    0.000    0.000 groupby.py:3722(_KeyMapper)
        1    0.000    0.000    0.000    0.000 groupby.py:91(GroupByError)
        1    0.000    0.000    0.000    0.000 groupby.py:95(DataError)
        1    0.000    0.000    0.000    0.000 groupby.py:99(SpecificationError)
        1    0.000    0.000    0.000    0.000 grouputils.py:184(Group)
        1    0.000    0.000    0.000    0.000 grouputils.py:256(GroupSorted)
        1    0.000    0.000    0.000    0.000 grouputils.py:315(Grouping)
        1    0.000    0.000    0.000    0.000 grouputils.py:32(<module>)
        1    0.000    0.000    0.000    0.000 gzip.py:36(GzipFile)
        1    0.000    0.000    0.000    0.000 hazard_regression.py:1(<module>)
        1    0.000    0.000    0.000    0.000 hazard_regression.py:1419(PHRegResults)
        1    0.000    0.000    0.000    0.000 hazard_regression.py:1730(rv_discrete_float)
        1    0.000    0.000    0.000    0.000 hazard_regression.py:209(PHReg)
        1    0.000    0.000    0.000    0.000 hazard_regression.py:25(PHSurvivalTime)
        1    0.000    0.000    0.000    0.000 helper.py:1(<module>)
        1    0.000    0.000    0.000    0.000 helper.py:4(<module>)
        1    0.000    0.000    0.000    0.000 hermite.py:1750(Hermite)
        1    0.000    0.000    0.000    0.000 hermite.py:59(<module>)
        1    0.000    0.000    0.000    0.000 hermite_e.py:1747(HermiteE)
        1    0.000    0.000    0.000    0.000 hermite_e.py:59(<module>)
        1    0.000    0.000    0.000    0.000 hex_codec.py:27(hex_decode)
        1    0.000    0.000    0.000    0.000 hex_codec.py:45(Codec)
        1    0.000    0.000    0.000    0.000 hex_codec.py:52(IncrementalEncoder)
        1    0.000    0.000    0.000    0.000 hex_codec.py:57(IncrementalDecoder)
        1    0.000    0.000    0.000    0.000 hex_codec.py:62(StreamWriter)
        1    0.000    0.000    0.000    0.000 hex_codec.py:65(StreamReader)
        1    0.000    0.000    0.000    0.000 hex_codec.py:70(getregentry)
        1    0.000    0.000    0.000    0.000 hex_codec.py:8(<module>)
        1    0.000    0.000    0.000    0.000 hmac.py:20(HMAC)
        1    0.000    0.000    0.000    0.000 hmac.py:4(<module>)
        1    0.000    0.000    0.000    0.000 hp_filter.py:1(<module>)
        1    0.000    0.000    0.000    0.000 html.py:145(_HtmlFrameParser)
        1    0.000    0.000    0.000    0.000 html.py:375(_BeautifulSoupHtml5LibFrameParser)
        1    0.000    0.000    0.000    0.000 html.py:4(<module>)
        1    0.000    0.000    0.000    0.000 html.py:474(_LxmlFrameParser)
        1    0.000    0.000    0.000    0.000 httplib.py:1059(HTTP)
        1    0.000    0.000    0.000    0.000 httplib.py:1155(HTTPSConnection)
        1    0.000    0.000    0.000    0.000 httplib.py:1180(HTTPS)
        1    0.000    0.000    0.000    0.000 httplib.py:1213(HTTPException)
        1    0.000    0.000    0.000    0.000 httplib.py:1218(NotConnected)
        1    0.000    0.000    0.000    0.000 httplib.py:1221(InvalidURL)
        1    0.000    0.000    0.000    0.000 httplib.py:1224(UnknownProtocol)
        1    0.000    0.000    0.000    0.000 httplib.py:1229(UnknownTransferEncoding)
        1    0.000    0.000    0.000    0.000 httplib.py:1232(UnimplementedFileMode)
        1    0.000    0.000    0.000    0.000 httplib.py:1235(IncompleteRead)
        1    0.000    0.000    0.000    0.000 httplib.py:1249(ImproperConnectionState)
        1    0.000    0.000    0.000    0.000 httplib.py:1252(CannotSendRequest)
        1    0.000    0.000    0.000    0.000 httplib.py:1255(CannotSendHeader)
        1    0.000    0.000    0.000    0.000 httplib.py:1258(ResponseNotReady)
        1    0.000    0.000    0.000    0.000 httplib.py:1261(BadStatusLine)
        1    0.000    0.000    0.000    0.000 httplib.py:1268(LineTooLong)
        1    0.000    0.000    0.000    0.000 httplib.py:1276(LineAndFileWrapper)
        1    0.000    0.000    0.000    0.000 httplib.py:218(HTTPMessage)
        1    0.000    0.000    0.000    0.000 httplib.py:325(HTTPResponse)
        1    0.000    0.000    0.000    0.000 httplib.py:680(HTTPConnection)
        1    0.000    0.000    0.000    0.000 ignfrance.py:21(IGNFrance)
        1    0.000    0.000    0.000    0.000 image.py:1054(BboxImage)
        1    0.000    0.000    0.000    0.000 image.py:35(_AxesImageBase)
        1    0.000    0.000    0.000    0.000 image.py:5(<module>)
        1    0.000    0.000    0.000    0.000 image.py:535(AxesImage)
        1    0.000    0.000    0.000    0.000 image.py:687(NonUniformImage)
        1    0.000    0.000    0.000    0.000 image.py:812(PcolorImage)
        1    0.000    0.000    0.000    0.000 image.py:939(FigureImage)
        1    0.000    0.000    0.000    0.000 importer.py:24(Importer)
        1    0.000    0.000    0.000    0.000 importer.py:6(<module>)
        1    0.000    0.000    0.000    0.000 index.py:205(_simple_new)
        1    0.000    0.000    0.000    0.000 index.py:238(_reset_identity)
        1    0.000    0.000    0.000    0.000 index.py:2596(_add_comparison_methods)
        1    0.000    0.000    0.000    0.000 index.py:2624(_add_numericlike_set_methods_disabled)
        1    0.000    0.000    0.000    0.000 index.py:2791(CategoricalIndex)
        1    0.000    0.000    0.000    0.000 index.py:313(_coerce_to_ndarray)
        1    0.000    0.000    0.000    0.000 index.py:3247(_add_comparison_methods)
        1    0.000    0.000    0.000    0.000 index.py:3314(NumericIndex)
        1    0.000    0.000    0.000    0.000 index.py:3352(Int64Index)
        1    0.000    0.000    0.000    0.000 index.py:3385(__new__)
        1    0.000    0.000    0.000    0.000 index.py:3427(is_all_dates)
        1    0.000    0.000    0.000    0.000 index.py:3459(Float64Index)
        1    0.000    0.000    0.000    0.000 index.py:3658(MultiIndex)
        1    0.000    0.000    0.000    0.000 index.py:51(InvalidIndexError)
        1    0.000    0.000    0.000    0.000 index.py:62(Index)
        1    0.000    0.000    0.000    0.000 index_tricks.py:223(AxisConcatenator)
        1    0.000    0.000    0.000    0.000 index_tricks.py:352(RClass)
        1    0.000    0.000    0.000    0.000 index_tricks.py:447(__init__)
        1    0.000    0.000    0.000    0.000 index_tricks.py:452(CClass)
        1    0.000    0.000    0.000    0.000 index_tricks.py:470(__init__)
        1    0.000    0.000    0.000    0.000 index_tricks.py:475(ndenumerate)
        1    0.000    0.000    0.000    0.000 index_tricks.py:525(ndindex)
        1    0.000    0.000    0.000    0.000 index_tricks.py:603(IndexExpression)
        1    0.000    0.000    0.000    0.000 index_tricks.py:87(nd_grid)
        1    0.000    0.000    0.000    0.000 indexing.py:1134(_IXIndexer)
        1    0.000    0.000    0.000    0.000 indexing.py:1173(_LocationIndexer)
        1    0.000    0.000    0.000    0.000 indexing.py:1210(_LocIndexer)
        1    0.000    0.000    0.000    0.000 indexing.py:1328(_iLocIndexer)
        1    0.000    0.000    0.000    0.000 indexing.py:1490(_ScalarAccessIndexer)
        1    0.000    0.000    0.000    0.000 indexing.py:1520(_AtIndexer)
        1    0.000    0.000    0.000    0.000 indexing.py:1549(_iAtIndexer)
        1    0.000    0.000    0.000    0.000 indexing.py:18(get_indexers_list)
        1    0.000    0.000    0.000    0.000 indexing.py:3(<module>)
        1    0.000    0.000    0.000    0.000 indexing.py:32(_IndexSlice)
        1    0.000    0.000    0.000    0.000 indexing.py:37(IndexingError)
        1    0.000    0.000    0.000    0.000 indexing.py:40(_NDFrameIndexer)
        1    0.000    0.000    0.000    0.000 infix_parser.py:100(_StackOperator)
        1    0.000    0.000    0.000    0.000 infix_parser.py:109(_ParseContext)
        1    0.000    0.000    0.000    0.000 infix_parser.py:31(<module>)
        1    0.000    0.000    0.000    0.000 infix_parser.py:40(_UniqueValue)
        1    0.000    0.000    0.000    0.000 infix_parser.py:49(Token)
        1    0.000    0.000    0.000    0.000 infix_parser.py:75(ParseNode)
        1    0.000    0.000    0.000    0.000 infix_parser.py:88(Operator)
        1    0.000    0.000    0.000    0.000 info.py:147(<module>)
        1    0.000    0.000    0.000    0.000 info.py:176(<module>)
        1    0.000    0.000    0.000    0.000 info.py:34(<module>)
        1    0.000    0.000    0.000    0.000 info.py:83(<module>)
        1    0.000    0.000    0.000    0.000 info.py:84(<module>)
        1    0.000    0.000    0.000    0.000 inspect.py:247(getmembers)
        1    0.000    0.000    0.000    0.000 inspect.py:630(EndOfBlock)
        1    0.000    0.000    0.000    0.000 inspect.py:632(BlockFinder)
        1    0.000    0.000    0.000    0.000 inspect.py:847(<lambda>)
        1    0.000    0.000    0.000    0.000 interface.py:10(LinearOperator)
        1    0.000    0.000    0.000    0.000 interface.py:254(_SumLinearOperator)
        1    0.000    0.000    0.000    0.000 interface.py:275(_ProductLinearOperator)
        1    0.000    0.000    0.000    0.000 interface.py:296(_ScaledLinearOperator)
        1    0.000    0.000    0.000    0.000 interface.py:317(_PowerLinearOperator)
        1    0.000    0.000    0.000    0.000 interface.py:346(MatrixLinearOperator)
        1    0.000    0.000    0.000    0.000 interface.py:363(IdentityOperator)
        1    0.000    0.000    0.000    0.000 internals.py:1124(NonConsolidatableMixIn)
        1    0.000    0.000    0.000    0.000 internals.py:119(mgr_locs)
        1    0.000    0.000    0.000    0.000 internals.py:1193(NumericBlock)
        1    0.000    0.000    0.000    0.000 internals.py:1199(FloatOrComplexBlock)
        1    0.000    0.000    0.000    0.000 internals.py:1208(FloatBlock)
        1    0.000    0.000    0.000    0.000 internals.py:1265(ComplexBlock)
        1    0.000    0.000    0.000    0.000 internals.py:1286(IntBlock)
        1    0.000    0.000    0.000    0.000 internals.py:1308(TimeDeltaBlock)
        1    0.000    0.000    0.000    0.000 internals.py:1407(BoolBlock)
        1    0.000    0.000    0.000    0.000 internals.py:141(mgr_locs)
        1    0.000    0.000    0.000    0.000 internals.py:1437(ObjectBlock)
        1    0.000    0.000    0.000    0.000 internals.py:1651(CategoricalBlock)
        1    0.000    0.000    0.000    0.000 internals.py:1787(DatetimeBlock)
        1    0.000    0.000    0.000    0.000 internals.py:1916(SparseBlock)
        1    0.000    0.000    0.000    0.000 internals.py:2073(make_block)
        1    0.000    0.000    0.000    0.000 internals.py:2107(BlockManager)
        1    0.000    0.000    0.000    0.000 internals.py:3335(SingleBlockManager)
        1    0.000    0.000    0.000    0.000 internals.py:3343(__init__)
        1    0.000    0.000    0.000    0.000 internals.py:37(Block)
        1    0.000    0.000    0.000    0.000 internals.py:4333(JoinUnit)
        1    0.000    0.000    0.000    0.000 internals.py:64(__init__)
        1    0.000    0.000    0.000    0.000 interpolate.py:1012(BPoly)
        1    0.000    0.000    0.000    0.000 interpolate.py:1425(RegularGridInterpolator)
        1    0.000    0.000    0.000    0.000 interpolate.py:1759(ppform)
        1    0.000    0.000    0.000    0.000 interpolate.py:309(interp1d)
        1    0.000    0.000    0.000    0.000 interpolate.py:537(_PPolyBase)
        1    0.000    0.000    0.000    0.000 interpolate.py:698(PPoly)
        1    0.000    0.000    0.000    0.000 interpolate.py:91(interp2d)
        1    0.000    0.000    0.000    0.000 interpolation.py:31(<module>)
        1    0.000    0.000    0.000    0.000 io.py:1(<module>)
        1    0.000    0.000    0.000    0.000 io.py:69(IOBase)
        1    0.000    0.000    0.000    0.000 io.py:72(RawIOBase)
        1    0.000    0.000    0.000    0.000 io.py:75(BufferedIOBase)
        1    0.000    0.000    0.000    0.000 io.py:78(TextIOBase)
        1    0.000    0.000    0.000    0.000 irf.py:223(IRAnalysis)
        1    0.000    0.000    0.000    0.000 irf.py:23(BaseIRAnalysis)
        1    0.000    0.000    0.000    0.000 iterators.py:5(<module>)
        1    0.000    0.000    0.000    0.000 json.py:211(Parser)
        1    0.000    0.000    0.000    0.000 json.py:3(<module>)
        1    0.000    0.000    0.000    0.000 json.py:402(SeriesParser)
        1    0.000    0.000    0.000    0.000 json.py:448(FrameParser)
        1    0.000    0.000    0.000    0.000 json.py:48(Writer)
        1    0.000    0.000    0.000    0.000 json.py:81(SeriesWriter)
        1    0.000    0.000    0.000    0.000 json.py:90(FrameWriter)
        1    0.000    0.000    0.000    0.000 kalmanfilter.py:240(StateSpaceModel)
        1    0.000    0.000    0.000    0.000 kalmanfilter.py:468(KalmanFilter)
        1    0.000    0.000    0.000    0.000 kde.py:41(gaussian_kde)
        1    0.000    0.000    0.000    0.000 kde.py:45(KDEUnivariate)
        1    0.000    0.000    0.000    0.000 kdetools.py:2(<module>)
        1    0.000    0.000    0.000    0.000 kdtree.py:174(KDTree)
        1    0.000    0.000    0.000    0.000 kdtree.py:238(node)
        1    0.000    0.000    0.000    0.000 kdtree.py:255(leafnode)
        1    0.000    0.000    0.000    0.000 kdtree.py:260(innernode)
        1    0.000    0.000    0.000    0.000 kdtree.py:3(<module>)
        1    0.000    0.000    0.000    0.000 kdtree.py:75(Rectangle)
        1    0.000    0.000    0.000    0.000 kernel_density.py:344(KDEMultivariateConditional)
        1    0.000    0.000    0.000    0.000 kernel_density.py:44(KDEMultivariate)
        1    0.000    0.000    0.000    0.000 kernel_regression.py:446(KernelCensoredReg)
        1    0.000    0.000    0.000    0.000 kernel_regression.py:48(KernelReg)
        1    0.000    0.000    0.000    0.000 kernel_regression.py:829(TestRegCoefD)
        1    0.000    0.000    0.000    0.000 kernels.py:108(CustomKernel)
        1    0.000    0.000    0.000    0.000 kernels.py:12(<module>)
        1    0.000    0.000    0.000    0.000 kernels.py:15(<module>)
        1    0.000    0.000    0.000    0.000 kernels.py:28(NdKernel)
        1    0.000    0.000    0.000    0.000 kernels.py:413(Uniform)
        1    0.000    0.000    0.000    0.000 kernels.py:422(Triangular)
        1    0.000    0.000    0.000    0.000 kernels.py:431(Epanechnikov)
        1    0.000    0.000    0.000    0.000 kernels.py:440(Biweight)
        1    0.000    0.000    0.000    0.000 kernels.py:504(Triweight)
        1    0.000    0.000    0.000    0.000 kernels.py:513(Gaussian)
        1    0.000    0.000    0.000    0.000 kernels.py:539(Cosine)
        1    0.000    0.000    0.000    0.000 kernels.py:553(Cosine2)
        1    0.000    0.000    0.000    0.000 keyword.py:11(<module>)
        1    0.000    0.000    0.000    0.000 l1_solvers_common.py:3(<module>)
        1    0.000    0.000    0.000    0.000 laguerre.py:1742(Laguerre)
        1    0.000    0.000    0.000    0.000 laguerre.py:59(<module>)
        1    0.000    0.000    0.000    0.000 lambertw.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lazy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 lazy.py:117(LazySet)
        1    0.000    0.000    0.000    0.000 lazy.py:13(LazyDict)
        1    0.000    0.000    0.000    0.000 lazy.py:67(LazyList)
        1    0.000    0.000    0.000    0.000 legend.py:106(Legend)
        1    0.000    0.000    0.000    0.000 legend.py:53(DraggableLegend)
        1    0.000    0.000    0.000    0.000 legend_handler.py:133(HandlerNpoints)
        1    0.000    0.000    0.000    0.000 legend_handler.py:163(HandlerNpointsYoffsets)
        1    0.000    0.000    0.000    0.000 legend_handler.py:177(HandlerLine2D)
        1    0.000    0.000    0.000    0.000 legend_handler.py:215(HandlerPatch)
        1    0.000    0.000    0.000    0.000 legend_handler.py:256(HandlerLineCollection)
        1    0.000    0.000    0.000    0.000 legend_handler.py:26(<module>)
        1    0.000    0.000    0.000    0.000 legend_handler.py:289(HandlerRegularPolyCollection)
        1    0.000    0.000    0.000    0.000 legend_handler.py:361(HandlerPathCollection)
        1    0.000    0.000    0.000    0.000 legend_handler.py:374(HandlerCircleCollection)
        1    0.000    0.000    0.000    0.000 legend_handler.py:386(HandlerErrorbar)
        1    0.000    0.000    0.000    0.000 legend_handler.py:390(__init__)
        1    0.000    0.000    0.000    0.000 legend_handler.py:44(HandlerBase)
        1    0.000    0.000    0.000    0.000 legend_handler.py:498(HandlerStem)
        1    0.000    0.000    0.000    0.000 legend_handler.py:502(__init__)
        1    0.000    0.000    0.000    0.000 legend_handler.py:562(HandlerTuple)
        1    0.000    0.000    0.000    0.000 legend_handler.py:566(__init__)
        1    0.000    0.000    0.000    0.000 legendre.py:1770(Legendre)
        1    0.000    0.000    0.000    0.000 legendre.py:83(<module>)
        1    0.000    0.000    0.000    0.000 lgmres.py:4(<module>)
        1    0.000    0.000    0.000    0.000 lil.py:24(lil_matrix)
        1    0.000    0.000    0.000    0.000 linalg.py:43(LinAlgError)
        1    0.000    0.000    0.000    0.000 linalg.py:76(_determine_error_states)
        1    0.000    0.000    0.000    0.000 linalg_version.py:1(<module>)
        1    0.000    0.000    0.000    0.000 linear_model.py:2103(OLSResults)
        1    0.000    0.000    0.000    0.000 linear_model.py:2353(RegressionResultsWrapper)
        1    0.000    0.000    0.000    0.000 linear_model.py:361(GLS)
        1    0.000    0.000    0.000    0.000 linear_model.py:522(WLS)
        1    0.000    0.000    0.000    0.000 linear_model.py:645(OLS)
        1    0.000    0.000    0.000    0.000 linear_model.py:721(GLSAR)
        1    0.000    0.000    0.000    0.000 linear_model.py:84(RegressionModel)
        1    0.000    0.000    0.000    0.000 linear_model.py:928(RegressionResults)
        1    0.000    0.000    0.000    0.000 lines.py:1320(VertexSelector)
        1    0.000    0.000    0.000    0.000 lines.py:188(Line2D)
        1    0.000    0.000    0.000    0.000 linesearch.py:13(<module>)
        1    0.000    0.000    0.000    0.000 links.py:10(Link)
        1    0.000    0.000    0.000    0.000 links.py:210(logit)
        1    0.000    0.000    0.000    0.000 links.py:214(Power)
        1    0.000    0.000    0.000    0.000 links.py:3(<module>)
        1    0.000    0.000    0.000    0.000 links.py:314(inverse_power)
        1    0.000    0.000    0.000    0.000 links.py:328(sqrt)
        1    0.000    0.000    0.000    0.000 links.py:342(inverse_squared)
        1    0.000    0.000    0.000    0.000 links.py:356(identity)
        1    0.000    0.000    0.000    0.000 links.py:370(Log)
        1    0.000    0.000    0.000    0.000 links.py:461(log)
        1    0.000    0.000    0.000    0.000 links.py:473(CDFLink)
        1    0.000    0.000    0.000    0.000 links.py:580(probit)
        1    0.000    0.000    0.000    0.000 links.py:593(cauchy)
        1    0.000    0.000    0.000    0.000 links.py:608(CLogLog)
        1    0.000    0.000    0.000    0.000 links.py:698(cloglog)
        1    0.000    0.000    0.000    0.000 links.py:712(NegativeBinomial)
        1    0.000    0.000    0.000    0.000 links.py:808(nbinom)
        1    0.000    0.000    0.000    0.000 links.py:95(Logit)
        1    0.000    0.000    0.000    0.000 linsolve.py:24(MatrixRankWarning)
        1    0.000    0.000    0.000    0.000 list.py:1(<module>)
        1    0.000    0.000    0.000    0.000 list.py:9(SparseList)
        1    0.000    0.000    0.000    0.000 loader.py:38(TestLoader)
        1    0.000    0.000    0.000    0.000 loader.py:44(TestLoader)
        1    0.000    0.000    0.000    0.000 lobpcg.py:11(<module>)
        1    0.000    0.000    0.000    0.000 lobpcg.py:63(CallableLinearOperator)
        1    0.000    0.000    0.000    0.000 location.py:3(<module>)
        1    0.000    0.000    0.000    0.000 location.py:9(Location)
        1    0.000    0.000    0.000    0.000 lsmr.py:17(<module>)
        1    0.000    0.000    0.000    0.000 lsqr.py:50(<module>)
        1    0.000    0.000    0.000    0.000 ltisys.py:262(lti)
        1    0.000    0.000    0.000    0.000 machar.py:17(MachAr)
        1    0.000    0.000    0.000    0.000 machar.py:7(<module>)
        1    0.000    0.000    0.000    0.000 main.py:63(TestProgram)
        1    0.000    0.000    0.000    0.000 manager.py:187(NoPlugins)
        1    0.000    0.000    0.000    0.000 manager.py:225(PluginManager)
        1    0.000    0.000    0.000    0.000 manager.py:309(ZeroNinePlugin)
        1    0.000    0.000    0.000    0.000 manager.py:368(EntryPointPluginManager)
        1    0.000    0.000    0.000    0.000 manager.py:405(BuiltinPluginManager)
        1    0.000    0.000    0.000    0.000 manager.py:419(DefaultPluginManager)
        1    0.000    0.000    0.000    0.000 manager.py:426(RestrictedPluginManager)
        1    0.000    0.000    0.000    0.000 manager.py:78(PluginProxy)
        1    0.000    0.000    0.000    0.000 matfuncs.py:183(MatrixPowerOperator)
        1    0.000    0.000    0.000    0.000 matfuncs.py:216(ProductOperator)
        1    0.000    0.000    0.000    0.000 matfuncs.py:344(_ExpmPadeHelper)
        1    0.000    0.000    0.000    0.000 math.py:4(<module>)
        1    0.000    0.000    0.000    0.000 mathtext.py:1002(StixSansFonts)
        1    0.000    0.000    0.000    0.000 mathtext.py:1009(StandardPsFonts)
        1    0.000    0.000    0.000    0.000 mathtext.py:105(MathtextBackend)
        1    0.000    0.000    0.000    0.000 mathtext.py:1200(MathTextWarning)
        1    0.000    0.000    0.000    0.000 mathtext.py:1203(Node)
        1    0.000    0.000    0.000    0.000 mathtext.py:1236(Box)
        1    0.000    0.000    0.000    0.000 mathtext.py:1262(Vbox)
        1    0.000    0.000    0.000    0.000 mathtext.py:1269(Hbox)
        1    0.000    0.000    0.000    0.000 mathtext.py:1276(Char)
        1    0.000    0.000    0.000    0.000 mathtext.py:1354(Accent)
        1    0.000    0.000    0.000    0.000 mathtext.py:1383(List)
        1    0.000    0.000    0.000    0.000 mathtext.py:1444(Hlist)
        1    0.000    0.000    0.000    0.000 mathtext.py:1555(Vlist)
        1    0.000    0.000    0.000    0.000 mathtext.py:159(MathtextBackendAgg)
        1    0.000    0.000    0.000    0.000 mathtext.py:1629(Rule)
        1    0.000    0.000    0.000    0.000 mathtext.py:1646(Hrule)
        1    0.000    0.000    0.000    0.000 mathtext.py:1657(Vrule)
        1    0.000    0.000    0.000    0.000 mathtext.py:1666(Glue)
        1    0.000    0.000    0.000    0.000 mathtext.py:1699(GlueSpec)
        1    0.000    0.000    0.000    0.000 mathtext.py:1735(Fil)
        1    0.000    0.000    0.000    0.000 mathtext.py:1739(Fill)
        1    0.000    0.000    0.000    0.000 mathtext.py:1743(Filll)
        1    0.000    0.000    0.000    0.000 mathtext.py:1747(NegFil)
        1    0.000    0.000    0.000    0.000 mathtext.py:1751(NegFill)
        1    0.000    0.000    0.000    0.000 mathtext.py:1755(NegFilll)
        1    0.000    0.000    0.000    0.000 mathtext.py:1759(SsGlue)
        1    0.000    0.000    0.000    0.000 mathtext.py:1763(HCentered)
        1    0.000    0.000    0.000    0.000 mathtext.py:1772(VCentered)
        1    0.000    0.000    0.000    0.000 mathtext.py:1780(Kern)
        1    0.000    0.000    0.000    0.000 mathtext.py:1809(SubSuperCluster)
        1    0.000    0.000    0.000    0.000 mathtext.py:1823(AutoHeightChar)
        1    0.000    0.000    0.000    0.000 mathtext.py:1852(AutoWidthChar)
        1    0.000    0.000    0.000    0.000 mathtext.py:1878(Ship)
        1    0.000    0.000    0.000    0.000 mathtext.py:2042(Parser)
        1    0.000    0.000    0.000    0.000 mathtext.py:233(MathtextBackendBitmap)
        1    0.000    0.000    0.000    0.000 mathtext.py:2349(State)
        1    0.000    0.000    0.000    0.000 mathtext.py:239(MathtextBackendPs)
        1    0.000    0.000    0.000    0.000 mathtext.py:279(MathtextBackendPdf)
        1    0.000    0.000    0.000    0.000 mathtext.py:2936(MathTextParser)
        1    0.000    0.000    0.000    0.000 mathtext.py:2957(__init__)
        1    0.000    0.000    0.000    0.000 mathtext.py:307(MathtextBackendSvg)
        1    0.000    0.000    0.000    0.000 mathtext.py:336(MathtextBackendPath)
        1    0.000    0.000    0.000    0.000 mathtext.py:364(MathtextBackendCairo)
        1    0.000    0.000    0.000    0.000 mathtext.py:392(Fonts)
        1    0.000    0.000    0.000    0.000 mathtext.py:548(TruetypeFonts)
        1    0.000    0.000    0.000    0.000 mathtext.py:553(CachedFont)
        1    0.000    0.000    0.000    0.000 mathtext.py:666(BakomaFonts)
        1    0.000    0.000    0.000    0.000 mathtext.py:779(UnicodeFonts)
        1    0.000    0.000    0.000    0.000 mathtext.py:886(StixFonts)
        1    0.000    0.000    0.000    0.000 matrixComputations.py:3(<module>)
        1    0.000    0.000    0.000    0.000 memmap.py:1(<module>)
        1    0.000    0.000    0.000    0.000 memmap.py:23(memmap)
        1    0.000    0.000    0.000    0.000 merge.py:154(_MergeOperation)
        1    0.000    0.000    0.000    0.000 merge.py:3(<module>)
        1    0.000    0.000    0.000    0.000 merge.py:43(MergeError)
        1    0.000    0.000    0.000    0.000 merge.py:477(_OrderedMerge)
        1    0.000    0.000    0.000    0.000 merge.py:758(_Concatenator)
        1    0.000    0.000    0.000    0.000 mgcv_cubic_splines.py:544(CubicRegressionSpline)
        1    0.000    0.000    0.000    0.000 mgcv_cubic_splines.py:691(CR)
        1    0.000    0.000    0.000    0.000 mgcv_cubic_splines.py:722(CC)
        1    0.000    0.000    0.000    0.000 mgcv_cubic_splines.py:8(<module>)
        1    0.000    0.000    0.000    0.000 mgcv_cubic_splines.py:854(TE)
        1    0.000    0.000    0.000    0.000 mimetools.py:20(Message)
        1    0.000    0.000    0.000    0.000 minres.py:1(<module>)
        1    0.000    0.000    0.000    0.000 misc.py:3(<module>)
        1    0.000    0.000    0.000    0.000 missing.py:39(<module>)
        1    0.000    0.000    0.000    0.000 missing.py:52(NAAction)
        1    0.000    0.000    0.000    0.000 mixed_linear_model.py:131(MixedLMParams)
        1    0.000    0.000    0.000    0.000 mixed_linear_model.py:1756(MixedLMResults)
        1    0.000    0.000    0.000    0.000 mixed_linear_model.py:2118(MixedLMResultsWrapper)
        1    0.000    0.000    0.000    0.000 mixed_linear_model.py:424(MixedLM)
        1    0.000    0.000    0.000    0.000 mlab.py:1657(PCA)
        1    0.000    0.000    0.000    0.000 mlab.py:2049(FIFOBuffer)
        1    0.000    0.000    0.000    0.000 mlab.py:3051(FormatObj)
        1    0.000    0.000    0.000    0.000 mlab.py:3068(FormatString)
        1    0.000    0.000    0.000    0.000 mlab.py:3079(FormatFormatStr)
        1    0.000    0.000    0.000    0.000 mlab.py:3090(FormatFloat)
        1    0.000    0.000    0.000    0.000 mlab.py:3108(FormatInt)
        1    0.000    0.000    0.000    0.000 mlab.py:3119(FormatBool)
        1    0.000    0.000    0.000    0.000 mlab.py:3128(FormatPercent)
        1    0.000    0.000    0.000    0.000 mlab.py:3132(FormatThousands)
        1    0.000    0.000    0.000    0.000 mlab.py:3137(FormatMillions)
        1    0.000    0.000    0.000    0.000 mlab.py:3142(FormatDate)
        1    0.000    0.000    0.000    0.000 mlab.py:3158(FormatDatetime)
        1    0.000    0.000    0.000    0.000 mlab.py:3687(GaussianKDE)
        1    0.000    0.000    0.000    0.000 model.py:1580(LikelihoodResultsWrapper)
        1    0.000    0.000    0.000    0.000 model.py:1601(ResultMixin)
        1    0.000    0.000    0.000    0.000 model.py:1742(GenericLikelihoodModelResults)
        1    0.000    0.000    0.000    0.000 model.py:180(LikelihoodModel)
        1    0.000    0.000    0.000    0.000 model.py:41(Model)
        1    0.000    0.000    0.000    0.000 model.py:473(GenericLikelihoodModel)
        1    0.000    0.000    0.000    0.000 model.py:690(Results)
        1    0.000    0.000    0.000    0.000 model.py:753(LikelihoodModelResults)
        1    0.000    0.000    0.000    0.000 moment_helpers.py:13(<module>)
        1    0.000    0.000    0.000    0.000 morphology.py:31(<module>)
        1    0.000    0.000    0.000    0.000 mrecords.py:10(<module>)
        1    0.000    0.000    0.000    0.000 mrecords.py:103(MaskedRecords)
        1    0.000    0.000    0.000    0.000 mstats_basic.py:4(<module>)
        1    0.000    0.000    0.000    0.000 mstats_extras.py:4(<module>)
        1    0.000    0.000    0.000    0.000 multicomp.py:1500(StepDown)
        1    0.000    0.000    0.000    0.000 multicomp.py:493(GroupsStats)
        1    0.000    0.000    0.000    0.000 multicomp.py:588(TukeyHSDResults)
        1    0.000    0.000    0.000    0.000 multicomp.py:769(MultiComparison)
        1    0.000    0.000    0.000    0.000 multitest.py:7(<module>)
        1    0.000    0.000    0.000    0.000 nanfunctions.py:16(<module>)
        1    0.000    0.000    0.000    0.000 nanops.py:30(disallow)
        1    0.000    0.000    0.000    0.000 nanops.py:52(bottleneck_switch)
        1    0.000    0.000    0.000    0.000 navidata.py:19(NaviData)
        1    0.000    0.000    0.000    0.000 navidata.py:3(<module>)
        1    0.000    0.000    0.000    0.000 ndgriddata.py:22(NearestNDInterpolator)
        1    0.000    0.000    0.000    0.000 ndgriddata.py:6(<module>)
        1    0.000    0.000    0.000    0.000 nearest_correlation.py:1(<module>)
        1    0.000    0.000    0.000    0.000 nearest_correlation.py:7(ExceededMaxIterationsError)
        1    0.000    0.000    0.000    0.000 new.py:5(<module>)
        1    0.000    0.000    0.000    0.000 nnls.py:1(<module>)
        1    0.000    0.000    0.000    0.000 nonlin.py:1002(BroydenSecond)
        1    0.000    0.000    0.000    0.000 nonlin.py:1046(Anderson)
        1    0.000    0.000    0.000    0.000 nonlin.py:1182(DiagBroyden)
        1    0.000    0.000    0.000    0.000 nonlin.py:1229(LinearMixing)
        1    0.000    0.000    0.000    0.000 nonlin.py:1269(ExcitingMixing)
        1    0.000    0.000    0.000    0.000 nonlin.py:1327(KrylovJacobian)
        1    0.000    0.000    0.000    0.000 nonlin.py:138(NoConvergence)
        1    0.000    0.000    0.000    0.000 nonlin.py:418(TerminationCondition)
        1    0.000    0.000    0.000    0.000 nonlin.py:481(Jacobian)
        1    0.000    0.000    0.000    0.000 nonlin.py:549(InverseJacobian)
        1    0.000    0.000    0.000    0.000 nonlin.py:664(GenericBroyden)
        1    0.000    0.000    0.000    0.000 nonlin.py:690(LowRankMatrix)
        1    0.000    0.000    0.000    0.000 nonlin.py:909(BroydenFirst)
        1    0.000    0.000    0.000    0.000 nontrivial.py:1(<module>)
        1    0.000    0.000    0.000    0.000 nontrivial.py:10(TimeExpired)
        1    0.000    0.000    0.000    0.000 nontrivial.py:147(nottest)
        1    0.000    0.000    0.000    0.000 norms.py:167(HuberT)
        1    0.000    0.000    0.000    0.000 norms.py:182(__init__)
        1    0.000    0.000    0.000    0.000 norms.py:270(RamsayE)
        1    0.000    0.000    0.000    0.000 norms.py:357(AndrewWave)
        1    0.000    0.000    0.000    0.000 norms.py:466(TrimmedMean)
        1    0.000    0.000    0.000    0.000 norms.py:570(Hampel)
        1    0.000    0.000    0.000    0.000 norms.py:6(RobustNorm)
        1    0.000    0.000    0.000    0.000 norms.py:701(TukeyBiweight)
        1    0.000    0.000    0.000    0.000 norms.py:86(LeastSquares)
        1    0.000    0.000    0.000    0.000 nosetester.py:129(NoseTester)
        1    0.000    0.000    0.000    0.000 nosetester.py:6(<module>)
        1    0.000    0.000    0.000    0.000 npyio.py:133(NpzFile)
        1    0.000    0.000    0.000    0.000 npyio.py:86(BagObj)
        1    0.000    0.000    0.000    0.000 numbers.py:13(Number)
        1    0.000    0.000    0.000    0.000 numbers.py:169(Real)
        1    0.000    0.000    0.000    0.000 numbers.py:270(Rational)
        1    0.000    0.000    0.000    0.000 numbers.py:295(Integral)
        1    0.000    0.000    0.000    0.000 numbers.py:34(Complex)
        1    0.000    0.000    0.000    0.000 numeric.py:2743(_unspecified)
        1    0.000    0.000    0.000    0.000 numeric.py:2747(errstate)
        1    0.000    0.000    0.000    0.000 numeric.py:2824(_setdef)
        1    0.000    0.000    0.000    0.000 numeric.py:52(ComplexWarning)
        1    0.000    0.000    0.000    0.000 numerictypes.py:289(_add_types)
        1    0.000    0.000    0.000    0.000 numerictypes.py:305(_add_aliases)
        1    0.000    0.000    0.000    0.000 numerictypes.py:346(_add_integer_aliases)
        1    0.000    0.000    0.000    0.000 numerictypes.py:387(_set_up_aliases)
        1    0.000    0.000    0.000    0.000 numerictypes.py:436(_construct_char_code_lookup)
        1    0.000    0.000    0.000    0.000 numerictypes.py:459(_set_array_types)
        1    0.000    0.000    0.000    0.000 numerictypes.py:773(_typedict)
        1    0.000    0.000    0.000    0.000 numerictypes.py:781(__getitem__)
        1    0.000    0.000    0.000    0.000 numerictypes.py:788(_construct_lookups)
        1    0.000    0.000    0.000    0.000 numerictypes.py:867(<lambda>)
        1    0.000    0.000    0.000    0.000 numerictypes.py:964(_register_types)
        1    0.000    0.000    0.000    0.000 odepack.py:2(<module>)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1145(AnchoredText)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1194(OffsetImage)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1296(AnnotationBbox)
        1    0.000    0.000    0.000    0.000 offsetbox.py:143(OffsetBox)
        1    0.000    0.000    0.000    0.000 offsetbox.py:15(<module>)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1534(DraggableBase)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1644(DraggableOffsetBox)
        1    0.000    0.000    0.000    0.000 offsetbox.py:1672(DraggableAnnotation)
        1    0.000    0.000    0.000    0.000 offsetbox.py:278(PackerBase)
        1    0.000    0.000    0.000    0.000 offsetbox.py:322(VPacker)
        1    0.000    0.000    0.000    0.000 offsetbox.py:401(HPacker)
        1    0.000    0.000    0.000    0.000 offsetbox.py:480(PaddedBox)
        1    0.000    0.000    0.000    0.000 offsetbox.py:561(DrawingArea)
        1    0.000    0.000    0.000    0.000 offsetbox.py:657(TextArea)
        1    0.000    0.000    0.000    0.000 offsetbox.py:819(AuxTransformBox)
        1    0.000    0.000    0.000    0.000 offsetbox.py:923(AnchoredOffsetbox)
        1    0.000    0.000    0.000    0.000 offsets.py:1004(BusinessMonthBegin)
        1    0.000    0.000    0.000    0.000 offsets.py:1041(CustomBusinessMonthEnd)
        1    0.000    0.000    0.000    0.000 offsets.py:106(ApplyTypeError)
        1    0.000    0.000    0.000    0.000 offsets.py:1066(__init__)
        1    0.000    0.000    0.000    0.000 offsets.py:1099(CustomBusinessMonthBegin)
        1    0.000    0.000    0.000    0.000 offsets.py:111(CacheableOffset)
        1    0.000    0.000    0.000    0.000 offsets.py:1124(__init__)
        1    0.000    0.000    0.000    0.000 offsets.py:115(DateOffset)
        1    0.000    0.000    0.000    0.000 offsets.py:1158(Week)
        1    0.000    0.000    0.000    0.000 offsets.py:1168(__init__)
        1    0.000    0.000    0.000    0.000 offsets.py:1233(WeekDay)
        1    0.000    0.000    0.000    0.000 offsets.py:1255(WeekOfMonth)
        1    0.000    0.000    0.000    0.000 offsets.py:1350(LastWeekOfMonth)
        1    0.000    0.000    0.000    0.000 offsets.py:1427(QuarterOffset)
        1    0.000    0.000    0.000    0.000 offsets.py:1463(BQuarterEnd)
        1    0.000    0.000    0.000    0.000 offsets.py:1528(BQuarterBegin)
        1    0.000    0.000    0.000    0.000 offsets.py:1564(QuarterEnd)
        1    0.000    0.000    0.000    0.000 offsets.py:1609(QuarterBegin)
        1    0.000    0.000    0.000    0.000 offsets.py:1637(YearOffset)
        1    0.000    0.000    0.000    0.000 offsets.py:1660(BYearEnd)
        1    0.000    0.000    0.000    0.000 offsets.py:1696(BYearBegin)
        1    0.000    0.000    0.000    0.000 offsets.py:1728(YearEnd)
        1    0.000    0.000    0.000    0.000 offsets.py:1786(YearBegin)
        1    0.000    0.000    0.000    0.000 offsets.py:1830(FY5253)
        1    0.000    0.000    0.000    0.000 offsets.py:2048(FY5253Quarter)
        1    0.000    0.000    0.000    0.000 offsets.py:2205(Easter)
        1    0.000    0.000    0.000    0.000 offsets.py:2257(Tick)
        1    0.000    0.000    0.000    0.000 offsets.py:2354(Day)
        1    0.000    0.000    0.000    0.000 offsets.py:2359(Hour)
        1    0.000    0.000    0.000    0.000 offsets.py:2364(Minute)
        1    0.000    0.000    0.000    0.000 offsets.py:2369(Second)
        1    0.000    0.000    0.000    0.000 offsets.py:2374(Milli)
        1    0.000    0.000    0.000    0.000 offsets.py:2379(Micro)
        1    0.000    0.000    0.000    0.000 offsets.py:2384(Nano)
        1    0.000    0.000    0.000    0.000 offsets.py:389(SingleConstructorOffset)
        1    0.000    0.000    0.000    0.000 offsets.py:398(BusinessMixin)
        1    0.000    0.000    0.000    0.000 offsets.py:431(BusinessDay)
        1    0.000    0.000    0.000    0.000 offsets.py:538(BusinessHour)
        1    0.000    0.000    0.000    0.000 offsets.py:766(CustomBusinessDay)
        1    0.000    0.000    0.000    0.000 offsets.py:924(MonthOffset)
        1    0.000    0.000    0.000    0.000 offsets.py:935(MonthEnd)
        1    0.000    0.000    0.000    0.000 offsets.py:958(MonthBegin)
        1    0.000    0.000    0.000    0.000 offsets.py:978(BusinessMonthEnd)
        1    0.000    0.000    0.000    0.000 ols.py:26(OLS)
        1    0.000    0.000    0.000    0.000 ols.py:601(MovingOLS)
        1    0.000    0.000    0.000    0.000 opcode.py:5(<module>)
        1    0.000    0.000    0.000    0.000 opencage.py:18(OpenCage)
        1    0.000    0.000    0.000    0.000 opencage.py:3(<module>)
        1    0.000    0.000    0.000    0.000 openmapquest.py:19(OpenMapQuest)
        1    0.000    0.000    0.000    0.000 openmapquest.py:3(<module>)
        1    0.000    0.000    0.000    0.000 openpyxl_compat.py:5(<module>)
        1    0.000    0.000    0.000    0.000 ops.py:151(Constant)
        1    0.000    0.000    0.000    0.000 ops.py:168(Op)
        1    0.000    0.000    0.000    0.000 ops.py:253(_TimeOp)
        1    0.000    0.000    0.000    0.000 ops.py:27(UndefinedVariableError)
        1    0.000    0.000    0.000    0.000 ops.py:297(BinOp)
        1    0.000    0.000    0.000    0.000 ops.py:39(Term)
        1    0.000    0.000    0.000    0.000 ops.py:427(Div)
        1    0.000    0.000    0.000    0.000 ops.py:458(UnaryOp)
        1    0.000    0.000    0.000    0.000 optimization.py:13(Optimization)
        1    0.000    0.000    0.000    0.000 optimization.py:213(getOptimizationMethod)
        1    0.000    0.000    0.000    0.000 optimization.py:37(OptBFGS)
        1    0.000    0.000    0.000    0.000 optimization.py:38(__init__)
        1    0.000    0.000    0.000    0.000 optimization.py:61(OptSteepestDescent)
        1    0.000    0.000    0.000    0.000 optimize.py:123(OptimizeWarning)
        1    0.000    0.000    0.000    0.000 optimize.py:127(_check_unknown_options)
        1    0.000    0.000    0.000    0.000 optimize.py:1672(Brent)
        1    0.000    0.000    0.000    0.000 optimize.py:275(wrap_function)
        1    0.000    0.000    0.000    0.000 optimize.py:50(MemoizeJac)
        1    0.000    0.000    0.000    0.000 optimize.py:671(_LineSearchError)
        1    0.000    0.000    0.000    0.000 optimize.py:72(OptimizeResult)
        1    0.000    0.000    0.000    0.000 optimizer.py:18(Optimizer)
        1    0.000    0.000    0.000    0.000 optimizer.py:4(<module>)
        1    0.000    0.000    0.000    0.000 ordereddict.py:145(update)
        1    0.000    0.000    0.000    0.000 ordereddict.py:19(OrderedDict)
        1    0.000    0.000    0.000    0.000 ordereddict.py:31(__init__)
        1    0.000    0.000    0.000    0.000 ordereddict.py:7(<module>)
        1    0.000    0.000    0.000    0.000 origin.py:11(<module>)
        1    0.000    0.000    0.000    0.000 origin.py:13(Origin)
        1    0.000    0.000    0.000    0.000 originregress.py:18(<module>)
        1    0.000    0.000    0.000    0.000 originregress.py:28(ELOriginRegress)
        1    0.000    0.000    0.000    0.000 originregress.py:91(OriginResults)
        1    0.000    0.000    0.000    0.000 orthogonal.py:112(orthopoly1d)
        1    0.000    0.000    0.000    0.000 orthogonal.py:79(<module>)
        1    0.000    0.000    0.000    0.000 os.py:35(_get_exports_list)
        1    0.000    0.000    0.000    0.000 os.py:473(update)
        1    0.000    0.000    0.000    0.000 os.py:497(clear)
        1    0.000    0.000    0.000    0.000 os.py:504(copy)
        1    0.000    0.000    0.000    0.000 osm.py:20(Nominatim)
        1    0.000    0.000    0.000    0.000 osm.py:3(<module>)
        1    0.000    0.000    0.000    0.000 output.py:1(<module>)
        1    0.000    0.000    0.000    0.000 output.py:27(VARSummary)
        1    0.000    0.000    0.000    0.000 packers.py:568(Packer)
        1    0.000    0.000    0.000    0.000 packers.py:580(Unpacker)
        1    0.000    0.000    0.000    0.000 packers.py:597(Iterator)
        1    0.000    0.000    0.000    0.000 panel.py:107(Panel)
        1    0.000    0.000    0.000    0.000 panel.py:22(SparsePanelAxis)
        1    0.000    0.000    0.000    0.000 panel.py:43(SparsePanel)
        1    0.000    0.000    0.000    0.000 panelnd.py:1(<module>)
        1    0.000    0.000    0.000    0.000 parse_formula.py:10(<module>)
        1    0.000    0.000    0.000    0.000 parser.py:1011(_tzparser)
        1    0.000    0.000    0.000    0.000 parser.py:1013(_result)
        1    0.000    0.000    0.000    0.000 parser.py:1018(_attr)
        1    0.000    0.000    0.000    0.000 parser.py:17(Parser)
        1    0.000    0.000    0.000    0.000 parser.py:178(_resultbase)
        1    0.000    0.000    0.000    0.000 parser.py:196(parserinfo)
        1    0.000    0.000    0.000    0.000 parser.py:247(__init__)
        1    0.000    0.000    0.000    0.000 parser.py:33(_timelex)
        1    0.000    0.000    0.000    0.000 parser.py:338(parser)
        1    0.000    0.000    0.000    0.000 parser.py:340(__init__)
        1    0.000    0.000    0.000    0.000 parser.py:440(_result)
        1    0.000    0.000    0.000    0.000 parser.py:86(HeaderParser)
        1    0.000    0.000    0.000    0.000 parsers.py:1051(CParserWrapper)
        1    0.000    0.000    0.000    0.000 parsers.py:1351(PythonParser)
        1    0.000    0.000    0.000    0.000 parsers.py:2313(FixedWidthReader)
        1    0.000    0.000    0.000    0.000 parsers.py:2383(FixedWidthFieldParser)
        1    0.000    0.000    0.000    0.000 parsers.py:29(ParserWarning)
        1    0.000    0.000    0.000    0.000 parsers.py:517(TextFileReader)
        1    0.000    0.000    0.000    0.000 parsers.py:749(ParserBase)
        1    0.000    0.000    0.000    0.000 patches.py:1022(Arrow)
        1    0.000    0.000    0.000    0.000 patches.py:1063(FancyArrow)
        1    0.000    0.000    0.000    0.000 patches.py:1160(YAArrow)
        1    0.000    0.000    0.000    0.000 patches.py:1264(CirclePolygon)
        1    0.000    0.000    0.000    0.000 patches.py:1292(Ellipse)
        1    0.000    0.000    0.000    0.000 patches.py:1359(Circle)
        1    0.000    0.000    0.000    0.000 patches.py:1398(Arc)
        1    0.000    0.000    0.000    0.000 patches.py:1736(_Style)
        1    0.000    0.000    0.000    0.000 patches.py:1792(BoxStyle)
        1    0.000    0.000    0.000    0.000 patches.py:1830(_Base)
        1    0.000    0.000    0.000    0.000 patches.py:1894(Square)
        1    0.000    0.000    0.000    0.000 patches.py:1924(Circle)
        1    0.000    0.000    0.000    0.000 patches.py:1947(LArrow)
        1    0.000    0.000    0.000    0.000 patches.py:1986(RArrow)
        1    0.000    0.000    0.000    0.000 patches.py:2006(Round)
        1    0.000    0.000    0.000    0.000 patches.py:2070(Round4)
        1    0.000    0.000    0.000    0.000 patches.py:2125(Sawtooth)
        1    0.000    0.000    0.000    0.000 patches.py:2234(Roundtooth)
        1    0.000    0.000    0.000    0.000 patches.py:2268(FancyBboxPatch)
        1    0.000    0.000    0.000    0.000 patches.py:2483(ConnectionStyle)
        1    0.000    0.000    0.000    0.000 patches.py:2525(_Base)
        1    0.000    0.000    0.000    0.000 patches.py:2538(SimpleEvent)
        1    0.000    0.000    0.000    0.000 patches.py:2626(Arc3)
        1    0.000    0.000    0.000    0.000 patches.py:2663(Angle3)
        1    0.000    0.000    0.000    0.000 patches.py:2702(Angle)
        1    0.000    0.000    0.000    0.000 patches.py:2765(Arc)
        1    0.000    0.000    0.000    0.000 patches.py:2860(Bar)
        1    0.000    0.000    0.000    0.000 patches.py:3006(_Base)
        1    0.000    0.000    0.000    0.000 patches.py:3100(_Curve)
        1    0.000    0.000    0.000    0.000 patches.py:3228(Curve)
        1    0.000    0.000    0.000    0.000 patches.py:3239(CurveA)
        1    0.000    0.000    0.000    0.000 patches.py:3259(CurveB)
        1    0.000    0.000    0.000    0.000 patches.py:3279(CurveAB)
        1    0.000    0.000    0.000    0.000 patches.py:3299(CurveFilledA)
        1    0.000    0.000    0.000    0.000 patches.py:3320(CurveFilledB)
        1    0.000    0.000    0.000    0.000 patches.py:3341(CurveFilledAB)
        1    0.000    0.000    0.000    0.000 patches.py:3363(_Bracket)
        1    0.000    0.000    0.000    0.000 patches.py:3442(BracketAB)
        1    0.000    0.000    0.000    0.000 patches.py:3477(BracketA)
        1    0.000    0.000    0.000    0.000 patches.py:3499(BracketB)
        1    0.000    0.000    0.000    0.000 patches.py:3521(BarAB)
        1    0.000    0.000    0.000    0.000 patches.py:3555(Simple)
        1    0.000    0.000    0.000    0.000 patches.py:3643(Fancy)
        1    0.000    0.000    0.000    0.000 patches.py:3745(Wedge)
        1    0.000    0.000    0.000    0.000 patches.py:3801(FancyArrowPatch)
        1    0.000    0.000    0.000    0.000 patches.py:4129(ConnectionPatch)
        1    0.000    0.000    0.000    0.000 patches.py:504(Shadow)
        1    0.000    0.000    0.000    0.000 patches.py:53(Patch)
        1    0.000    0.000    0.000    0.000 patches.py:570(Rectangle)
        1    0.000    0.000    0.000    0.000 patches.py:720(RegularPolygon)
        1    0.000    0.000    0.000    0.000 patches.py:804(PathPatch)
        1    0.000    0.000    0.000    0.000 patches.py:832(Polygon)
        1    0.000    0.000    0.000    0.000 patches.py:939(Wedge)
        1    0.000    0.000    0.000    0.000 path.py:13(<module>)
        1    0.000    0.000    0.000    0.000 path.py:31(Path)
        1    0.000    0.000    0.000    0.000 path.py:990(_define_deprecated_functions)
        1    0.000    0.000    0.000    0.000 period.py:2(<module>)
        1    0.000    0.000    0.000    0.000 period.py:99(PeriodIndex)
        1    0.000    0.000    0.000    0.000 pickle.py:1261(_EmptyClass)
        1    0.000    0.000    0.000    0.000 pickle.py:171(Pickler)
        1    0.000    0.000    0.000    0.000 pickle.py:58(PickleError)
        1    0.000    0.000    0.000    0.000 pickle.py:62(PicklingError)
        1    0.000    0.000    0.000    0.000 pickle.py:69(UnpicklingError)
        1    0.000    0.000    0.000    0.000 pickle.py:82(_Stop)
        1    0.000    0.000    0.000    0.000 pickle.py:827(Unpickler)
        1    0.000    0.000    0.000    0.000 pickle_compat.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pickle_compat.py:57(Unpickler)
        1    0.000    0.000    0.000    0.000 pivot.py:3(<module>)
        1    0.000    0.000    0.000    0.000 placefinder.py:21(YahooPlaceFinder)
        1    0.000    0.000    0.000    0.000 platform.py:365(_popen)
        1    0.000    0.000    0.000    0.000 plistlib.py:151(DumbXMLWriter)
        1    0.000    0.000    0.000    0.000 plistlib.py:230(PlistWriter)
        1    0.000    0.000    0.000    0.000 plistlib.py:291(_InternalDict)
        1    0.000    0.000    0.000    0.000 plistlib.py:322(Dict)
        1    0.000    0.000    0.000    0.000 plistlib.py:331(Plist)
        1    0.000    0.000    0.000    0.000 plistlib.py:365(Data)
        1    0.000    0.000    0.000    0.000 plistlib.py:393(PlistParser)
        1    0.000    0.000    0.000    0.000 plm.py:26(PanelOLS)
        1    0.000    0.000    0.000    0.000 plm.py:3(<module>)
        1    0.000    0.000    0.000    0.000 plm.py:490(MovingPanelOLS)
        1    0.000    0.000    0.000    0.000 plm.py:693(NonPooledPanelOLS)
        1    0.000    0.000    0.000    0.000 plotting.py:1(<module>)
        1    0.000    0.000    0.000    0.000 plotting.py:1407(ScatterPlot)
        1    0.000    0.000    0.000    0.000 plotting.py:146(_Options)
        1    0.000    0.000    0.000    0.000 plotting.py:1485(HexBinPlot)
        1    0.000    0.000    0.000    0.000 plotting.py:1540(LinePlot)
        1    0.000    0.000    0.000    0.000 plotting.py:158(__init__)
        1    0.000    0.000    0.000    0.000 plotting.py:167(__setitem__)
        1    0.000    0.000    0.000    0.000 plotting.py:1726(AreaPlot)
        1    0.000    0.000    0.000    0.000 plotting.py:1787(BarPlot)
        1    0.000    0.000    0.000    0.000 plotting.py:191(_get_canonical_key)
        1    0.000    0.000    0.000    0.000 plotting.py:1926(HistPlot)
        1    0.000    0.000    0.000    0.000 plotting.py:1995(KdePlot)
        1    0.000    0.000    0.000    0.000 plotting.py:2041(PiePlot)
        1    0.000    0.000    0.000    0.000 plotting.py:2105(BoxPlot)
        1    0.000    0.000    0.000    0.000 plotting.py:5(MPLConfigurator)
        1    0.000    0.000    0.000    0.000 plotting.py:742(MPLPlot)
        1    0.000    0.000    0.000    0.000 plottools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 plugintest.py:110(MultiProcessFile)
        1    0.000    0.000    0.000    0.000 plugintest.py:179(PluginTester)
        1    0.000    0.000    0.000    0.000 plugintest.py:275(AccessDecorator)
        1    0.000    0.000    0.000    0.000 plugintest.py:96(<module>)
        1    0.000    0.000    0.000    0.000 point.py:48(Point)
        1    0.000    0.000    0.000    0.000 polar.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polar.py:119(InvertedPolarTransform)
        1    0.000    0.000    0.000    0.000 polar.py:166(ThetaFormatter)
        1    0.000    0.000    0.000    0.000 polar.py:184(RadialLocator)
        1    0.000    0.000    0.000    0.000 polar.py:217(PolarAxes)
        1    0.000    0.000    0.000    0.000 polar.py:26(PolarTransform)
        1    0.000    0.000    0.000    0.000 polar.py:85(PolarAffine)
        1    0.000    0.000    0.000    0.000 polyint.py:1(<module>)
        1    0.000    0.000    0.000    0.000 polyint.py:145(_Interpolator1DWithDerivatives)
        1    0.000    0.000    0.000    0.000 polyint.py:21(_Interpolator1D)
        1    0.000    0.000    0.000    0.000 polyint.py:224(KroghInterpolator)
        1    0.000    0.000    0.000    0.000 polyint.py:464(BarycentricInterpolator)
        1    0.000    0.000    0.000    0.000 polyint.py:669(PiecewisePolynomial)
        1    0.000    0.000    0.000    0.000 polynomial.py:1493(Polynomial)
        1    0.000    0.000    0.000    0.000 polynomial.py:21(RankWarning)
        1    0.000    0.000    0.000    0.000 polynomial.py:933(poly1d)
        1    0.000    0.000    0.000    0.000 polyutils.py:45(<module>)
        1    0.000    0.000    0.000    0.000 polyutils.py:58(RankWarning)
        1    0.000    0.000    0.000    0.000 polyutils.py:62(PolyError)
        1    0.000    0.000    0.000    0.000 polyutils.py:66(PolyDomainError)
        1    0.000    0.000    0.000    0.000 polyutils.py:79(PolyBase)
        1    0.000    0.000    0.000    0.000 power.py:1022(_GofChisquareIndPower)
        1    0.000    0.000    0.000    0.000 power.py:155(Power)
        1    0.000    0.000    0.000    0.000 power.py:377(TTestPower)
        1    0.000    0.000    0.000    0.000 power.py:483(TTestIndPower)
        1    0.000    0.000    0.000    0.000 power.py:598(NormalIndPower)
        1    0.000    0.000    0.000    0.000 power.py:605(__init__)
        1    0.000    0.000    0.000    0.000 power.py:722(FTestPower)
        1    0.000    0.000    0.000    0.000 power.py:823(FTestAnovaPower)
        1    0.000    0.000    0.000    0.000 power.py:934(GofChisquarePower)
        1    0.000    0.000    0.000    0.000 pprint.py:35(<module>)
        1    0.000    0.000    0.000    0.000 pprint.py:84(PrettyPrinter)
        1    0.000    0.000    0.000    0.000 predstd.py:7(<module>)
        1    0.000    0.000    0.000    0.000 print_version.py:2(<module>)
        1    0.000    0.000    0.000    0.000 print_versions.py:1(<module>)
        1    0.000    0.000    0.000    0.000 process.py:285(AuthenticationString)
        1    0.000    0.000    0.000    0.000 process.py:299(_MainProcess)
        1    0.000    0.000    0.000    0.000 process.py:301(__init__)
        1    0.000    0.000    0.000    0.000 process.py:35(<module>)
        1    0.000    0.000    0.000    0.000 process.py:86(Process)
        1    0.000    0.000    0.000    0.000 proxy.py:17(<module>)
        1    0.000    0.000    0.000    0.000 proxy.py:38(ResultProxyFactory)
        1    0.000    0.000    0.000    0.000 proxy.py:67(ResultProxy)
        1    0.000    0.000    0.000    0.000 py3k.py:4(<module>)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1063(enablePackrat)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1401(__call__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:145(<genexpr>)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1538(Token)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1549(Empty)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1551(__init__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1558(NoMatch)
        1    0.000    0.000    0.000    0.000 pyparsing.py:157(_Constants)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1571(Literal)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1600(Keyword)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1656(CaselessLiteral)
        1    0.000    0.000    0.000    0.000 pyparsing.py:167(ParseBaseException)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1673(CaselessKeyword)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1683(Word)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1807(Regex)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1871(QuotedString)
        1    0.000    0.000    0.000    0.000 pyparsing.py:1983(CharsNotIn)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2045(White)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2094(_PositionToken)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2101(GoToColumn)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2124(LineStart)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2126(__init__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2144(LineEnd)
        1    0.000    0.000    0.000    0.000 pyparsing.py:215(ParseException)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2162(StringStart)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2164(__init__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2175(StringEnd)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2191(WordStart)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2210(WordEnd)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2232(ParseExpression)
        1    0.000    0.000    0.000    0.000 pyparsing.py:224(ParseFatalException)
        1    0.000    0.000    0.000    0.000 pyparsing.py:229(ParseSyntaxException)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2324(setResultsName)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2339(And)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2345(_ErrorStop)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2405(Or)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2466(MatchFirst)
        1    0.000    0.000    0.000    0.000 pyparsing.py:250(RecursiveGrammarException)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2506(__str__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2521(Each)
        1    0.000    0.000    0.000    0.000 pyparsing.py:258(_ParseResultsWithOffset)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2605(ParseElementEnhance)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2666(__str__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2677(FollowedBy)
        1    0.000    0.000    0.000    0.000 pyparsing.py:268(ParseResults)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2691(NotAny)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2723(ZeroOrMore)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2762(OneOrMore)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2796(_NullToken)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2804(Optional)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2838(SkipTo)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2900(Forward)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2915(__init__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2918(__lshift__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2932(__ilshift__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2976(_ForwardNoRecurse)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2980(TokenConverter)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2986(Upcase)
        1    0.000    0.000    0.000    0.000 pyparsing.py:2997(Combine)
        1    0.000    0.000    0.000    0.000 pyparsing.py:3029(Group)
        1    0.000    0.000    0.000    0.000 pyparsing.py:3038(Dict)
        1    0.000    0.000    0.000    0.000 pyparsing.py:3043(__init__)
        1    0.000    0.000    0.000    0.000 pyparsing.py:3072(Suppress)
        1    0.000    0.000    0.000    0.000 pyparsing.py:3081(OnlyOnce)
        1    0.000    0.000    0.000    0.000 pyparsing.py:3120(delimitedList)
        1    0.000    0.000    0.000    0.000 pyparsing.py:3223(oneOf)
        1    0.000    0.000    0.000    0.000 pyparsing.py:789(ParserElement)
        1    0.000    0.000    0.000    0.000 pyplot.py:1858(colormaps)
        1    0.000    0.000    0.000    0.000 pyplot.py:70(_backend_selection)
        1    0.000    0.000    0.000    0.000 pytables.py:1(<module>)
        1    0.000    0.000    0.000    0.000 pytables.py:106(PossibleDataLossError)
        1    0.000    0.000    0.000    0.000 pytables.py:110(ClosedFileError)
        1    0.000    0.000    0.000    0.000 pytables.py:114(IncompatibilityWarning)
        1    0.000    0.000    0.000    0.000 pytables.py:124(AttributeConflictWarning)
        1    0.000    0.000    0.000    0.000 pytables.py:1277(TableIterator)
        1    0.000    0.000    0.000    0.000 pytables.py:133(DuplicateWarning)
        1    0.000    0.000    0.000    0.000 pytables.py:1364(IndexCol)
        1    0.000    0.000    0.000    0.000 pytables.py:1638(GenericIndexCol)
        1    0.000    0.000    0.000    0.000 pytables.py:1659(DataCol)
        1    0.000    0.000    0.000    0.000 pytables.py:1698(__init__)
        1    0.000    0.000    0.000    0.000 pytables.py:1724(set_data)
        1    0.000    0.000    0.000    0.000 pytables.py:1739(set_metadata)
        1    0.000    0.000    0.000    0.000 pytables.py:2078(DataIndexableCol)
        1    0.000    0.000    0.000    0.000 pytables.py:2096(GenericDataIndexableCol)
        1    0.000    0.000    0.000    0.000 pytables.py:21(Scope)
        1    0.000    0.000    0.000    0.000 pytables.py:2104(Fixed)
        1    0.000    0.000    0.000    0.000 pytables.py:225(FilterBinOp)
        1    0.000    0.000    0.000    0.000 pytables.py:2266(GenericFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2582(LegacyFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2591(LegacySeriesFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2600(LegacyFrameFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2610(SeriesFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2634(SparseSeriesFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2658(SparseFrameFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2691(SparsePanelFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2724(BlockManagerFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2800(FrameFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2805(PanelFixed)
        1    0.000    0.000    0.000    0.000 pytables.py:2815(Table)
        1    0.000    0.000    0.000    0.000 pytables.py:288(JointFilterBinOp)
        1    0.000    0.000    0.000    0.000 pytables.py:297(ConditionBinOp)
        1    0.000    0.000    0.000    0.000 pytables.py:31(Term)
        1    0.000    0.000    0.000    0.000 pytables.py:339(HDFStore)
        1    0.000    0.000    0.000    0.000 pytables.py:343(JointConditionBinOp)
        1    0.000    0.000    0.000    0.000 pytables.py:353(UnaryOp)
        1    0.000    0.000    0.000    0.000 pytables.py:3594(WORMTable)
        1    0.000    0.000    0.000    0.000 pytables.py:3615(LegacyTable)
        1    0.000    0.000    0.000    0.000 pytables.py:3719(LegacyFrameTable)
        1    0.000    0.000    0.000    0.000 pytables.py:3730(LegacyPanelTable)
        1    0.000    0.000    0.000    0.000 pytables.py:3737(AppendableTable)
        1    0.000    0.000    0.000    0.000 pytables.py:377(ExprVisitor)
        1    0.000    0.000    0.000    0.000 pytables.py:3963(AppendableFrameTable)
        1    0.000    0.000    0.000    0.000 pytables.py:4030(AppendableSeriesTable)
        1    0.000    0.000    0.000    0.000 pytables.py:4073(AppendableMultiSeriesTable)
        1    0.000    0.000    0.000    0.000 pytables.py:4088(GenericTable)
        1    0.000    0.000    0.000    0.000 pytables.py:4137(AppendableMultiFrameTable)
        1    0.000    0.000    0.000    0.000 pytables.py:4173(AppendablePanelTable)
        1    0.000    0.000    0.000    0.000 pytables.py:4191(AppendableNDimTable)
        1    0.000    0.000    0.000    0.000 pytables.py:4422(Selection)
        1    0.000    0.000    0.000    0.000 pytables.py:452(Expr)
        1    0.000    0.000    0.000    0.000 pytables.py:59(Constant)
        1    0.000    0.000    0.000    0.000 pytables.py:593(TermValue)
        1    0.000    0.000    0.000    0.000 pytables.py:69(BinOp)
        1    0.000    0.000    0.000    0.000 python.py:3(<module>)
        1    0.000    0.000    0.000    0.000 pyversion.py:116(UnboundSelf)
        1    0.000    0.000    0.000    0.000 pyversion.py:3(<module>)
        1    0.000    0.000    0.000    0.000 pyversion.py:85(UnboundMethod)
        1    0.000    0.000    0.000    0.000 quadpack.py:20(IntegrationWarning)
        1    0.000    0.000    0.000    0.000 quadpack.py:700(_RangeFunc)
        1    0.000    0.000    0.000    0.000 quadpack.py:713(_OptFunc)
        1    0.000    0.000    0.000    0.000 quadpack.py:722(_NQuad)
        1    0.000    0.000    0.000    0.000 quadrature.py:1(<module>)
        1    0.000    0.000    0.000    0.000 quadrature.py:17(AccuracyWarning)
        1    0.000    0.000    0.000    0.000 quantile_regression.py:18(<module>)
        1    0.000    0.000    0.000    0.000 quantile_regression.py:266(QuantRegResults)
        1    0.000    0.000    0.000    0.000 quantile_regression.py:35(QuantReg)
        1    0.000    0.000    0.000    0.000 quiver.py:15(<module>)
        1    0.000    0.000    0.000    0.000 quiver.py:227(QuiverKey)
        1    0.000    0.000    0.000    0.000 quiver.py:393(Quiver)
        1    0.000    0.000    0.000    0.000 quiver.py:847(Barbs)
        1    0.000    0.000    0.000    0.000 quopri.py:3(<module>)
        1    0.000    0.000    0.000    0.000 random.py:650(WichmannHill)
        1    0.000    0.000    0.000    0.000 random.py:72(Random)
        1    0.000    0.000    0.000    0.000 random.py:800(SystemRandom)
        1    0.000    0.000    0.000    0.000 rbf.py:44(<module>)
        1    0.000    0.000    0.000    0.000 rbf.py:58(Rbf)
        1    0.000    0.000    0.000    0.000 rcsetup.py:195(validate_nseq_float)
        1    0.000    0.000    0.000    0.000 rcsetup.py:196(__init__)
        1    0.000    0.000    0.000    0.000 rcsetup.py:216(validate_nseq_int)
        1    0.000    0.000    0.000    0.000 rcsetup.py:217(__init__)
        1    0.000    0.000    0.000    0.000 rcsetup.py:41(ValidateInStrings)
        1    0.000    0.000    0.000    0.000 rcsetup.py:462(ValidateInterval)
        1    0.000    0.000    0.000    0.000 realtransforms.py:3(<module>)
        1    0.000    0.000    0.000    0.000 records.py:215(record)
        1    0.000    0.000    0.000    0.000 records.py:285(recarray)
        1    0.000    0.000    0.000    0.000 records.py:36(<module>)
        1    0.000    0.000    0.000    0.000 records.py:84(format_parser)
        1    0.000    0.000    0.000    0.000 redundancy.py:43(<module>)
        1    0.000    0.000    0.000    0.000 redundancy.py:49(_ExpandedFactor)
        1    0.000    0.000    0.000    0.000 redundancy.py:78(_Subterm)
        1    0.000    0.000    0.000    0.000 relativedelta.py:10(weekday)
        1    0.000    0.000    0.000    0.000 relativedelta.py:2(<module>)
        1    0.000    0.000    0.000    0.000 relativedelta.py:41(relativedelta)
        1    0.000    0.000    0.000    0.000 resample.py:1(<module>)
        1    0.000    0.000    0.000    0.000 resample.py:23(TimeGrouper)
        1    0.000    0.000    0.000    0.000 reshape.py:27(_Unstacker)
        1    0.000    0.000    0.000    0.000 result.py:26(TestResult)
        1    0.000    0.000    0.000    0.000 result.py:31(TextTestResult)
        1    0.000    0.000    0.000    0.000 result.py:9(<module>)
        1    0.000    0.000    0.000    0.000 rfc822.py:496(AddrlistClass)
        1    0.000    0.000    0.000    0.000 rfc822.py:71(<module>)
        1    0.000    0.000    0.000    0.000 rfc822.py:770(AddressList)
        1    0.000    0.000    0.000    0.000 rfc822.py:85(Message)
        1    0.000    0.000    0.000    0.000 robust_linear_model.py:15(<module>)
        1    0.000    0.000    0.000    0.000 robust_linear_model.py:309(RLMResults)
        1    0.000    0.000    0.000    0.000 robust_linear_model.py:35(RLM)
        1    0.000    0.000    0.000    0.000 robust_linear_model.py:580(RLMResultsWrapper)
        1    0.000    0.000    0.000    0.000 rootfinding.py:12(<module>)
        1    0.000    0.000    0.000    0.000 rrule.py:1071(rruleset)
        1    0.000    0.000    0.000    0.000 rrule.py:1079(_genitem)
        1    0.000    0.000    0.000    0.000 rrule.py:1169(_rrulestr)
        1    0.000    0.000    0.000    0.000 rrule.py:246(rrule)
        1    0.000    0.000    0.000    0.000 rrule.py:53(weekday)
        1    0.000    0.000    0.000    0.000 rrule.py:86(rrulebase)
        1    0.000    0.000    0.000    0.000 rrule.py:876(_iterinfo)
        1    0.000    0.000    0.000    0.000 runner.py:119(TextTestRunner)
        1    0.000    0.000    0.000    0.000 runner.py:12(_WritelnDecorator)
        1    0.000    0.000    0.000    0.000 runner.py:28(TextTestResult)
        1    0.000    0.000    0.000    0.000 runs.py:20(<module>)
        1    0.000    0.000    0.000    0.000 runs.py:250(TotalRunsProb)
        1    0.000    0.000    0.000    0.000 runs.py:28(Runs)
        1    0.000    0.000    0.000    0.000 runs.py:314(RunsProb)
        1    0.000    0.000    0.000    0.000 rv.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scale.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scale.py:104(LogTransformBase)
        1    0.000    0.000    0.000    0.000 scale.py:118(Log10Transform)
        1    0.000    0.000    0.000    0.000 scale.py:131(InvertedLog10Transform)
        1    0.000    0.000    0.000    0.000 scale.py:145(Log2Transform)
        1    0.000    0.000    0.000    0.000 scale.py:158(InvertedLog2Transform)
        1    0.000    0.000    0.000    0.000 scale.py:172(NaturalLogTransform)
        1    0.000    0.000    0.000    0.000 scale.py:18(ScaleBase)
        1    0.000    0.000    0.000    0.000 scale.py:182(HuberScale)
        1    0.000    0.000    0.000    0.000 scale.py:185(InvertedNaturalLogTransform)
        1    0.000    0.000    0.000    0.000 scale.py:199(LogTransform)
        1    0.000    0.000    0.000    0.000 scale.py:217(__init__)
        1    0.000    0.000    0.000    0.000 scale.py:223(InvertedLogTransform)
        1    0.000    0.000    0.000    0.000 scale.py:240(LogScale)
        1    0.000    0.000    0.000    0.000 scale.py:333(SymmetricalLogTransform)
        1    0.000    0.000    0.000    0.000 scale.py:366(InvertedSymmetricalLogTransform)
        1    0.000    0.000    0.000    0.000 scale.py:398(SymmetricalLogScale)
        1    0.000    0.000    0.000    0.000 scale.py:52(Huber)
        1    0.000    0.000    0.000    0.000 scale.py:521(get_scale_docs)
        1    0.000    0.000    0.000    0.000 scale.py:59(LinearScale)
        1    0.000    0.000    0.000    0.000 scale.py:83(__init__)
        1    0.000    0.000    0.000    0.000 scimath.py:17(<module>)
        1    0.000    0.000    0.000    0.000 scipy.py:1(<module>)
        1    0.000    0.000    0.000    0.000 scipy_sparse.py:5(<module>)
        1    0.000    0.000    0.000    0.000 scope.py:2(<module>)
        1    0.000    0.000    0.000    0.000 scope.py:78(Scope)
        1    0.000    0.000    0.000    0.000 seasonal.py:115(DecomposeResult)
        1    0.000    0.000    0.000    0.000 seasonal.py:3(<module>)
        1    0.000    0.000    0.000    0.000 selector.py:202(TestAddress)
        1    0.000    0.000    0.000    0.000 selector.py:29(Selector)
        1    0.000    0.000    0.000    0.000 selector.py:8(<module>)
        1    0.000    0.000    0.000    0.000 series.py:118(__init__)
        1    0.000    0.000    0.000    0.000 series.py:255(_set_axis)
        1    0.000    0.000    0.000    0.000 series.py:2589(_sanitize_array)
        1    0.000    0.000    0.000    0.000 series.py:2604(_try_cast)
        1    0.000    0.000    0.000    0.000 series.py:275(_set_subtyp)
        1    0.000    0.000    0.000    0.000 series.py:84(Series)
        1    0.000    0.000    0.000    0.000 series.py:87(SparseSeries)
        1    0.000    0.000    0.000    0.000 shlex.py:2(<module>)
        1    0.000    0.000    0.000    0.000 shlex.py:21(shlex)
        1    0.000    0.000    0.000    0.000 shutil.py:31(Error)
        1    0.000    0.000    0.000    0.000 shutil.py:34(SpecialFileError)
        1    0.000    0.000    0.000    0.000 shutil.py:38(ExecError)
        1    0.000    0.000    0.000    0.000 signals.py:1(<module>)
        1    0.000    0.000    0.000    0.000 signals.py:9(_InterruptHandler)
        1    0.000    0.000    0.000    0.000 six.py:101(MovedModule)
        1    0.000    0.000    0.000    0.000 six.py:122(_LazyModule)
        1    0.000    0.000    0.000    0.000 six.py:136(Iterator)
        1    0.000    0.000    0.000    0.000 six.py:137(MovedAttribute)
        1    0.000    0.000    0.000    0.000 six.py:162(_SixMetaPathImporter)
        1    0.000    0.000    0.000    0.000 six.py:169(__init__)
        1    0.000    0.000    0.000    0.000 six.py:225(_MovedItems)
        1    0.000    0.000    0.000    0.000 six.py:309(Module_six_moves_urllib_parse)
        1    0.000    0.000    0.000    0.000 six.py:348(Module_six_moves_urllib_error)
        1    0.000    0.000    0.000    0.000 six.py:367(Module_six_moves_urllib_request)
        1    0.000    0.000    0.000    0.000 six.py:416(Module_six_moves_urllib_response)
        1    0.000    0.000    0.000    0.000 six.py:436(Module_six_moves_urllib_robotparser)
        1    0.000    0.000    0.000    0.000 six.py:453(Module_six_moves_urllib)
        1    0.000    0.000    0.000    0.000 six.py:53(X)
        1    0.000    0.000    0.000    0.000 six.py:532(Iterator)
        1    0.000    0.000    0.000    0.000 six.py:54(__len__)
        1    0.000    0.000    0.000    0.000 six.py:59(X)
        1    0.000    0.000    0.000    0.000 six.py:60(__len__)
        1    0.000    0.000    0.000    0.000 six.py:84(_LazyDescr)
        1    0.000    0.000    0.000    0.000 skip.py:30(Skip)
        1    0.000    0.000    0.000    0.000 slsqp.py:14(<module>)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:12(<module>)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:15(PerfectSeparationError)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:18(MissingDataError)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:22(X13NotFoundError)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:26(X13Error)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:32(X13Warning)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:36(IOWarning)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:40(ModuleUnavailableWarning)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:50(ConvergenceWarning)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:59(CacheWriteWarning)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:63(IterationLimitWarning)
        1    0.000    0.000    0.000    0.000 sm_exceptions.py:72(InvalidTestWarning)
        1    0.000    0.000    0.000    0.000 smartystreets.py:15(LiveAddress)
        1    0.000    0.000    0.000    0.000 smartystreets.py:3(<module>)
        1    0.000    0.000    0.000    0.000 smoothers_lowess.py:8(<module>)
        1    0.000    0.000    0.000    0.000 smpickle.py:1(<module>)
        1    0.000    0.000    0.000    0.000 socket.py:167(_closedsocket)
        1    0.000    0.000    0.000    0.000 socket.py:179(_socketobject)
        1    0.000    0.000    0.000    0.000 socket.py:235(_fileobject)
        1    0.000    0.000    0.000    0.000 special_matrices.py:1(<module>)
        1    0.000    0.000    0.000    0.000 specifiers.py:25(InvalidSpecifier)
        1    0.000    0.000    0.000    0.000 specifiers.py:31(BaseSpecifier)
        1    0.000    0.000    0.000    0.000 specifiers.py:588(SpecifierSet)
        1    0.000    0.000    0.000    0.000 specifiers.py:88(_IndividualSpecifier)
        1    0.000    0.000    0.000    0.000 spfun_stats.py:34(<module>)
        1    0.000    0.000    0.000    0.000 spines.py:1(<module>)
        1    0.000    0.000    0.000    0.000 spines.py:21(Spine)
        1    0.000    0.000    0.000    0.000 splines.py:77(BS)
        1    0.000    0.000    0.000    0.000 splines.py:8(<module>)
        1    0.000    0.000    0.000    0.000 sputils.py:2(<module>)
        1    0.000    0.000    0.000    0.000 sputils.py:234(IndexMixin)
        1    0.000    0.000    0.000    0.000 sql.py:1327(SQLiteTable)
        1    0.000    0.000    0.000    0.000 sql.py:1428(SQLiteDatabase)
        1    0.000    0.000    0.000    0.000 sql.py:27(SQLAlchemyRequired)
        1    0.000    0.000    0.000    0.000 sql.py:31(DatabaseError)
        1    0.000    0.000    0.000    0.000 sql.py:5(<module>)
        1    0.000    0.000    0.000    0.000 sql.py:603(SQLTable)
        1    0.000    0.000    0.000    0.000 sql.py:975(PandasSQL)
        1    0.000    0.000    0.000    0.000 sql.py:989(SQLDatabase)
        1    0.000    0.000    0.000    0.000 sre_parse.py:207(seek)
        1    0.000    0.000    0.000    0.000 sre_parse.py:85(checkgroup)
        1    0.000    0.000    0.000    0.000 ssl.py:100(SSLSocket)
        1    0.000    0.000    0.000    0.000 ssl.py:56(<module>)
        1    0.000    0.000    0.000    0.000 stackplot.py:8(<module>)
        1    0.000    0.000    0.000    0.000 statGeneral.py:133(EIGP)
        1    0.000    0.000    0.000    0.000 statGeneral.py:14(GaussianProcess)
        1    0.000    0.000    0.000    0.000 statGeneral.py:15(__init__)
        1    0.000    0.000    0.000    0.000 statGeneral.py:2(<module>)
        1    0.000    0.000    0.000    0.000 statGeneral.py:202(KG)
        1    0.000    0.000    0.000    0.000 statGeneral.py:25(SBOGP)
        1    0.000    0.000    0.000    0.000 statGeneral.py:26(__init__)
        1    0.000    0.000    0.000    0.000 statGeneral.py:285(PIGP)
        1    0.000    0.000    0.000    0.000 stata.py:1684(StataWriter)
        1    0.000    0.000    0.000    0.000 stata.py:431(PossiblePrecisionLoss)
        1    0.000    0.000    0.000    0.000 stata.py:440(ValueLabelTypeMismatch)
        1    0.000    0.000    0.000    0.000 stata.py:450(InvalidColumnName)
        1    0.000    0.000    0.000    0.000 stata.py:538(StataValueLabel)
        1    0.000    0.000    0.000    0.000 stata.py:663(StataMissingValue)
        1    0.000    0.000    0.000    0.000 stata.py:782(StataParser)
        1    0.000    0.000    0.000    0.000 stata.py:899(StataReader)
        1    0.000    0.000    0.000    0.000 state.py:126(Standardize)
        1    0.000    0.000    0.000    0.000 state.py:27(<module>)
        1    0.000    0.000    0.000    0.000 state.py:79(Center)
        1    0.000    0.000    0.000    0.000 stattools.py:23(ResultsStore)
        1    0.000    0.000    0.000    0.000 stattools.py:7(<module>)
        1    0.000    0.000    0.000    0.000 streamplot.py:185(StreamplotSet)
        1    0.000    0.000    0.000    0.000 streamplot.py:195(DomainMap)
        1    0.000    0.000    0.000    0.000 streamplot.py:255(Grid)
        1    0.000    0.000    0.000    0.000 streamplot.py:296(StreamMask)
        1    0.000    0.000    0.000    0.000 streamplot.py:345(InvalidIndexError)
        1    0.000    0.000    0.000    0.000 streamplot.py:349(TerminateTrajectory)
        1    0.000    0.000    0.000    0.000 streamplot.py:4(<module>)
        1    0.000    0.000    0.000    0.000 stride_tricks.py:14(DummyArray)
        1    0.000    0.000    0.000    0.000 stride_tricks.py:7(<module>)
        1    0.000    0.000    0.000    0.000 strings.py:1(<module>)
        1    0.000    0.000    0.000    0.000 strings.py:1015(StringMethods)
        1    0.000    0.000    0.000    0.000 subprocess.py:14(<module>)
        1    0.000    0.000    0.000    0.000 subprocess.py:400(CalledProcessError)
        1    0.000    0.000    0.000    0.000 subprocess.py:647(Popen)
        1    0.000    0.000    0.000    0.000 suite.py:1(<module>)
        1    0.000    0.000    0.000    0.000 suite.py:121(ContextSuite)
        1    0.000    0.000    0.000    0.000 suite.py:16(BaseTestSuite)
        1    0.000    0.000    0.000    0.000 suite.py:252(_ErrorHolder)
        1    0.000    0.000    0.000    0.000 suite.py:299(_DebugResult)
        1    0.000    0.000    0.000    0.000 suite.py:385(ContextSuiteFactory)
        1    0.000    0.000    0.000    0.000 suite.py:39(MixedContextError)
        1    0.000    0.000    0.000    0.000 suite.py:46(LazySuite)
        1    0.000    0.000    0.000    0.000 suite.py:557(ContextList)
        1    0.000    0.000    0.000    0.000 suite.py:570(FinalizingSuiteWrapper)
        1    0.000    0.000    0.000    0.000 suite.py:596(TestDir)
        1    0.000    0.000    0.000    0.000 suite.py:604(TestModule)
        1    0.000    0.000    0.000    0.000 suite.py:78(TestSuite)
        1    0.000    0.000    0.000    0.000 svar_model.py:34(SVAR)
        1    0.000    0.000    0.000    0.000 svar_model.py:450(SVARProcess)
        1    0.000    0.000    0.000    0.000 svar_model.py:504(SVARResults)
        1    0.000    0.000    0.000    0.000 svar_model.py:7(<module>)
        1    0.000    0.000    0.000    0.000 symbol.py:3(<module>)
        1    0.000    0.000    0.000    0.000 sysconfig.py:50(_python_build)
        1    0.000    0.000    0.000    0.000 sysconfig.py:518(get_platform)
        1    0.000    0.000    0.000    0.000 table.py:129(SimpleTable)
        1    0.000    0.000    0.000    0.000 table.py:149(Table)
        1    0.000    0.000    0.000    0.000 table.py:39(Cell)
        1    0.000    0.000    0.000    0.000 table.py:499(Row)
        1    0.000    0.000    0.000    0.000 table.py:634(Cell)
        1    0.000    0.000    0.000    0.000 table.py:84(<module>)
        1    0.000    0.000    0.000    0.000 tabledist.py:17(<module>)
        1    0.000    0.000    0.000    0.000 tabledist.py:25(TableDist)
        1    0.000    0.000    0.000    0.000 tabledist.py:48(__init__)
        1    0.000    0.000    0.000    0.000 tarfile.py:1475(TarFile)
        1    0.000    0.000    0.000    0.000 tarfile.py:2442(TarIter)
        1    0.000    0.000    0.000    0.000 tarfile.py:2481(_section)
        1    0.000    0.000    0.000    0.000 tarfile.py:2490(_data)
        1    0.000    0.000    0.000    0.000 tarfile.py:2497(_hole)
        1    0.000    0.000    0.000    0.000 tarfile.py:2502(_ringbuffer)
        1    0.000    0.000    0.000    0.000 tarfile.py:2528(TarFileCompat)
        1    0.000    0.000    0.000    0.000 tarfile.py:326(TarError)
        1    0.000    0.000    0.000    0.000 tarfile.py:329(ExtractError)
        1    0.000    0.000    0.000    0.000 tarfile.py:332(ReadError)
        1    0.000    0.000    0.000    0.000 tarfile.py:335(CompressionError)
        1    0.000    0.000    0.000    0.000 tarfile.py:338(StreamError)
        1    0.000    0.000    0.000    0.000 tarfile.py:341(HeaderError)
        1    0.000    0.000    0.000    0.000 tarfile.py:344(EmptyHeaderError)
        1    0.000    0.000    0.000    0.000 tarfile.py:347(TruncatedHeaderError)
        1    0.000    0.000    0.000    0.000 tarfile.py:350(EOFHeaderError)
        1    0.000    0.000    0.000    0.000 tarfile.py:353(InvalidHeaderError)
        1    0.000    0.000    0.000    0.000 tarfile.py:356(SubsequentHeaderError)
        1    0.000    0.000    0.000    0.000 tarfile.py:363(_LowLevelFile)
        1    0.000    0.000    0.000    0.000 tarfile.py:387(_Stream)
        1    0.000    0.000    0.000    0.000 tarfile.py:616(_StreamProxy)
        1    0.000    0.000    0.000    0.000 tarfile.py:640(_BZ2Proxy)
        1    0.000    0.000    0.000    0.000 tarfile.py:705(_FileInFile)
        1    0.000    0.000    0.000    0.000 tarfile.py:781(ExFileObject)
        1    0.000    0.000    0.000    0.000 tarfile.py:912(TarInfo)
        1    0.000    0.000    0.000    0.000 tdi.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tdi.py:80(TimedeltaIndex)
        1    0.000    0.000    0.000    0.000 tempfile.py:108(_RandomNameSequence)
        1    0.000    0.000    0.000    0.000 tempfile.py:120(__init__)
        1    0.000    0.000    0.000    0.000 tempfile.py:372(_TemporaryFileWrapper)
        1    0.000    0.000    0.000    0.000 tempfile.py:501(SpooledTemporaryFile)
        1    0.000    0.000    0.000    0.000 terminal.py:13(<module>)
        1    0.000    0.000    0.000    0.000 testing.py:1192(TestSubDict)
        1    0.000    0.000    0.000    0.000 testing.py:1268(optional_args)
        1    0.000    0.000    0.000    0.000 testing.py:1489(SimpleMock)
        1    0.000    0.000    0.000    0.000 testing.py:1625(_AssertRaisesContextmanager)
        1    0.000    0.000    0.000    0.000 testing.py:1740(RNGContext)
        1    0.000    0.000    0.000    0.000 testing.py:47(set_testing_mode)
        1    0.000    0.000    0.000    0.000 testing.py:63(TestCase)
        1    0.000    0.000    0.000    0.000 text.py:1070(TextWithDash)
        1    0.000    0.000    0.000    0.000 text.py:1437(OffsetFrom)
        1    0.000    0.000    0.000    0.000 text.py:1478(_AnnotationBase)
        1    0.000    0.000    0.000    0.000 text.py:149(Text)
        1    0.000    0.000    0.000    0.000 text.py:1728(Annotation)
        1    0.000    0.000    0.000    0.000 textpath.py:28(TextToPath)
        1    0.000    0.000    0.000    0.000 textpath.py:36(__init__)
        1    0.000    0.000    0.000    0.000 textpath.py:415(TextPath)
        1    0.000    0.000    0.000    0.000 threading.py:1058(_Timer)
        1    0.000    0.000    0.000    0.000 threading.py:1088(_MainThread)
        1    0.000    0.000    0.000    0.000 threading.py:1090(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:1097(_set_daemon)
        1    0.000    0.000    0.000    0.000 threading.py:1128(_DummyThread)
        1    0.000    0.000    0.000    0.000 threading.py:124(_RLock)
        1    0.000    0.000    0.000    0.000 threading.py:254(_Condition)
        1    0.000    0.000    0.000    0.000 threading.py:299(_is_owned)
        1    0.000    0.000    0.000    0.000 threading.py:372(notify)
        1    0.000    0.000    0.000    0.000 threading.py:399(notifyAll)
        1    0.000    0.000    0.000    0.000 threading.py:422(_Semaphore)
        1    0.000    0.000    0.000    0.000 threading.py:514(_BoundedSemaphore)
        1    0.000    0.000    0.000    0.000 threading.py:541(Event)
        1    0.000    0.000    0.000    0.000 threading.py:551(_Event)
        1    0.000    0.000    0.000    0.000 threading.py:56(_Verbose)
        1    0.000    0.000    0.000    0.000 threading.py:560(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:575(set)
        1    0.000    0.000    0.000    0.000 threading.py:640(Thread)
        1    0.000    0.000    0.000    0.000 threading.py:656(__init__)
        1    0.000    0.000    0.000    0.000 threading.py:789(_set_ident)
        1    0.000    0.000    0.000    0.000 ticker.py:1014(FixedLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:1055(NullLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:1075(LinearLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:1148(Base)
        1    0.000    0.000    0.000    0.000 ticker.py:1188(MultipleLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:1246(MaxNLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:1418(LogLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:1543(SymmetricalLogLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:161(_DummyAxis)
        1    0.000    0.000    0.000    0.000 ticker.py:1696(AutoLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:1701(AutoMinorLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:1765(OldAutoLocator)
        1    0.000    0.000    0.000    0.000 ticker.py:183(TickHelper)
        1    0.000    0.000    0.000    0.000 ticker.py:204(Formatter)
        1    0.000    0.000    0.000    0.000 ticker.py:247(IndexFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:267(NullFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:275(FixedFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:299(FuncFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:311(FormatStrFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:323(StrMethodFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:336(OldScalarFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:379(ScalarFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:640(LogFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:729(LogFormatterExponent)
        1    0.000    0.000    0.000    0.000 ticker.py:761(LogFormatterMathtext)
        1    0.000    0.000    0.000    0.000 ticker.py:809(EngFormatter)
        1    0.000    0.000    0.000    0.000 ticker.py:900(Locator)
        1    0.000    0.000    0.000    0.000 ticker.py:992(IndexLocator)
        1    0.000    0.000    0.000    0.000 tight_bbox.py:3(<module>)
        1    0.000    0.000    0.000    0.000 tile.py:3(<module>)
        1    0.000    0.000    0.000    0.000 tnc.py:33(<module>)
        1    0.000    0.000    0.000    0.000 token.py:3(<module>)
        1    0.000    0.000    0.000    0.000 tokenize.py:145(TokenError)
        1    0.000    0.000    0.000    0.000 tokenize.py:147(StopTokenizing)
        1    0.000    0.000    0.000    0.000 tokenize.py:178(Untokenizer)
        1    0.000    0.000    0.000    0.000 tokenize.py:45(any)
        1    0.000    0.000    0.000    0.000 tokens.py:13(<module>)
        1    0.000    0.000    0.000    0.000 tools.py:347(DateParseError)
        1    0.000    0.000    0.000    0.000 tools.py:554(Bunch)
        1    0.000    0.000    0.000    0.000 transforms.py:1045(TransformedBbox)
        1    0.000    0.000    0.000    0.000 transforms.py:1089(Transform)
        1    0.000    0.000    0.000    0.000 transforms.py:1488(TransformWrapper)
        1    0.000    0.000    0.000    0.000 transforms.py:1586(AffineBase)
        1    0.000    0.000    0.000    0.000 transforms.py:1593(__init__)
        1    0.000    0.000    0.000    0.000 transforms.py:1645(Affine2DBase)
        1    0.000    0.000    0.000    0.000 transforms.py:1734(Affine2D)
        1    0.000    0.000    0.000    0.000 transforms.py:1959(IdentityTransform)
        1    0.000    0.000    0.000    0.000 transforms.py:2005(BlendedGenericTransform)
        1    0.000    0.000    0.000    0.000 transforms.py:2121(BlendedAffine2D)
        1    0.000    0.000    0.000    0.000 transforms.py:2205(CompositeGenericTransform)
        1    0.000    0.000    0.000    0.000 transforms.py:2331(CompositeAffine2D)
        1    0.000    0.000    0.000    0.000 transforms.py:2417(BboxTransform)
        1    0.000    0.000    0.000    0.000 transforms.py:2460(BboxTransformTo)
        1    0.000    0.000    0.000    0.000 transforms.py:247(BboxBase)
        1    0.000    0.000    0.000    0.000 transforms.py:2499(BboxTransformToMaxOnly)
        1    0.000    0.000    0.000    0.000 transforms.py:2523(BboxTransformFrom)
        1    0.000    0.000    0.000    0.000 transforms.py:2559(ScaledTranslation)
        1    0.000    0.000    0.000    0.000 transforms.py:2588(TransformedPath)
        1    0.000    0.000    0.000    0.000 transforms.py:57(TransformNode)
        1    0.000    0.000    0.000    0.000 transforms.py:769(Bbox)
        1    0.000    0.000    0.000    0.000 transforms.py:85(__init__)
        1    0.000    0.000    0.000    0.000 triangulation.py:11(Triangulation)
        1    0.000    0.000    0.000    0.000 tricontour.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tricontour.py:12(TriContourSet)
        1    0.000    0.000    0.000    0.000 trifinder.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trifinder.py:10(TriFinder)
        1    0.000    0.000    0.000    0.000 trifinder.py:28(TrapezoidMapTriFinder)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1028(_DOF_estimator)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1096(_DOF_estimator_user)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1105(_DOF_estimator_geom)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1189(_DOF_estimator_min_E)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:1247(_Sparse_Matrix_coo)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:19(TriInterpolator)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:241(LinearTriInterpolator)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:297(CubicTriInterpolator)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:3(<module>)
        1    0.000    0.000    0.000    0.000 triinterpolate.py:610(_ReducedHCT_Element)
        1    0.000    0.000    0.000    0.000 tripcolor.py:1(<module>)
        1    0.000    0.000    0.000    0.000 triplot.py:1(<module>)
        1    0.000    0.000    0.000    0.000 trirefine.py:14(TriRefiner)
        1    0.000    0.000    0.000    0.000 trirefine.py:3(<module>)
        1    0.000    0.000    0.000    0.000 trirefine.py:51(UniformTriRefiner)
        1    0.000    0.000    0.000    0.000 tritools.py:13(TriAnalyzer)
        1    0.000    0.000    0.000    0.000 tritools.py:3(<module>)
        1    0.000    0.000    0.000    0.000 trivial.py:41(Dummy)
        1    0.000    0.000    0.000    0.000 tsa_model.py:238(TimeSeriesModelResults)
        1    0.000    0.000    0.000    0.000 tsa_model.py:244(TimeSeriesResultsWrapper)
        1    0.000    0.000    0.000    0.000 tsa_model.py:34(TimeSeriesModel)
        1    0.000    0.000    0.000    0.000 tsaplots.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tsatools.py:1(<module>)
        1    0.000    0.000    0.000    0.000 twodim_base.py:3(<module>)
        1    0.000    0.000    0.000    0.000 tz.py:104(tzlocal)
        1    0.000    0.000    0.000    0.000 tz.py:175(_ttinfo)
        1    0.000    0.000    0.000    0.000 tz.py:215(tzfile)
        1    0.000    0.000    0.000    0.000 tz.py:48(tzutc)
        1    0.000    0.000    0.000    0.000 tz.py:507(tzrange)
        1    0.000    0.000    0.000    0.000 tz.py:587(tzstr)
        1    0.000    0.000    0.000    0.000 tz.py:663(_tzicalvtzcomp)
        1    0.000    0.000    0.000    0.000 tz.py:674(_tzicalvtz)
        1    0.000    0.000    0.000    0.000 tz.py:73(tzoffset)
        1    0.000    0.000    0.000    0.000 tz.py:738(tzical)
        1    0.000    0.000    0.000    0.000 tzfile.py:16(_byte_string)
        1    0.000    0.000    0.000    0.000 tzfile.py:4(<module>)
        1    0.000    0.000    0.000    0.000 tzinfo.py:1(<module>)
        1    0.000    0.000    0.000    0.000 tzinfo.py:149(DstTzInfo)
        1    0.000    0.000    0.000    0.000 tzinfo.py:16(memorized_timedelta)
        1    0.000    0.000    0.000    0.000 tzinfo.py:59(BaseTzInfo)
        1    0.000    0.000    0.000    0.000 tzinfo.py:69(StaticTzInfo)
        1    0.000    0.000    0.000    0.000 ufunclike.py:5(<module>)
        1    0.000    0.000    0.000    0.000 unicode_escape.py:13(Codec)
        1    0.000    0.000    0.000    0.000 unicode_escape.py:20(IncrementalEncoder)
        1    0.000    0.000    0.000    0.000 unicode_escape.py:24(IncrementalDecoder)
        1    0.000    0.000    0.000    0.000 unicode_escape.py:28(StreamWriter)
        1    0.000    0.000    0.000    0.000 unicode_escape.py:31(StreamReader)
        1    0.000    0.000    0.000    0.000 unicode_escape.py:36(getregentry)
        1    0.000    0.000    0.000    0.000 unicode_escape.py:8(<module>)
        1    0.000    0.000    0.000    0.000 units.py:117(Registry)
        1    0.000    0.000    0.000    0.000 units.py:121(__init__)
        1    0.000    0.000    0.000    0.000 units.py:3(<module>)
        1    0.000    0.000    0.000    0.000 units.py:44(<module>)
        1    0.000    0.000    0.000    0.000 units.py:54(AxisInfo)
        1    0.000    0.000    0.000    0.000 units.py:75(ConversionInterface)
        1    0.000    0.000    0.000    0.000 urllib.py:1003(addinfourl)
        1    0.000    0.000    0.000    0.000 urllib.py:110(ContentTooShortError)
        1    0.000    0.000    0.000    0.000 urllib.py:116(URLopener)
        1    0.000    0.000    0.000    0.000 urllib.py:610(FancyURLopener)
        1    0.000    0.000    0.000    0.000 urllib.py:854(ftpwrapper)
        1    0.000    0.000    0.000    0.000 urllib.py:949(addbase)
        1    0.000    0.000    0.000    0.000 urllib.py:978(addclosehook)
        1    0.000    0.000    0.000    0.000 urllib.py:993(addinfo)
        1    0.000    0.000    0.000    0.000 urllib2.py:1072(HTTPDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:1090(ProxyDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:1102(AbstractHTTPHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:1211(HTTPHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:1219(HTTPSHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:1226(HTTPCookieProcessor)
        1    0.000    0.000    0.000    0.000 urllib2.py:1244(UnknownHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:1308(FileHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:1360(FTPHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:137(URLError)
        1    0.000    0.000    0.000    0.000 urllib2.py:1420(CacheFTPHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:150(HTTPError)
        1    0.000    0.000    0.000    0.000 urllib2.py:197(Request)
        1    0.000    0.000    0.000    0.000 urllib2.py:311(OpenerDirector)
        1    0.000    0.000    0.000    0.000 urllib2.py:493(BaseHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:512(HTTPErrorProcessor)
        1    0.000    0.000    0.000    0.000 urllib2.py:529(HTTPDefaultErrorHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:533(HTTPRedirectHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:710(ProxyHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:753(HTTPPasswordMgr)
        1    0.000    0.000    0.000    0.000 urllib2.py:817(HTTPPasswordMgrWithDefaultRealm)
        1    0.000    0.000    0.000    0.000 urllib2.py:890(HTTPBasicAuthHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:902(ProxyBasicAuthHandler)
        1    0.000    0.000    0.000    0.000 urllib2.py:932(AbstractDigestAuthHandler)
        1    0.000    0.000    0.000    0.000 urlparse.py:120(SplitResult)
        1    0.000    0.000    0.000    0.000 urlparse.py:128(ParseResult)
        1    0.000    0.000    0.000    0.000 urlparse.py:73(ResultMixin)
        1    0.000    0.000    0.000    0.000 user_util.py:142(LookupFactor)
        1    0.000    0.000    0.000    0.000 user_util.py:9(<module>)
        1    0.000    0.000    0.000    0.000 util.py:171(Finalize)
        1    0.000    0.000    0.000    0.000 util.py:19(NullHandler)
        1    0.000    0.000    0.000    0.000 util.py:255(uniqueify_list)
        1    0.000    0.000    0.000    0.000 util.py:304(PushbackAdapter)
        1    0.000    0.000    0.000    0.000 util.py:330(ForkAwareThreadLock)
        1    0.000    0.000    0.000    0.000 util.py:340(ForkAwareLocal)
        1    0.000    0.000    0.000    0.000 util.py:375(_MiniPPrinter)
        1    0.000    0.000    0.000    0.000 util.py:4(<module>)
        1    0.000    0.000    0.000    0.000 util.py:473(SortAnythingKey)
        1    0.000    0.000    0.000    0.000 util.py:536(odict)
        1    0.000    0.000    0.000    0.000 util.py:7(<module>)
        1    0.000    0.000    0.000    0.000 utils.py:1481(WarningMessage)
        1    0.000    0.000    0.000    0.000 utils.py:1513(WarningManager)
        1    0.000    0.000    0.000    0.000 utils.py:1701(IgnoreException)
        1    0.000    0.000    0.000    0.000 utils.py:52(_Deprecate)
        1    0.000    0.000    0.000    0.000 utils.py:53(Dataset)
        1    0.000    0.000    0.000    0.000 utils.py:93(newfunc)
        1    0.000    0.000    0.000    0.000 utils.py:998(SafeEval)
        1    0.000    0.000    0.000    0.000 uu.py:31(<module>)
        1    0.000    0.000    0.000    0.000 uu.py:39(Error)
        1    0.000    0.000    0.000    0.000 uuid.py:53(UUID)
        1    0.000    0.000    0.000    0.000 var_model.py:1519(VARResultsWrapper)
        1    0.000    0.000    0.000    0.000 var_model.py:1533(FEVD)
        1    0.000    0.000    0.000    0.000 var_model.py:314(VAR)
        1    0.000    0.000    0.000    0.000 var_model.py:516(VARProcess)
        1    0.000    0.000    0.000    0.000 var_model.py:748(VARResults)
        1    0.000    0.000    0.000    0.000 varfuncs.py:10(VarianceFunction)
        1    0.000    0.000    0.000    0.000 varfuncs.py:146(Binomial)
        1    0.000    0.000    0.000    0.000 varfuncs.py:176(__init__)
        1    0.000    0.000    0.000    0.000 varfuncs.py:218(NegativeBinomial)
        1    0.000    0.000    0.000    0.000 varfuncs.py:246(__init__)
        1    0.000    0.000    0.000    0.000 varfuncs.py:3(<module>)
        1    0.000    0.000    0.000    0.000 varfuncs.py:65(Power)
        1    0.000    0.000    0.000    0.000 version.py:1(<module>)
        1    0.000    0.000    0.000    0.000 version.py:228(LooseVersion)
        1    0.000    0.000    0.000    0.000 version.py:23(<module>)
        1    0.000    0.000    0.000    0.000 version.py:32(Version)
        1    0.000    0.000    0.000    0.000 version.py:46(InvalidVersion)
        1    0.000    0.000    0.000    0.000 version.py:52(_BaseVersion)
        1    0.000    0.000    0.000    0.000 version.py:82(LegacyVersion)
        1    0.000    0.000    0.000    0.000 waveforms.py:7(<module>)
        1    0.000    0.000    0.000    0.000 wavelets.py:1(<module>)
        1    0.000    0.000    0.000    0.000 weakref.py:243(__init__)
        1    0.000    0.000    0.000    0.000 webbrowser.py:138(BaseBrowser)
        1    0.000    0.000    0.000    0.000 webbrowser.py:14(Error)
        1    0.000    0.000    0.000    0.000 webbrowser.py:143(__init__)
        1    0.000    0.000    0.000    0.000 webbrowser.py:157(GenericBrowser)
        1    0.000    0.000    0.000    0.000 webbrowser.py:161(__init__)
        1    0.000    0.000    0.000    0.000 webbrowser.py:184(BackgroundBrowser)
        1    0.000    0.000    0.000    0.000 webbrowser.py:204(UnixBrowser)
        1    0.000    0.000    0.000    0.000 webbrowser.py:284(Mozilla)
        1    0.000    0.000    0.000    0.000 webbrowser.py:297(Galeon)
        1    0.000    0.000    0.000    0.000 webbrowser.py:307(Chrome)
        1    0.000    0.000    0.000    0.000 webbrowser.py:319(Opera)
        1    0.000    0.000    0.000    0.000 webbrowser.py:330(Elinks)
        1    0.000    0.000    0.000    0.000 webbrowser.py:344(Konqueror)
        1    0.000    0.000    0.000    0.000 webbrowser.py:401(Grail)
        1    0.000    0.000    0.000    0.000 weightstats.py:33(<module>)
        1    0.000    0.000    0.000    0.000 weightstats.py:42(DescrStatsW)
        1    0.000    0.000    0.000    0.000 weightstats.py:607(CompareMeans)
        1    0.000    0.000    0.000    0.000 widgets.py:1084(SpanSelector)
        1    0.000    0.000    0.000    0.000 widgets.py:123(Button)
        1    0.000    0.000    0.000    0.000 widgets.py:1308(RectangleSelector)
        1    0.000    0.000    0.000    0.000 widgets.py:1593(LassoSelector)
        1    0.000    0.000    0.000    0.000 widgets.py:1692(Lasso)
        1    0.000    0.000    0.000    0.000 widgets.py:249(Slider)
        1    0.000    0.000    0.000    0.000 widgets.py:26(LockDraw)
        1    0.000    0.000    0.000    0.000 widgets.py:460(CheckButtons)
        1    0.000    0.000    0.000    0.000 widgets.py:595(RadioButtons)
        1    0.000    0.000    0.000    0.000 widgets.py:64(Widget)
        1    0.000    0.000    0.000    0.000 widgets.py:72(AxesWidget)
        1    0.000    0.000    0.000    0.000 widgets.py:724(SubplotTool)
        1    0.000    0.000    0.000    0.000 widgets.py:873(Cursor)
        1    0.000    0.000    0.000    0.000 widgets.py:967(MultiCursor)
        1    0.000    0.000    0.000    0.000 wrapper.py:1(<module>)
        1    0.000    0.000    0.000    0.000 wrapper.py:7(ResultsWrapper)
        1    0.000    0.000    0.000    0.000 x13.py:203(Spec)
        1    0.000    0.000    0.000    0.000 x13.py:224(SeriesSpec)
        1    0.000    0.000    0.000    0.000 x13.py:30(_freq_to_period)
        1    0.000    0.000    0.000    0.000 x13.py:586(X13ArimaAnalysisResult)
        1    0.000    0.000    0.000    0.000 x13.py:9(<module>)
        1    0.000    0.000    0.000    0.000 yandex.py:19(Yandex)
        1    0.000    0.000    0.000    0.000 yandex.py:3(<module>)
        1    0.000    0.000    0.000    0.000 zeros.py:1(<module>)
        1    0.000    0.000    0.000    0.000 zeros.py:20(RootResults)
        1    0.000    0.000    0.000    0.000 zipfile.py:1243(__del__)
        1    0.000    0.000    0.000    0.000 zipfile.py:1353(PyZipFile)
        1    0.000    0.000    0.000    0.000 zipfile.py:158(_EndRecData64)
        1    0.000    0.000    0.000    0.000 zipfile.py:20(BadZipfile)
        1    0.000    0.000    0.000    0.000 zipfile.py:201(_EndRecData)
        1    0.000    0.000    0.000    0.000 zipfile.py:24(LargeZipFile)
        1    0.000    0.000    0.000    0.000 zipfile.py:262(ZipInfo)
        1    0.000    0.000    0.000    0.000 zipfile.py:420(_ZipDecrypter)
        1    0.000    0.000    0.000    0.000 zipfile.py:433(_GenerateCRCTable)
        1    0.000    0.000    0.000    0.000 zipfile.py:705(ZipFile)
        1    0.000    0.000    0.000    0.000 zipfile.py:793(__enter__)
        1    0.000    0.000    0.000    0.000 zipfile.py:796(__exit__)
        1    0.000    0.000    0.000    0.000 zipfile.py:868(namelist)
        1    0.000    0.000    0.000    0.000 {_ctypes.set_conversion_mode}
        1    0.000    0.000    0.000    0.000 {_hashlib.openssl_md5}
        1    0.000    0.000    0.000    0.000 {_hashlib.openssl_sha1}
        1    0.000    0.000    0.000    0.000 {_hashlib.openssl_sha224}
        1    0.000    0.000    0.000    0.000 {_hashlib.openssl_sha256}
        1    0.000    0.000    0.000    0.000 {_hashlib.openssl_sha384}
        1    0.000    0.000    0.000    0.000 {_hashlib.openssl_sha512}
        1    0.000    0.000    0.000    0.000 {_warnings.warn}
        1    0.000    0.000    0.000    0.000 {binascii.a2b_hex}
        1    0.000    0.000    0.000    0.000 {cStringIO.StringIO}
        1    0.000    0.000    0.000    0.000 {math.exp}
        1    0.000    0.000    0.000    0.000 {math.sqrt}
        1    0.000    0.000    0.000    0.000 {method 'copy' of 'dictproxy' objects}
        1    0.000    0.000    0.000    0.000 {method 'dirichlet' of 'mtrand.RandomState' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {method 'discard' of 'set' objects}
        1    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}
        1    0.000    0.000    0.000    0.000 {method 'find_module' of 'zipimport.zipimporter' objects}
        1    0.000    0.000    0.000    0.000 {method 'item' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 {method 'mean' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 {method 'rand' of 'mtrand.RandomState' objects}
        1    0.000    0.000    0.000    0.000 {method 'randn' of 'mtrand.RandomState' objects}
        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'unicode' objects}
        1    0.000    0.000    0.000    0.000 {method 'seed' of 'mtrand.RandomState' objects}
        1    0.000    0.000    0.000    0.000 {method 'tell' of 'file' objects}
        1    0.000    0.000    0.000    0.000 {method 'view' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 {numpy.core.multiarray.set_typeDict}
        1    0.000    0.000    0.000    0.000 {posix.getcwdu}
        1    0.000    0.000    0.000    0.000 {posix.sysconf}
        1    0.000    0.000    0.000    0.000 {posix.uname}
        1    0.000    0.000    0.000    0.000 {sys.getdefaultencoding}
        1    0.000    0.000    0.000    0.000 {sys.getfilesystemencoding}
        1    0.000    0.000    0.000    0.000 {time.localtime}
        1    0.000    0.000    0.000    0.000 {time.time}
        2    0.000    0.000    0.000    0.000 __config__.py:3(<module>)
        2    0.000    0.000    0.000    0.000 __init__.py:1122(setLevel)
        2    0.000    0.000    0.000    0.000 __init__.py:1688(_setup_prefix)
        2    0.000    0.000    0.000    0.000 __init__.py:1991(has_metadata)
        2    0.000    0.000    0.000    0.000 __init__.py:2033(__init__)
        2    0.000    0.000    0.000    0.000 __init__.py:239(POINTER)
        2    0.000    0.000    0.000    0.000 __init__.py:277(set_level)
        2    0.000    0.000    0.000    0.000 __init__.py:337(__init__)
        2    0.000    0.000    0.000    0.000 __init__.py:350(__getattr__)
        2    0.000    0.000    0.000    0.000 __init__.py:357(__getitem__)
        2    0.000    0.000    0.000    0.000 __init__.py:409(__init__)
        2    0.000    0.000    0.000    0.000 __init__.py:552(_get_xdg_config_dir)
        2    0.000    0.000    0.000    0.000 __init__.py:566(_get_xdg_cache_dir)
        2    0.000    0.000    0.000    0.000 _continuous_distns.py:147(_ppf)
        2    0.000    0.000    0.000    0.000 _continuous_distns.py:93(_norm_ppf)
        2    0.000    0.000    0.000    0.000 _distn_infrastructure.py:3169(get_distribution_names)
        2    0.000    0.000    0.000    0.000 _distn_infrastructure.py:501(valarray)
        2    0.000    0.000    0.000    0.000 _util.py:1(<module>)
        2    0.000    0.000    0.000    0.000 ascii.py:41(getregentry)
        2    0.000    0.000    0.000    0.000 calendar.py:50(<lambda>)
        2    0.000    0.000    0.000    0.000 calendar.py:52(__init__)
        2    0.000    0.000    0.000    0.000 calendar.py:71(__init__)
        2    0.000    0.000    0.000    0.000 cbook.py:1657(__init__)
        2    0.000    0.000    0.000    0.000 common.py:1(<module>)
        2    0.000    0.000    0.000    0.000 common.py:1805(_validate_date_like_dtype)
        2    0.000    0.000    0.000    0.000 common.py:2603(is_list_like)
        2    0.000    0.000    0.000    0.000 config.py:476(deprecate_option)
        2    0.000    0.000    0.000    0.000 copy_reg.py:14(pickle)
        2    0.000    0.000    0.000    0.000 copy_reg.py:27(constructor)
        2    0.000    0.000    0.000    0.000 core.py:808(__init__)
        2    0.000    0.000    0.000    0.000 data.py:4(<module>)
        2    0.000    0.000    0.000    0.000 datetools.py:1(<module>)
        2    0.000    0.000    0.000    0.000 decorators.py:57(setastest)
        2    0.000    0.000    0.000    0.000 decorators.py:85(set_test)
        2    0.000    0.000    0.000    0.000 errorclass.py:117(__init__)
        2    0.000    0.000    0.000    0.000 errorclass.py:126(__iter__)
        2    0.000    0.000    0.000    0.000 expr.py:136(_is_type)
        2    0.000    0.000    0.000    0.000 font_manager.py:979(__init__)
        2    0.000    0.000    0.000    0.000 font_manager.py:983(make_rcparams_key)
        2    0.000    0.000    0.000    0.000 getlimits.py:148(<lambda>)
        2    0.000    0.000    0.000    0.000 index.py:243(__len__)
        2    0.000    0.000    0.000    0.000 index.py:2628(_make_invalid_op)
        2    0.000    0.000    0.000    0.000 index.py:2734(_add_logical_methods)
        2    0.000    0.000    0.000    0.000 index_tricks.py:148(__init__)
        2    0.000    0.000    0.000    0.000 index_tricks.py:647(__init__)
        2    0.000    0.000    0.000    0.000 infix_parser.py:41(__init__)
        2    0.000    0.000    0.000    0.000 info.py:20(<module>)
        2    0.000    0.000    0.000    0.000 lazy.py:135(__new__)
        2    0.000    0.000    0.000    0.000 lazy.py:140(LazySet)
        2    0.000    0.000    0.000    0.000 lazy.py:80(__new__)
        2    0.000    0.000    0.000    0.000 lazy.py:87(LazyList)
        2    0.000    0.000    0.000    0.000 legend_handler.py:219(__init__)
        2    0.000    0.000    0.000    0.000 locale.py:347(normalize)
        2    0.000    0.000    0.000    0.000 locale.py:415(_parse_localename)
        2    0.000    0.000    0.000    0.000 locale.py:514(getlocale)
        2    0.000    0.000    0.000    0.000 mlab.py:3080(__init__)
        2    0.000    0.000    0.000    0.000 mlab.py:3091(__init__)
        2    0.000    0.000    0.000    0.000 numeric.py:1717(set_string_function)
        2    0.000    0.000    0.000    0.000 offsets.py:1437(__init__)
        2    0.000    0.000    0.000    0.000 offsets.py:1574(__init__)
        2    0.000    0.000    0.000    0.000 panel.py:24(__init__)
        2    0.000    0.000    0.000    0.000 parsers.py:334(_make_parser_function)
        2    0.000    0.000    0.000    0.000 pyparsing.py:1397(__invert__)
        2    0.000    0.000    0.000    0.000 pyparsing.py:2146(__init__)
        2    0.000    0.000    0.000    0.000 pyparsing.py:2177(__init__)
        2    0.000    0.000    0.000    0.000 pyparsing.py:2697(__init__)
        2    0.000    0.000    0.000    0.000 pyparsing.py:2828(__str__)
        2    0.000    0.000    0.000    0.000 pyparsing.py:467(__getattr__)
        2    0.000    0.000    0.000    0.000 pyparsing.py:489(<lambda>)
        2    0.000    0.000    0.000    0.000 random.py:100(seed)
        2    0.000    0.000    0.000    0.000 random.py:91(__init__)
        2    0.000    0.000    0.000    0.000 rcsetup.py:111(validate_float_or_None)
        2    0.000    0.000    0.000    0.000 rcsetup.py:168(validate_toolbar)
        2    0.000    0.000    0.000    0.000 rcsetup.py:220(__call__)
        2    0.000    0.000    0.000    0.000 rcsetup.py:292(validate_aspect)
        2    0.000    0.000    0.000    0.000 rcsetup.py:337(update_savefig_format)
        2    0.000    0.000    0.000    0.000 rcsetup.py:380(validate_negative_linestyle_legacy)
        2    0.000    0.000    0.000    0.000 rcsetup.py:419(validate_hinting)
        2    0.000    0.000    0.000    0.000 rcsetup.py:440(validate_bbox)
        2    0.000    0.000    0.000    0.000 rcsetup.py:449(validate_sketch)
        2    0.000    0.000    0.000    0.000 rcsetup.py:63(validate_any)
        2    0.000    0.000    0.000    0.000 rcsetup.py:67(validate_path_exists)
        2    0.000    0.000    0.000    0.000 rcsetup.py:89(validate_bool_maybe_none)
        2    0.000    0.000    0.000    0.000 re.py:274(filter)
        2    0.000    0.000    0.000    0.000 shape_base.py:1(<module>)
        2    0.000    0.000    0.000    0.000 six.py:185(__get_module)
        2    0.000    0.000    0.000    0.000 six.py:191(load_module)
        2    0.000    0.000    0.000    0.000 sre_parse.py:790(expand_template)
        2    0.000    0.000    0.000    0.000 stat.py:49(S_ISREG)
        2    0.000    0.000    0.000    0.000 threading.py:241(Condition)
        2    0.000    0.000    0.000    0.000 threading.py:259(__init__)
        2    0.000    0.000    0.000    0.000 tokenize.py:46(maybe)
        2    0.000    0.000    0.000    0.000 util.py:47(compose)
        2    0.000    0.000    0.000    0.000 webbrowser.py:20(register)
        2    0.000    0.000    0.000    0.000 zipfile.py:1247(close)
        2    0.000    0.000    0.000    0.000 {_csv.register_dialect}
        2    0.000    0.000    0.000    0.000 {_ctypes.dlopen}
        2    0.000    0.000    0.000    0.000 {_locale.setlocale}
        2    0.000    0.000    0.000    0.000 {binascii.hexlify}
        2    0.000    0.000    0.000    0.000 {built-in method utcfromtimestamp}
        2    0.000    0.000    0.000    0.000 {function seed at 0x1c41cf8}
        2    0.000    0.000    0.000    0.000 {method 'find_module' of 'imp.NullImporter' objects}
        2    0.000    0.000    0.000    0.000 {method 'title' of 'str' objects}
        2    0.000    0.000    0.000    0.000 {method 'toordinal' of 'datetime.date' objects}
        2    0.000    0.000    0.000    0.000 {numpy.core.multiarray.datetime_data}
        2    0.000    0.000    0.000    0.000 {numpy.core.multiarray.set_string_function}
        2    0.000    0.000    0.000    0.000 {reduce}
        3    0.000    0.000    0.000    0.000 __init__.py:118(compare_versions)
        3    0.000    0.000    0.000    0.000 __init__.py:1818(_zipinfo_name)
        3    0.000    0.000    0.000    0.000 __init__.py:2046(register_finder)
        3    0.000    0.000    0.000    0.000 __init__.py:2138(register_namespace_handler)
        3    0.000    0.000    0.000    0.000 __init__.py:2269(yield_lines)
        3    0.000    0.000    0.000    0.000 __init__.py:413(register_loader_type)
        3    0.000    0.000    0.000    0.000 __init__.py:691(_get_data_path_cached)
        3    0.000    0.000    0.000    0.000 __init__.py:952(__init__)
        3    0.000    0.000    0.000    0.000 _abcoll.py:98(__subclasshook__)
        3    0.000    0.000    0.000    0.000 _cm.py:98(get_color_function)
        3    0.000    0.000    0.000    0.000 _inspect.py:161(<lambda>)
        3    0.000    0.000    0.000    0.000 _version.py:136(__lt__)
        3    0.000    0.000    0.000    0.000 _version.py:148(__gt__)
        3    0.000    0.000    0.000    0.000 base.py:182(__init__)
        3    0.000    0.000    0.000    0.000 base.py:318(_add_datetimelike_methods)
        3    0.000    0.000    0.000    0.000 core.py:747(__init__)
        3    0.000    0.000    0.000    0.000 core.py:796(__init__)
        3    0.000    0.000    0.000    0.000 decimal.py:3782(__init__)
        3    0.000    0.000    0.000    0.000 doccer.py:116(_doc)
        3    0.000    0.000    0.000    0.000 doccer.py:71(inherit_docstring_from)
        3    0.000    0.000    0.000    0.000 errorclass.py:104(__init__)
        3    0.000    0.000    0.000    0.000 expr.py:209(disallow)
        3    0.000    0.000    0.000    0.000 expr.py:217(disallowed)
        3    0.000    0.000    0.000    0.000 index.py:2661(_add_numeric_methods)
        3    0.000    0.000    0.000    0.000 index_tricks.py:242(__init__)
        3    0.000    0.000    0.000    0.000 legend_handler.py:181(__init__)
        3    0.000    0.000    0.000    0.000 legend_handler.py:293(__init__)
        3    0.000    0.000    0.000    0.000 numeric.py:351(extend_all)
        3    0.000    0.000    0.000    0.000 numerictypes.py:611(obj2sctype)
        3    0.000    0.000    0.000    0.000 offsets.py:438(__init__)
        3    0.000    0.000    0.000    0.000 power.py:161(__init__)
        3    0.000    0.000    0.000    0.000 pyparsing.py:2511(<genexpr>)
        3    0.000    0.000    0.000    0.000 pyparsing.py:3031(__init__)
        3    0.000    0.000    0.000    0.000 pytables.py:1382(__init__)
        3    0.000    0.000    0.000    0.000 pytables.py:1406(set_name)
        3    0.000    0.000    0.000    0.000 pytables.py:1421(set_pos)
        3    0.000    0.000    0.000    0.000 rcsetup.py:354(validate_ps_distiller)
        3    0.000    0.000    0.000    0.000 result.py:14(failfast)
        3    0.000    0.000    0.000    0.000 series.py:69(_coerce_method)
        3    0.000    0.000    0.000    0.000 sre_parse.py:703(parse_template)
        3    0.000    0.000    0.000    0.000 sre_parse.py:710(literal)
        3    0.000    0.000    0.000    0.000 threading.py:113(RLock)
        3    0.000    0.000    0.000    0.000 threading.py:131(__init__)
        3    0.000    0.000    0.000    0.000 util.py:42(_compose2)
        3    0.000    0.000    0.000    0.000 varfuncs.py:91(__init__)
        3    0.000    0.000    0.000    0.000 version.py:3(<module>)
        3    0.000    0.000    0.000    0.000 warnings.py:14(warnpy3k)
        3    0.000    0.000    0.000    0.000 warnings.py:318(__init__)
        3    0.000    0.000    0.000    0.000 warnings.py:339(__enter__)
        3    0.000    0.000    0.000    0.000 warnings.py:355(__exit__)
        3    0.000    0.000    0.000    0.000 {math.log10}
        3    0.000    0.000    0.000    0.000 {posix.urandom}
        4    0.000    0.000    0.000    0.000 __init__.py:101(CFunctionType)
        4    0.000    0.000    0.000    0.000 __init__.py:1988(__init__)
        4    0.000    0.000    0.000    0.000 __init__.py:2084(find_nothing)
        4    0.000    0.000    0.000    0.000 __init__.py:222(_declare_state)
        4    0.000    0.000    0.000    0.000 __init__.py:314(wrap)
        4    0.000    0.000    0.000    0.000 __init__.py:49(normalize_encoding)
        4    0.000    0.000    0.000    0.000 _kernel_base.py:385(__init__)
        4    0.000    0.000    0.000    0.000 _util.py:55(__init__)
        4    0.000    0.000    0.000    0.000 _version.py:151(__ge__)
        4    0.000    0.000    0.000    0.000 backend_bases.py:101(register_backend)
        4    0.000    0.000    0.000    0.000 codecs.py:77(__new__)
        4    0.000    0.000    0.000    0.000 common.py:1465(_interp_wrapper)
        4    0.000    0.000    0.000    0.000 common.py:8(<genexpr>)
        4    0.000    0.000    0.000    0.000 config.py:217(__init__)
        4    0.000    0.000    0.000    0.000 core.py:2446(__get__)
        4    0.000    0.000    0.000    0.000 core.py:92(doc_note)
        4    0.000    0.000    0.000    0.000 decorators.py:186(indent)
        4    0.000    0.000    0.000    0.000 docstring.py:39(__init__)
        4    0.000    0.000    0.000    0.000 fontconfig_pattern.py:161(_property)
        4    0.000    0.000    0.000    0.000 function_base.py:1331(trim_zeros)
        4    0.000    0.000    0.000    0.000 generic.py:165(_setup_axes)
        4    0.000    0.000    0.000    0.000 getlimits.py:147(<lambda>)
        4    0.000    0.000    0.000    0.000 index.py:166(_join_i8_wrapper)
        4    0.000    0.000    0.000    0.000 index.py:2751(_make_logical_function)
        4    0.000    0.000    0.000    0.000 legend_handler.py:164(__init__)
        4    0.000    0.000    0.000    0.000 polynomial.py:1038(__init__)
        4    0.000    0.000    0.000    0.000 proxy.py:25(proxied_attribute)
        4    0.000    0.000    0.000    0.000 pyparsing.py:259(__init__)
        4    0.000    0.000    0.000    0.000 pyparsing.py:3074(postParse)
        4    0.000    0.000    0.000    0.000 pyparsing.py:327(__setitem__)
        4    0.000    0.000    0.000    0.000 pyparsing.py:365(__len__)
        4    0.000    0.000    0.000    0.000 rcsetup.py:129(validate_fonttype)
        4    0.000    0.000    0.000    0.000 rcsetup.py:157(validate_backend)
        4    0.000    0.000    0.000    0.000 rcsetup.py:199(__call__)
        4    0.000    0.000    0.000    0.000 six.py:572(itervalues)
        4    0.000    0.000    0.000    0.000 six.py:67(_add_doc)
        4    0.000    0.000    0.000    0.000 sre_parse.py:213(isdigit)
        4    0.000    0.000    0.000    0.000 strings.py:984(_pat_wrapper)
        4    0.000    0.000    0.000    0.000 tdi.py:112(_join_i8_wrapper)
        4    0.000    0.000    0.000    0.000 tempfile.py:124(rng)
        4    0.000    0.000    0.000    0.000 tempfile.py:135(next)
        4    0.000    0.000    0.000    0.000 tempfile.py:216(_get_candidate_names)
        4    0.000    0.000    0.000    0.000 tempfile.py:48(_set_cloexec)
        4    0.000    0.000    0.000    0.000 uuid.py:101(__init__)
        4    0.000    0.000    0.000    0.000 warnings.py:74(simplefilter)
        4    0.000    0.000    0.000    0.000 {built-in method fromkeys}
        4    0.000    0.000    0.000    0.000 {method 'count' of 'list' objects}
        4    0.000    0.000    0.000    0.000 {method 'itervalues' of 'dict' objects}
        4    0.000    0.000    0.000    0.000 {method 'seek' of 'file' objects}
        4    0.000    0.000    0.000    0.000 {method 'tolist' of 'array.array' objects}
        4    0.000    0.000    0.000    0.000 {method 'tostring' of 'array.array' objects}
        4    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        5    0.000    0.000    0.000    0.000 UserDict.py:4(__init__)
        5    0.000    0.000    0.000    0.000 __init__.py:477(cast)
        5    0.000    0.000    0.000    0.000 cbook.py:1284(__init__)
        5    0.000    0.000    0.000    0.000 config.py:742(is_type_factory)
        5    0.000    0.000    0.000    0.000 config.py:790(is_one_of_factory)
        5    0.000    0.000    0.000    0.000 config.py:791(inner)
        5    0.000    0.000    0.000    0.000 core.py:37(is_style_file)
        5    0.000    0.000    0.000    0.000 decorators.py:146(__call__)
        5    0.000    0.000    0.000    0.000 excel.py:31(register_writer)
        5    0.000    0.000    0.000    0.000 fractions.py:280(_operator_fallbacks)
        5    0.000    0.000    0.000    0.000 generic.py:1038(_create_indexer)
        5    0.000    0.000    0.000    0.000 index.py:2639(_add_numeric_methods_disabled)
        5    0.000    0.000    0.000    0.000 iterative.py:70(set_docstring)
        5    0.000    0.000    0.000    0.000 iterative.py:71(combine)
        5    0.000    0.000    0.000    0.000 machar.py:99(<lambda>)
        5    0.000    0.000    0.000    0.000 offsets.py:1640(__init__)
        5    0.000    0.000    0.000    0.000 offsets.py:792(__init__)
        5    0.000    0.000    0.000    0.000 offsets.py:809(get_calendar)
        5    0.000    0.000    0.000    0.000 scale.py:488(get_scale_names)
        5    0.000    0.000    0.000    0.000 six.py:177(_get_module)
        5    0.000    0.000    0.000    0.000 weakref.py:47(__init__)
        5    0.000    0.000    0.000    0.000 {method 'rfind' of 'unicode' objects}
        6    0.000    0.000    0.000    0.000 __init__.py:963(is_url)
        6    0.000    0.000    0.000    0.000 blas.py:272(get_blas_funcs)
        6    0.000    0.000    0.000    0.000 case.py:210(addTypeEqualityFunc)
        6    0.000    0.000    0.000    0.000 categorical.py:25(_cat_compare_op)
        6    0.000    0.000    0.000    0.000 core.py:1059(__init__)
        6    0.000    0.000    0.000    0.000 core.py:779(__init__)
        6    0.000    0.000    0.000    0.000 decimal.py:515(__new__)
        6    0.000    0.000    0.000    0.000 decorators.py:131(__init__)
        6    0.000    0.000    0.000    0.000 function_base.py:9(linspace)
        6    0.000    0.000    0.000    0.000 hashlib.py:94(__get_openssl_constructor)
        6    0.000    0.000    0.000    0.000 index.py:2600(_make_compare)
        6    0.000    0.000    0.000    0.000 index.py:2771(_add_logical_methods_disabled)
        6    0.000    0.000    0.000    0.000 index.py:3251(_make_compare)
        6    0.000    0.000    0.000    0.000 index.py:66(_dt_index_cmp)
        6    0.000    0.000    0.000    0.000 nanops.py:691(make_nancomp)
        6    0.000    0.000    0.000    0.000 offsets.py:2250(_tick_comp)
        6    0.000    0.000    0.000    0.000 opcode.py:35(jrel_op)
        6    0.000    0.000    0.000    0.000 opcode.py:39(jabs_op)
        6    0.000    0.000    0.000    0.000 patches.py:1666(_pprint_table)
        6    0.000    0.000    0.000    0.000 period.py:61(_period_index_cmp)
        6    0.000    0.000    0.000    0.000 pyparsing.py:2095(__init__)
        6    0.000    0.000    0.000    0.000 pyparsing.py:2725(__init__)
        6    0.000    0.000    0.000    0.000 pyparsing.py:3035(postParse)
        6    0.000    0.000    0.000    0.000 pyparsing.py:3215(_escapeRegexRangeChars)
        6    0.000    0.000    0.000    0.000 pyparsing.py:3278(<genexpr>)
        6    0.000    0.000    0.000    0.000 pyparsing.py:3376(<lambda>)
        6    0.000    0.000    0.000    0.000 six.py:124(__init__)
        6    0.000    0.000    0.000    0.000 six.py:157(_resolve)
        6    0.000    0.000    0.000    0.000 state.py:39(stateful_transform)
        6    0.000    0.000    0.000    0.000 tdi.py:41(_td_index_cmp)
        6    0.000    0.000    0.000    0.000 tz.py:31(tzname_in_python2)
        6    0.000    0.000    0.000    0.000 {locals}
        6    0.000    0.000    0.000    0.000 {numpy.core.multiarray.result_type}
        6    0.000    0.000    0.000    0.000 {posix.getcwd}
        6    0.000    0.000    0.000    0.000 {posix.getpid}
        7    0.000    0.000    0.000    0.000 __future__.py:75(__init__)
        7    0.000    0.000    0.000    0.000 __future__.py:88(getMandatoryRelease)
        7    0.000    0.000    0.000    0.000 case.py:609(_deprecate)
        7    0.000    0.000    0.000    0.000 groupby.py:103(_groupby_function)
        7    0.000    0.000    0.000    0.000 legend_handler.py:134(__init__)
        7    0.000    0.000    0.000    0.000 nanops.py:54(__init__)
        7    0.000    0.000    0.000    0.000 nanops.py:58(__call__)
        7    0.000    0.000    0.000    0.000 parser.py:262(_convert)
        7    0.000    0.000    0.000    0.000 pyparsing.py:1337(__or__)
        7    0.000    0.000    0.000    0.000 pyparsing.py:2471(__init__)
        7    0.000    0.000    0.000    0.000 pyparsing.py:2809(__init__)
        7    0.000    0.000    0.000    0.000 pyparsing.py:848(setResultsName)
        7    0.000    0.000    0.000    0.000 relativedelta.py:13(__init__)
        7    0.000    0.000    0.000    0.000 rrule.py:56(__init__)
        7    0.000    0.000    0.000    0.000 specifiers.py:265(_require_version_compare)
        7    0.000    0.000    0.000    0.000 threading.py:58(__init__)
        8    0.000    0.000    0.000    0.000 base.py:129(_add_delegate_accessors)
        8    0.000    0.000    0.000    0.000 base.py:28(_join_i8_wrapper)
        8    0.000    0.000    0.000    0.000 config.py:783(inner)
        8    0.000    0.000    0.000    0.000 core.py:7290(__init__)
        8    0.000    0.000    0.000    0.000 core.py:7295(getdoc)
        8    0.000    0.000    0.000    0.000 decorators.py:8(deprecate)
        8    0.000    0.000    0.000    0.000 fontconfig_pattern.py:147(_name)
        8    0.000    0.000    0.000    0.000 frequencies.py:1125(<genexpr>)
        8    0.000    0.000    0.000    0.000 generic.py:4228(_make_logical_function)
        8    0.000    0.000    0.000    0.000 getlimits.py:255(min)
        8    0.000    0.000    0.000    0.000 mathtext.py:1703(__init__)
        8    0.000    0.000    0.000    0.000 moments.py:612(_require_min_periods)
        8    0.000    0.000    0.000    0.000 nonlin.py:222(_set_doc)
        8    0.000    0.000    0.000    0.000 offsets.py:1252(<genexpr>)
        8    0.000    0.000    0.000    0.000 pyparsing.py:3378(<genexpr>)
        8    0.000    0.000    0.000    0.000 six.py:73(_add_doc)
        8    0.000    0.000    0.000    0.000 version.py:292(__cmp__)
        8    0.000    0.000    0.000    0.000 {cmp}
        8    0.000    0.000    0.000    0.000 {fcntl.fcntl}
        9    0.000    0.000    0.000    0.000 __init__.py:504(_get_home)
        9    0.000    0.000    0.000    0.000 __init__.py:83(CFUNCTYPE)
        9    0.000    0.000    0.000    0.000 core.py:2433(__init__)
        9    0.000    0.000    0.000    0.000 core.py:2439(getdoc)
        9    0.000    0.000    0.000    0.000 decorator.py:63(__init__)
        9    0.000    0.000    0.000    0.000 doccer.py:187(unindent_string)
        9    0.000    0.000    0.000    0.000 extras.py:241(__init__)
        9    0.000    0.000    0.000    0.000 extras.py:245(getdoc)
        9    0.000    0.000    0.000    0.000 moments.py:628(_rolling_func)
        9    0.000    0.000    0.000    0.000 moments.py:874(_expanding_func)
        9    0.000    0.000    0.000    0.000 pyparsing.py:1784(__str__)
        9    0.000    0.000    0.000    0.000 rcsetup.py:466(__init__)
        9    0.000    0.000    0.000    0.000 {delattr}
       10    0.000    0.000    0.000    0.000 _version.py:78(_compare_version)
       10    0.000    0.000    0.000    0.000 generic.py:185(<genexpr>)
       10    0.000    0.000    0.000    0.000 generic.py:208(set_axis)
       10    0.000    0.000    0.000    0.000 getlimits.py:150(<lambda>)
       10    0.000    0.000    0.000    0.000 legend_handler.py:60(__init__)
       10    0.000    0.000    0.000    0.000 posixpath.py:258(expanduser)
       10    0.000    0.000    0.000    0.000 pyparsing.py:1793(charsAsStr)
       10    0.000    0.000    0.000    0.000 pyparsing.py:3240(<lambda>)
       10    0.000    0.000    0.000    0.000 pyparsing.py:3241(<lambda>)
       11    0.000    0.000    0.000    0.000 config.py:756(inner)
       11    0.000    0.000    0.000    0.000 decorator.py:134(update)
       11    0.000    0.000    0.000    0.000 nanops.py:32(__init__)
       11    0.000    0.000    0.000    0.000 nanops.py:40(__call__)
       11    0.000    0.000    0.000    0.000 opcode.py:31(name_op)
       11    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
       12    0.000    0.000    0.000    0.000 common.py:555(_view_wrapper)
       12    0.000    0.000    0.000    0.000 config.py:689(config_prefix)
       12    0.000    0.000    0.000    0.000 contextlib.py:12(__init__)
       12    0.000    0.000    0.000    0.000 contextlib.py:82(helper)
       12    0.000    0.000    0.000    0.000 copy_reg.py:95(_slotnames)
       12    0.000    0.000    0.000    0.000 ctypeslib.py:303(prep_simple)
       12    0.000    0.000    0.000    0.000 decorators.py:18(deprecate_kwarg)
       12    0.000    0.000    0.000    0.000 decorators.py:62(_deprecate_kwarg)
       12    0.000    0.000    0.000    0.000 fontconfig_pattern.py:141(_family)
       12    0.000    0.000    0.000    0.000 fontconfig_pattern.py:153(_families)
       12    0.000    0.000    0.000    0.000 generic.py:4279(_make_stat_function_ddof)
       12    0.000    0.000    0.000    0.000 getlimits.py:149(<lambda>)
       12    0.000    0.000    0.000    0.000 index.py:2705(_make_evaluate_unary)
       12    0.000    0.000    0.000    0.000 index.py:2775(_make_invalid_op)
       12    0.000    0.000    0.000    0.000 ops.py:633(_bool_method_SERIES)
       12    0.000    0.000    0.000    0.000 ops.py:861(_flex_comp_method_FRAME)
       12    0.000    0.000    0.000    0.000 ops.py:930(_comp_method_FRAME)
       12    0.000    0.000    0.000    0.000 period.py:35(_field_accessor)
       12    0.000    0.000    0.000    0.000 pyparsing.py:1543(setName)
       12    0.000    0.000    0.000    0.000 pyparsing.py:2181(parseImpl)
       12    0.000    0.000    0.000    0.000 pyparsing.py:3353(<lambda>)
       12    0.000    0.000    0.000    0.000 {method 'expandtabs' of 'unicode' objects}
       12    0.000    0.000    0.000    0.000 {method 'get' of 'dictproxy' objects}
       12    0.000    0.000    0.000    0.000 {thread.allocate_lock}
       13    0.000    0.000    0.000    0.000 __init__.py:70(_reexport)
       13    0.000    0.000    0.000    0.000 contextlib.py:54(contextmanager)
       13    0.000    0.000    0.000    0.000 frequencies.py:1122(<genexpr>)
       13    0.000    0.000    0.000    0.000 frequencies.py:1126(<genexpr>)
       13    0.000    0.000    0.000    0.000 offsets.py:1524(<genexpr>)
       13    0.000    0.000    0.000    0.000 path.py:199(_update_values)
       13    0.000    0.000    0.000    0.000 pyparsing.py:1423(leaveWhitespace)
       13    0.000    0.000    0.000    0.000 pyparsing.py:771(_trim_arity)
       13    0.000    0.000    0.000    0.000 pyparsing.py:885(setParseAction)
       13    0.000    0.000    0.000    0.000 sre_parse.py:205(tell)
       14    0.000    0.000    0.000    0.000 __init__.py:1054(_fixupParents)
       14    0.000    0.000    0.000    0.000 __init__.py:136(_check_size)
       14    0.000    0.000    0.000    0.000 __init__.py:210(_acquireLock)
       14    0.000    0.000    0.000    0.000 __init__.py:219(_releaseLock)
       14    0.000    0.000    0.000    0.000 array.py:22(_arith_method)
       14    0.000    0.000    0.000    0.000 calendar.py:74(__getitem__)
       14    0.000    0.000    0.000    0.000 common.py:2644(is_sequence)
       14    0.000    0.000    0.000    0.000 common.py:3191(pprint_thing)
       14    0.000    0.000    0.000    0.000 common.py:3219(as_escaped_unicode)
       14    0.000    0.000    0.000    0.000 decorators.py:162(__init__)
       14    0.000    0.000    0.000    0.000 expr.py:151(_filter_nodes)
       14    0.000    0.000    0.000    0.000 generic.py:182(<genexpr>)
       14    0.000    0.000    0.000    0.000 numerictypes.py:185(english_capitalize)
       14    0.000    0.000    0.000    0.000 posixpath.py:119(basename)
       14    0.000    0.000    0.000    0.000 pyparsing.py:368(__iter__)
       14    0.000    0.000    0.000    0.000 series.py:38(_arith_method)
       14    0.000    0.000    0.000    0.000 threading.py:146(acquire)
       14    0.000    0.000    0.000    0.000 threading.py:186(release)
       15    0.000    0.000    0.000    0.000 __init__.py:1110(__init__)
       15    0.000    0.000    0.000    0.000 __init__.py:123(iteritems)
       15    0.000    0.000    0.000    0.000 __init__.py:578(__init__)
       15    0.000    0.000    0.000    0.000 getlimits.py:269(max)
       15    0.000    0.000    0.000    0.000 strings.py:970(_noarg_wrapper)
       16    0.000    0.000    0.000    0.000 common.py:69(create_pandas_abc_type)
       16    0.000    0.000    0.000    0.000 generic.py:4327(_make_cum_function)
       16    0.000    0.000    0.000    0.000 pyparsing.py:261(__getitem__)
       16    0.000    0.000    0.000    0.000 pyparsing.py:486(__iadd__)
       16    0.000    0.000    0.000    0.000 rcsetup.py:301(validate_fontsize)
       16    0.000    0.000    0.000    0.000 version.py:263(__init__)
       16    0.000    0.000    0.000    0.000 version.py:268(parse)
       16    0.000    0.000    0.000    0.000 wrapper.py:80(union_dicts)
       16    0.000    0.000    0.000    0.000 {method 'split' of '_sre.SRE_Pattern' objects}
       17    0.000    0.000    0.000    0.000 __init__.py:182(_checkLevel)
       17    0.000    0.000    0.000    0.000 posixpath.py:51(normcase)
       17    0.000    0.000    0.000    0.000 pyparsing.py:1859(__str__)
       17    0.000    0.000    0.000    0.000 pyparsing.py:2474(<genexpr>)
       17    0.000    0.000    0.000    0.000 pyparsing.py:2982(__init__)
       17    0.000    0.000    0.000    0.000 pyparsing.py:840(setName)
       17    0.000    0.000    0.000    0.000 strings.py:1006(copy)
       17    0.000    0.000    0.000    0.000 strings.py:1008(do_copy)
       17    0.000    0.000    0.000    0.000 {filter}
       18    0.000    0.000    0.000    0.000 atexit.py:37(register)
       18    0.000    0.000    0.000    0.000 cbook.py:140(deprecated)
       18    0.000    0.000    0.000    0.000 cbook.py:53(_generate_deprecation_message)
       18    0.000    0.000    0.000    0.000 config.py:719(wrap)
       18    0.000    0.000    0.000    0.000 core.py:913(__init__)
       18    0.000    0.000    0.000    0.000 data.py:85(_create_method)
       18    0.000    0.000    0.000    0.000 re.py:248(_compile_repl)
       18    0.000    0.000    0.000    0.000 re.py:268(_subx)
       18    0.000    0.000    0.000    0.000 textwrap.py:374(dedent)
       18    0.000    0.000    0.000    0.000 {method 'findall' of '_sre.SRE_Pattern' objects}
       19    0.000    0.000    0.000    0.000 __init__.py:75(__init__)
       19    0.000    0.000    0.000    0.000 dual.py:52(register_func)
       19    0.000    0.000    0.000    0.000 infix_parser.py:89(__init__)
       19    0.000    0.000    0.000    0.000 rcsetup.py:42(__init__)
       19    0.000    0.000    0.000    0.000 tokenize.py:44(group)
       20    0.000    0.000    0.000    0.000 UserDict.py:58(get)
       20    0.000    0.000    0.000    0.000 __init__.py:2987(cls)
       20    0.000    0.000    0.000    0.000 index.py:43(_field_accessor)
       20    0.000    0.000    0.000    0.000 pyparsing.py:1749(parseImpl)
       20    0.000    0.000    0.000    0.000 {method 'release' of 'thread.lock' objects}
       20    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}
       21    0.000    0.000    0.000    0.000 numerictypes.py:220(_evalname)
       21    0.000    0.000    0.000    0.000 rcsetup.py:472(__call__)
       21    0.000    0.000    0.000    0.000 {method 'acquire' of 'thread.lock' objects}
       22    0.000    0.000    0.000    0.000 decorator.py:195(<genexpr>)
       22    0.000    0.000    0.000    0.000 expr.py:228(_op_maker)
       22    0.000    0.000    0.000    0.000 offsets.py:171(__init__)
       22    0.000    0.000    0.000    0.000 offsets.py:177(_determine_offset)
       22    0.000    0.000    0.000    0.000 offsets.py:182(<genexpr>)
       23    0.000    0.000    0.000    0.000 __init__.py:303(report)
       23    0.000    0.000    0.000    0.000 __init__.py:335(ge)
       23    0.000    0.000    0.000    0.000 base.py:157(_create_delegator_method)
       23    0.000    0.000    0.000    0.000 core.py:6063(__init__)
       23    0.000    0.000    0.000    0.000 core.py:6068(getdoc)
       23    0.000    0.000    0.000    0.000 python.py:175(iteritems)
       23    0.000    0.000    0.000    0.000 {_struct.calcsize}
       24    0.000    0.000    0.000    0.000 getlimits.py:13(_frz)
       24    0.000    0.000    0.000    0.000 ops.py:538(_comp_method_SERIES)
       24    0.000    0.000    0.000    0.000 pyparsing.py:1573(__init__)
       24    0.000    0.000    0.000    0.000 random.py:271(choice)
       24    0.000    0.000    0.000    0.000 {method 'random' of '_random.Random' objects}
       25    0.000    0.000    0.000    0.000 artist.py:33(allow_rasterization)
       25    0.000    0.000    0.000    0.000 getlimits.py:244(__init__)
       25    0.000    0.000    0.000    0.000 {method '__subclasshook__' of 'object' objects}
       26    0.000    0.000    0.000    0.000 calendar.py:55(__getitem__)
       26    0.000    0.000    0.000    0.000 numerictypes.py:233(bitname)
       26    0.000    0.000    0.000    0.000 offsets.py:43(apply_wraps)
       26    0.000    0.000    0.000    0.000 pyparsing.py:1058(resetCache)
       26    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
       27    0.000    0.000    0.000    0.000 core.py:834(__init__)
       27    0.000    0.000    0.000    0.000 decimal.py:3809(<genexpr>)
       27    0.000    0.000    0.000    0.000 decimal.py:3816(<genexpr>)
       27    0.000    0.000    0.000    0.000 {method '__subclasses__' of 'type' objects}
       27    0.000    0.000    0.000    0.000 {method 'clear' of 'dict' objects}
       28    0.000    0.000    0.000    0.000 _weakrefset.py:16(__init__)
       28    0.000    0.000    0.000    0.000 _weakrefset.py:20(__enter__)
       28    0.000    0.000    0.000    0.000 _weakrefset.py:26(__exit__)
       28    0.000    0.000    0.000    0.000 _weakrefset.py:52(_commit_removals)
       28    0.000    0.000    0.000    0.000 offsets.py:2475(<genexpr>)
       28    0.000    0.000    0.000    0.000 ops.py:460(_arith_method_SERIES)
       28    0.000    0.000    0.000    0.000 ops.py:707(_flex_method_SERIES)
       28    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
       29    0.000    0.000    0.000    0.000 nanops.py:34(<genexpr>)
       29    0.000    0.000    0.000    0.000 ordereddict.py:47(__setitem__)
       29    0.000    0.000    0.000    0.000 pyparsing.py:1475(__str__)
       29    0.000    0.000    0.000    0.000 rcsetup.py:121(validate_int)
       29    0.000    0.000    0.000    0.000 threading.py:63(_note)
       30    0.000    0.000    0.000    0.000 citiBikeExample.py:367(transformationDomainW)
       30    0.000    0.000    0.000    0.000 fromnumeric.py:2633(round_)
       30    0.000    0.000    0.000    0.000 index.py:2665(_make_evaluate_binop)
       30    0.000    0.000    0.000    0.000 numerictypes.py:451(_add_array_type)
       30    0.000    0.000    0.000    0.000 ops.py:991(_comp_method_PANEL)
       30    0.000    0.000    0.000    0.000 {method 'round' of 'numpy.ndarray' objects}
       30    0.000    0.000    0.000    0.000 {thread.get_ident}
       31    0.000    0.000    0.000    0.000 _inspect.py:159(formatargspec)
       31    0.000    0.000    0.000    0.000 _inspect.py:39(iscode)
       31    0.000    0.000    0.000    0.000 _inspect.py:61(getargs)
       31    0.000    0.000    0.000    0.000 sre_parse.py:128(__delitem__)
       32    0.000    0.000    0.000    0.000 generic.py:4177(_make_stat_function)
       32    0.000    0.000    0.000    0.000 {method 'endswith' of 'unicode' objects}
       32    0.000    0.000    0.000    0.000 {method 'groupdict' of '_sre.SRE_Match' objects}
       33    0.000    0.000    0.000    0.000 cm.py:28(_reverser)
       34    0.000    0.000    0.000    0.000 <string>:8(__new__)
       34    0.000    0.000    0.000    0.000 trivial.py:38(pep8)
       35    0.000    0.000    0.000    0.000 pyparsing.py:2607(__init__)
       37    0.000    0.000    0.000    0.000 UserDict.py:70(__contains__)
       37    0.000    0.000    0.000    0.000 __init__.py:961(_added_new)
       38    0.000    0.000    0.000    0.000 __init__.py:1666(_fn)
       38    0.000    0.000    0.000    0.000 __init__.py:731(__iter__)
       38    0.000    0.000    0.000    0.000 {method 'strftime' of 'datetime.date' objects}
       39    0.000    0.000    0.000    0.000 {imp.acquire_lock}
       39    0.000    0.000    0.000    0.000 {imp.release_lock}
       40    0.000    0.000    0.000    0.000 _inspect.py:120(getargspec)
       40    0.000    0.000    0.000    0.000 _inspect.py:15(ismethod)
       40    0.000    0.000    0.000    0.000 _inspect.py:26(isfunction)
       40    0.000    0.000    0.000    0.000 index.py:2643(_make_invalid_op)
       40    0.000    0.000    0.000    0.000 numerictypes.py:158(english_upper)
       40    0.000    0.000    0.000    0.000 ops.py:176(_wrap_inplace_method)
       40    0.000    0.000    0.000    0.000 ops.py:960(_arith_method_PANEL)
       40    0.000    0.000    0.000    0.000 pyparsing.py:1846(parseImpl)
       41    0.000    0.000    0.000    0.000 abc.py:128(__instancecheck__)
       41    0.000    0.000    0.000    0.000 {method 'setter' of 'property' objects}
       42    0.000    0.000    0.000    0.000 colors.py:231(hex2color)
       42    0.000    0.000    0.000    0.000 decorator.py:105(<lambda>)
       42    0.000    0.000    0.000    0.000 panel.py:1446(_panel_arith_method)
       43    0.000    0.000    0.000    0.000 _inspect.py:163(<lambda>)
       44    0.000    0.000    0.000    0.000 six.py:103(__init__)
       45    0.000    0.000    0.000    0.000 _weakrefset.py:81(add)
       45    0.000    0.000    0.000    0.000 decorator.py:70(__iter__)
       45    0.000    0.000    0.000    0.000 rcsetup.py:54(__call__)
       45    0.000    0.000    0.000    0.000 {vars}
       47    0.000    0.000    0.000    0.000 docstring.py:48(update)
       47    0.000    0.000    0.000    0.000 {method 'tostring' of 'numpy.ndarray' objects}
       48    0.000    0.000    0.000    0.000 pyparsing.py:776(wrapper)
       48    0.000    0.000    0.000    0.000 rcsetup.py:279(validate_stringlist)
       48    0.000    0.000    0.000    0.000 {_ctypes.sizeof}
       50    0.000    0.000    0.000    0.000 base.py:145(_create_delegator_property)
       50    0.000    0.000    0.000    0.000 re.py:204(escape)
       51    0.000    0.000    0.000    0.000 six.py:173(_add_module)
       52    0.000    0.000    0.000    0.000 pyparsing.py:318(__getitem__)
       54    0.000    0.000    0.000    0.000 pyparsing.py:1540(__init__)
       54    0.000    0.000    0.000    0.000 pyparsing.py:401(haskeys)
       54    0.000    0.000    0.000    0.000 pyplot.py:2404(_autogen_docstring)
       54    0.000    0.000    0.000    0.000 six.py:569(iterkeys)
       54    0.000    0.000    0.000    0.000 {method 'iterkeys' of 'dict' objects}
       54    0.000    0.000    0.000    0.000 {method 'ljust' of 'str' objects}
       55    0.000    0.000    0.000    0.000 docstring.py:84(__init__)
       55    0.000    0.000    0.000    0.000 docstring.py:88(__call__)
       55    0.000    0.000    0.000    0.000 frequencies.py:278(<genexpr>)
       55    0.000    0.000    0.000    0.000 string.py:308(join)
       56    0.000    0.000    0.000    0.000 os.py:470(__setitem__)
       56    0.000    0.000    0.000    0.000 pyparsing.py:1592(parseImpl)
       56    0.000    0.000    0.000    0.000 {posix.putenv}
       56    0.000    0.000    0.000    0.000 {posix.unsetenv}
       57    0.000    0.000    0.000    0.000 {any}
       58    0.000    0.000    0.000    0.000 __init__.py:201(u_safe)
       58    0.000    0.000    0.000    0.000 abc.py:15(abstractmethod)
       59    0.000    0.000    0.000    0.000 pkgutil.py:173(__init__)
       60    0.000    0.000    0.000    0.000 optimization.py:62(__init__)
       60    0.000    0.000    0.000    0.000 python.py:201(get_function_name)
       61    0.000    0.000    0.000    0.000 __init__.py:871(__getitem__)
       61    0.000    0.000    0.000    0.000 optimization.py:14(__init__)
       65    0.000    0.000    0.000    0.000 _weakrefset.py:58(__iter__)
       65    0.000    0.000    0.000    0.000 copy_reg.py:92(__newobj__)
       65    0.000    0.000    0.000    0.000 {method '__reduce_ex__' of 'object' objects}
       66    0.000    0.000    0.000    0.000 trivial.py:39(<lambda>)
       66    0.000    0.000    0.000    0.000 zipfile.py:287(__init__)
       66    0.000    0.000    0.000    0.000 zipfile.py:377(_decodeFilename)
       66    0.000    0.000    0.000    0.000 zipfile.py:383(_decodeExtra)
       66    0.000    0.000    0.000    0.000 zipfile.py:900(getinfo)
       67    0.000    0.000    0.000    0.000 __init__.py:1757(<genexpr>)
       67    0.000    0.000    0.000    0.000 core.py:5776(isMaskedArray)
       67    0.000    0.000    0.000    0.000 {id}
       68    0.000    0.000    0.000    0.000 __init__.py:2025(__init__)
       68    0.000    0.000    0.000    0.000 lazy.py:92(lazy)
       68    0.000    0.000    0.000    0.000 ops.py:782(_arith_method_FRAME)
       68    0.000    0.000    0.000    0.000 pkgutil.py:366(get_importer)
       68    0.000    0.000    0.000    0.000 {method 'find' of 'str' objects}
       70    0.000    0.000    0.000    0.000 UserDict.py:18(__getitem__)
       70    0.000    0.000    0.000    0.000 pyparsing.py:366(__bool__)
       70    0.000    0.000    0.000    0.000 {method 'flatten' of 'numpy.ndarray' objects}
       71    0.000    0.000    0.000    0.000 {method 'groups' of '_sre.SRE_Match' objects}
       72    0.000    0.000    0.000    0.000 numerictypes.py:131(english_lower)
       72    0.000    0.000    0.000    0.000 pyparsing.py:1431(setWhitespaceChars)
       72    0.000    0.000    0.000    0.000 pyparsing.py:171(__init__)
       72    0.000    0.000    0.000    0.000 version.py:340(_parse_local_version)
       72    0.000    0.000    0.000    0.000 {method 'diagonal' of 'numpy.ndarray' objects}
       73    0.000    0.000    0.000    0.000 _weakrefset.py:68(__contains__)
       74    0.000    0.000    0.000    0.000 _inspect.py:152(strseq)
       74    0.000    0.000    0.000    0.000 genericpath.py:85(_splitext)
       74    0.000    0.000    0.000    0.000 posixpath.py:104(splitext)
       76    0.000    0.000    0.000    0.000 pyparsing.py:2353(<genexpr>)
       76    0.000    0.000    0.000    0.000 rcsetup.py:103(validate_float)
       79    0.000    0.000    0.000    0.000 docstring.py:121(copy_dedent)
       80    0.000    0.000    0.000    0.000 docstring.py:100(copy)
       80    0.000    0.000    0.000    0.000 docstring.py:102(do_copy)
       81    0.000    0.000    0.000    0.000 cbook.py:672(iterable)
       81    0.000    0.000    0.000    0.000 six.py:139(__init__)
       82    0.000    0.000    0.000    0.000 pyparsing.py:2243(<genexpr>)
       86    0.000    0.000    0.000    0.000 lazy.py:145(lazy)
       87    0.000    0.000    0.000    0.000 pyparsing.py:1481(streamline)
       89    0.000    0.000    0.000    0.000 six.py:575(iteritems)
       90    0.000    0.000    0.000    0.000 version.py:360(<lambda>)
       94    0.000    0.000    0.000    0.000 collections.py:353(<genexpr>)
       94    0.000    0.000    0.000    0.000 collections.py:355(<genexpr>)
       94    0.000    0.000    0.000    0.000 pyparsing.py:3457(<genexpr>)
       94    0.000    0.000    0.000    0.000 {method 'isdigit' of 'str' objects}
       95    0.000    0.000    0.000    0.000 pyparsing.py:165(<genexpr>)
       97    0.000    0.000    0.000    0.000 pyparsing.py:3376(<genexpr>)
       98    0.000    0.000    0.000    0.000 docstring.py:44(__call__)
       98    0.000    0.000    0.000    0.000 sre_parse.py:216(isname)
      102    0.000    0.000    0.000    0.000 stat.py:40(S_ISDIR)
      103    0.000    0.000    0.000    0.000 abc.py:89(<genexpr>)
      103    0.000    0.000    0.000    0.000 expr.py:158(<lambda>)
      107    0.000    0.000    0.000    0.000 posixpath.py:127(dirname)
      108    0.000    0.000    0.000    0.000 {_struct.pack}
      108    0.000    0.000    0.000    0.000 {unichr}
      112    0.000    0.000    0.000    0.000 __init__.py:2645(__getattr__)
      115    0.000    0.000    0.000    0.000 posixpath.py:59(isabs)
      116    0.000    0.000    0.000    0.000 expr.py:153(<genexpr>)
      116    0.000    0.000    0.000    0.000 {sys._getframe}
      118    0.000    0.000    0.000    0.000 {method 'translate' of 'str' objects}
      119    0.000    0.000    0.000    0.000 opcode.py:27(def_op)
      120    0.000    0.000    0.000    0.000 rcsetup.py:47(func)
      122    0.000    0.000    0.000    0.000 expr.py:146(<lambda>)
      123    0.000    0.000    0.000    0.000 expr.py:148(<genexpr>)
      125    0.000    0.000    0.000    0.000 six.py:86(__init__)
      126    0.000    0.000    0.000    0.000 {method 'ljust' of 'unicode' objects}
      127    0.000    0.000    0.000    0.000 {method 'iteritems' of 'dict' objects}
      128    0.000    0.000    0.000    0.000 {method 'split' of 'unicode' objects}
      129    0.000    0.000    0.000    0.000 _weakrefset.py:36(__init__)
      130    0.000    0.000    0.000    0.000 pyparsing.py:807(__init__)
      132    0.000    0.000    0.000    0.000 linalg.py:101(get_linalg_error_extobj)
      132    0.000    0.000    0.000    0.000 linalg.py:124(_realType)
      132    0.000    0.000    0.000    0.000 linalg.py:198(_assertRankAtLeast2)
      132    0.000    0.000    0.000    0.000 linalg.py:209(_assertNdSquareness)
      132    0.000    0.000    0.000    0.000 {method '__array_prepare__' of 'numpy.ndarray' objects}
      136    0.000    0.000    0.000    0.000 pyparsing.py:938(preParse)
      144    0.000    0.000    0.000    0.000 _structures.py:43(__neg__)
      144    0.000    0.000    0.000    0.000 colors.py:502(__init__)
      144    0.000    0.000    0.000    0.000 colors.py:676(__init__)
      147    0.000    0.000    0.000    0.000 inspect.py:472(getmodule)
      147    0.000    0.000    0.000    0.000 inspect.py:51(ismodule)
      151    0.000    0.000    0.000    0.000 ops.py:33(<lambda>)
      152    0.000    0.000    0.000    0.000 {method 'find' of 'unicode' objects}
      153    0.000    0.000    0.000    0.000 decorators.py:125(__init__)
      153    0.000    0.000    0.000    0.000 decorators.py:131(__call__)
      155    0.000    0.000    0.000    0.000 expr.py:198(_node_not_implemented)
      156    0.000    0.000    0.000    0.000 version.py:273(<lambda>)
      158    0.000    0.000    0.000    0.000 cbook.py:681(is_string_like)
      158    0.000    0.000    0.000    0.000 ops.py:35(<lambda>)
      162    0.000    0.000    0.000    0.000 pyparsing.py:953(postParse)
      168    0.000    0.000    0.000    0.000 sre_parse.py:67(__init__)
      168    0.000    0.000    0.000    0.000 {_sre.compile}
      169    0.000    0.000    0.000    0.000 functools.py:39(wraps)
      169    0.000    0.000    0.000    0.000 inspect.py:849(<lambda>)
      170    0.000    0.000    0.000    0.000 {method '__contains__' of 'frozenset' objects}
      181    0.000    0.000    0.000    0.000 {_struct.unpack}
      182    0.000    0.000    0.000    0.000 {method 'start' of '_sre.SRE_Match' objects}
      187    0.000    0.000    0.000    0.000 pyparsing.py:1698(<genexpr>)
      194    0.000    0.000    0.000    0.000 decorators.py:73(__init__)
      200    0.000    0.000    0.000    0.000 colors.py:363(<genexpr>)
      201    0.000    0.000    0.000    0.000 __init__.py:833(<genexpr>)
      213    0.000    0.000    0.000    0.000 {method 'count' of 'str' objects}
      216    0.000    0.000    0.000    0.000 version.py:308(_parse_letter_version)
      222    0.000    0.000    0.000    0.000 __init__.py:2516(key)
      254    0.000    0.000    0.000    0.000 pyparsing.py:274(__new__)
      260    0.000    0.000    0.000    0.000 pyplot.py:2106(pad)
      264    0.000    0.000    0.000    0.000 linalg.py:111(isComplexType)
      264    0.000    0.000    0.000    0.000 {method 'read' of 'cStringIO.StringI' objects}
      272    0.000    0.000    0.000    0.000 inspect.py:838(strseq)
      279    0.000    0.000    0.000    0.000 {numpy.lib._compiled_base.add_docstring}
      282    0.000    0.000    0.000    0.000 version.py:217(<genexpr>)
      282    0.000    0.000    0.000    0.000 version.py:254(<genexpr>)
      285    0.000    0.000    0.000    0.000 sre_parse.py:72(opengroup)
      285    0.000    0.000    0.000    0.000 sre_parse.py:83(closegroup)
      286    0.000    0.000    0.000    0.000 {method 'remove' of 'list' objects}
      292    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}
      294    0.000    0.000    0.000    0.000 copy_reg.py:46(_reconstructor)
      294    0.000    0.000    0.000    0.000 ops.py:43(<lambda>)
      336    0.000    0.000    0.000    0.000 sre_compile.py:472(isstring)
      349    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}
      359    0.000    0.000    0.000    0.000 sre_compile.py:51(fixup)
      369    0.000    0.000    0.000    0.000 ops.py:112(<genexpr>)
      370    0.000    0.000    0.000    0.000 decorators.py:171(__init__)
      382    0.000    0.000    0.000    0.000 {method 'join' of 'unicode' objects}
      384    0.000    0.000    0.000    0.000 ops.py:37(names)
      4/2    0.000    0.000    0.000    0.000 common.py:1822(_get_dtype_from_object)
      409    0.000    0.000    0.000    0.000 artist.py:1001(aliased_name)
      409    0.000    0.000    0.000    0.000 {method 'mro' of 'type' objects}
      414    0.000    0.000    0.000    0.000 stat.py:55(S_ISLNK)
      415    0.000    0.000    0.000    0.000 common.py:116(bind_method)
      418    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}
      426    0.000    0.000    0.000    0.000 {method 'lower' of 'unicode' objects}
      450    0.000    0.000    0.000    0.000 {method 'replace' of 'unicode' objects}
      485    0.000    0.000    0.000    0.000 urllib.py:1203(<genexpr>)
      485    0.000    0.000    0.000    0.000 urlparse.py:331(<genexpr>)
      518    0.000    0.000    0.000    0.000 stat.py:24(S_IFMT)
      524    0.000    0.000    0.000    0.000 {repr}
      540    0.000    0.000    0.000    0.000 {globals}
      638    0.000    0.000    0.000    0.000 {method 'isalnum' of 'str' objects}
      662    0.000    0.000    0.000    0.000 sre_parse.py:210(isident)
      678    0.000    0.000    0.000    0.000 sre_parse.py:134(__setitem__)
      713    0.000    0.000    0.000    0.000 {_sre.getlower}
      732    0.000    0.000    0.000    0.000 collections.py:329(<genexpr>)
     1163    0.000    0.000    0.000    0.000 {method 'strip' of 'unicode' objects}
     1314    0.000    0.000    0.000    0.000 {method 'group' of '_sre.SRE_Match' objects}
     1341    0.000    0.000    0.000    0.000 _mathtext_data.py:1770(<genexpr>)
     1680    0.000    0.000    0.000    0.000 {callable}
     1730    0.000    0.000    0.000    0.000 sre_compile.py:24(_identityfunction)
     19/7    0.000    0.000    0.000    0.000 pyparsing.py:2647(streamline)
     2406    0.000    0.000    0.000    0.000 {ord}
     2479    0.000    0.000    0.000    0.000 {chr}
     2492    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}
     30/4    0.000    0.000    0.000    0.000 pyparsing.py:2292(streamline)
    316.60131387   335.73312786]]
    318.03757915   336.79325088]]
    320.00026146   332.9998769    366.99986339]]
    321.09039307   347.62198575   354.47382172]]
    321.35594134   384.3995089 ]]
    321.58636761   355.60564587   355.15292697]]
    324.44649044   382.29406782]]
    327.63970987   328.4014718 ]]
    327.67554485   327.63349281]]
    327.70990136   327.04670509]]
    327.71806394   326.88752984]]
    327.72517686   326.34217135]]
    328.06992827   339.10910992]]
    328.15769731   338.27904377]]
    328.45237098   336.261861  ]]
    328.52801488   335.20041685]]
    329.13696567   337.09502407]]
    329.50828289   338.14584605]]
    329.67975582   338.61170418]]
    329.9166993    339.23984864]]
    330.00658999   349.99729328   366.99598137]]
    330.01847349   340.89921012]]
    330.03937759   340.94773034]]
    330.59330778   340.96656916]]
    330.65507337   341.12067859]]
    330.83938733   341.57796563]]
    330.90040658   341.72855553]]
    331.06783412   349.76273278   366.89663059]]
    331.26111414   342.61107348]]
    331.30717429   338.83972419   364.35747757]]
    331.43740467   343.03798138]]
    331.55284133   343.31638945]]
    331.77784799   343.85703798]]
    331.99415423   344.3748186 ]]
    332.09881217   344.62480404]]
    332.53941914   345.67455948]]
    332.58525658   345.7835907 ]]
    332.84721627   346.40633497]]
    332.9546478    347.30699474]]
    332.96991714   346.69789026]]
    332.97033959   346.97181   ]]
    332.98241314   347.0096043 ]]
    332.99682929   347.04942589]]
    333.01337159   347.09131637]]
    333.06128242   352.07863159   409.11305868]]
    333.12101121   347.330463  ]]
    333.28375187   347.66933316]]
    333.31270943   347.72958007]]
    333.37140519   347.85221364]]
    333.46149084   352.37055903   409.60735386]]
    333.71051605   352.48873124   409.8271046 ]]
    333.71064061   348.58690663]]
    333.84245773   348.89897348]]
    333.90120327   348.73650592   367.44777574]]
    333.95439249   349.21875983]]
    333.96396682   349.24840458]]
    333.99986134   349.34774572]]
    334.11418616   349.60168082]]
    334.43951739   350.25721407]]
    334.55635216   358.83095422]]
    334.70464096   350.80514381]]
    334.97535582   352.89055837   410.47970533]]
    334.97840948   338.13117289   369.19462102]]
    335.12454396   351.70452549]]
    335.3682947    352.24529843]]
    335.46041743   352.45327394]]
    335.54933334   352.65583427]]
    335.75770879   353.13678908]]
    335.80002099   350.69490402]]
    336.00021778   336.0003073    376.00014573]]
    336.1338206    353.66959703]]
    336.15160095   354.06792686]]
    336.21467594   354.21930724]]
    336.27536817   354.36546849]]
    336.54602571   355.02257289]]
    336.59412908   355.1401761 ]]
    336.61748428   355.19735707]]
    336.64038613   355.25347926]]
    336.69583186   347.46205315   367.48606132]]
    336.78542538   353.13905271   410.685171  ]]
    336.78721656   355.61638128]]
    336.80626563   355.66400151]]
    336.83726099   354.13041498]]
    336.91179051   355.92960038]]
    337.00419556   356.16400424]]
    337.0324704    356.23593769]]
    337.33958277   356.89063782]]
    337.58661094   357.47739605]]
    337.66424704   364.55034638]]
    338.38919222   353.18811332   410.46273234]]
    338.57480162   353.59823335]]
    338.64135933   363.1900928 ]]
    338.69938066   338.73013087   373.18625298]]
    338.80600972   365.72318541]]
    339.02484895   346.16072591   367.23002432]]
    339.42138093   361.48121424]]
    339.53164137   365.80157282]]
    339.5818787    365.77119706]]
    339.7419504    365.63105333]]
    339.7463546    364.31719136]]
    339.7481624    364.32996003]]
    339.75009685   364.34332783]]
    339.75216674   364.35714005]]
    339.75438143   364.3714018 ]]
    339.75675085   364.386117  ]]
    339.77130931   364.46652868]]
    339.78697957   364.5387853 ]]
    339.81313238   364.63738923]]
    339.82601806   364.67859919]]
    339.86497776   364.78238182]]
    339.88848738   365.41207223]]
    339.8927598    364.84230316]]
    339.93275495   364.91493635]]
    339.96120409   364.96177049]]
    339.97778079   365.15737664]]
    339.98893241   365.03159694]]
    340.04858714   363.45360475]]
    340.05784511   363.48481881]]
    340.082489     363.56767127]]
    340.09295812   363.60276631]]
    340.13247882   363.73472394]]
    340.20398608   363.97155656]]
    340.24035394   364.09124696]]
    340.27118689   364.19242138]]
    340.31183008   364.32543004]]
    340.3202296    364.35312516]]
    340.35454138   364.46624416]]
    340.37196224   364.52371951]]
    340.38079133   364.55291827]]
    340.43543652   364.73502463]]
    340.48320437   364.89691163]]
    340.54354049   365.10648157]]
    340.5860439    365.25833786]]
    340.59333539   363.03596903]]
    340.6545959    365.51171193]]
    340.92941302   344.94782031   366.76008769]]
    340.93423778   339.77918848   376.49908648]]
    340.96126455   366.75086214]]
    341.01020939   366.95590035]]
    341.03314895   364.11273639]]
    341.0368763    367.06724609]]
    341.06509397   367.18512967]]
    341.10100855   364.14467381]]
    341.11290494   364.15020331]]
    341.20133442   364.19061647]]
    341.22836673   364.2027182 ]]
    341.27049516   364.22133467]]
    341.27627017   368.06473309]]
    341.32042681   368.24729817]]
    341.41891507   368.65208785]]
    341.58761478   364.3519795 ]]
    341.66722067   364.38265996]]
    341.84198689   364.44673254]]
    341.86973754   359.56676561]]
    341.91453065   370.63277665]]
    342.09104643   364.53134793]]
    342.11776185   364.54005167]]
    342.11868825   371.42121586]]
    342.28360265   364.59313848]]
    342.35547915   343.55147282   334.56033976]]
    342.52345687   343.85325724   366.13305778]]
    342.73577481   340.94383329   379.07982918]]
    342.78180348   364.74147773]]
    342.82152753   374.02926955]]
    342.95210423   342.37184394   337.29215481]]
    342.95617686   364.79089449]]
    342.98394141   320.70082297   323.01965936]]
    343.00498247   364.80477385]]
    343.0539569    364.81873201]]
    343.20509228   364.86225602]]
    343.22216751   344.16250383   332.32225802]]
    343.23122635   364.86992755]]
    343.2577065    364.87774818]]
    343.42462566   364.92823384]]
    343.46734917   322.32866135   314.43129881]]
    343.60283462   364.98563969]]
    343.66246149   365.00634818]]
    343.72216345   365.02752144]]
    343.87203493   342.87875582   365.40767702]]
    343.93815423   371.43339639]]
    343.97419407   383.70222879]]
    344.06198825   383.4698828 ]]
    344.07127151   341.97181845   381.02631979]]
    344.07281677   331.22901593]]
    344.40013576   365.33338263]]
    344.40819741   323.66467208   310.10469196]]
    344.55150303   359.22567   ]]
    344.84066342   352.62405634   407.17543316]]
    344.92008545   381.24421757]]
    344.96169607   365.53453661]]
    344.99081095   320.98143943   338.03323414]]
    345.01970436   342.01754503   364.62943743]]
    345.09077896   342.78360332   382.38151436]]
    345.11238198   341.09121674   340.98902216]]
    345.29361059   344.05411166   371.74414586]]
    345.36042182   365.66063196]]
    345.37961079   344.23074024   371.93934051]]
    345.43497834   344.55681773   372.35208992]]
    345.43516571   335.21175583   360.10626909]]
    345.44507529   365.68643141]]
    345.44575077   335.7385413    361.14582796]]
    345.52702069   336.17667188   362.00270806]]
    345.53146699   365.71243043]]
    345.58890313   343.89785265   371.54073773]]
    345.63084462   341.04922047   377.73136369]]
    345.63930951   339.07348806   374.54946432]]
    345.65708133   333.71453833   357.2449317 ]]
    345.66064445   336.55162461   362.71586028]]
    345.69460381   342.56623149   380.18812828]]
    345.69957227   369.5814718 ]]
    345.70969076   365.76497321]]
    345.71820393   336.52063882   370.42984502]]
    345.8016522    365.79148475]]
    345.82770968   343.73909897   382.10691133]]
    345.83560398   336.87898758   363.31053828]]
    345.85413162   345.10129964   372.84975022]]
    345.85762246   333.28035937   365.09227952]]
    345.86736049   343.36950589   383.22571211]]
    345.87834858   332.59293926   355.22225856]]
    345.88396028   324.89800665   349.32909953]]
    345.88970728   349.05406633   378.63933582]]
    345.90437414   329.3129091    358.21430506]]
    345.98501247   348.82318523   378.08427829]]
    346.00081187   341.25955224   363.8312663 ]]
    346.02891873   344.6719359    383.65849742]]
    346.04517416   337.16918055   363.80408401]]
    346.08059659   345.24084532   372.9198604 ]]
    346.09002843   349.6853088    381.21747328]]
    346.23084924   330.96797804   352.47946252]]
    346.24877511   325.50113212   306.23540574]]
    346.27595303   345.37657975   384.82026783]]
    346.28404827   337.42939188   364.21240832]]
    346.39843458   365.95247362]]
    346.45129551   343.96018893   371.14367379]]
    346.46516706   343.7547005    383.64146873]]
    346.53444989   345.82143129   385.48801614]]
    346.55653631   369.10820718]]
    346.66321205   349.7748846    382.53210402]]
    346.72678127   369.01855643]]
    346.74368917   346.28880027   374.1153138 ]]
    346.77952583   328.27940087   348.41423969]]
    346.79829866   346.06949488   385.7717847 ]]
    346.81396893   337.87718866   364.82962408]]
    346.90781369   344.11045206   370.96862223]]
    347.06497292   349.00643106   386.9269398 ]]
    347.06614358   346.17074939   385.75961502]]
    347.09226649   338.07087666   365.06006384]]
    347.12638846   349.73690646   383.18099672]]
    347.19338892   326.41868226   345.81778576]]
    347.23224836   368.76770815]]
    347.26064364   366.15256451]]
    347.33690351   346.16415643   385.52267417]]
    347.36606129   338.2465112    365.25070442]]
    347.48191496   325.28773517   344.31932001]]
    347.50544358   366.20540959]]
    347.55860432   368.61821585]]
    347.60946508   346.07950264   385.11747098]]
    347.60994145   344.18069035   370.77236398]]
    347.63345673   338.40560902   365.40961857]]
    347.64990088   344.04685423   382.99457235]]
    347.87654844   345.94261421   384.60588227]]
    347.89661046   379.64655289]]
    347.90171877   338.55103597   365.53918621]]
    347.94681207   343.95237478   382.31824303]]
    348.0027483    368.41125245]]
    348.05230255   323.80497254   342.51181468]]
    348.12816992   345.7754506    384.04476768]]
    348.16940621   338.68413495   365.64269177]]
    348.18142398   366.35405942]]
    348.19865727   344.31040302   370.63101168]]
    348.20287529   348.08147424   376.05178914]]
    348.22846323   343.79748325   381.47667586]]
    348.26264586   349.47619192   384.08729523]]
    348.36512514   345.5903872    383.45124077]]
    348.47499073   322.92882499   341.49968499]]
    348.50727834   343.59759954   380.50114002]]
    348.54799391   366.43707477]]
    348.57272043   376.64855176]]
    348.60802071   345.38417801   382.78310575]]
    348.60956043   366.45062581]]
    348.69738652   338.91765638   365.78344044]]
    348.79219499   343.36526054   379.41981687]]
    348.79539477   366.49088901]]
    348.85675363   344.43127185   370.48751676]]
    348.85765281   366.50416191]]
    348.86513225   345.15663873   382.03039628]]
    348.87973829   367.85517188]]
    348.95549352   339.01994535   365.82599096]]
    349.02350273   371.25831799   396.17759406]]
    349.0516271    358.17310819]]
    349.08928377   343.110744     378.25926415]]
    349.14246763   368.18381494   393.11775207]]
    349.18096155   321.83636495   340.32260644]]
    349.20846758   339.11366879   365.8532035 ]]
    349.23281716   366.58181423]]
    349.36258681   338.52878289   360.043557  ]]
    349.40028472   344.66452483   380.38844991]]
    349.40194694   342.84319068   377.04566061]]
    349.42008186   366.61904936]]
    349.45559233   339.19954586   365.86723835]]
    349.50268669   344.57079139   370.35841381]]
    349.54145905   372.75842882   397.1642981 ]]
    349.58381312   383.79419391]]
    349.63914725   321.2172053    339.68138453]]
    349.68573665   344.40211221   379.50579812]]
    349.69628255   339.27822457   365.87002287]]
    349.73101856   342.5724038    375.80417881]]
    349.78857786   366.68924689]]
    349.93004384   339.35029074   365.8633344 ]]
    349.97129042   344.14027943   378.62097298]]
    350.00000006   399.99999989]]
    350.07636041   342.30580304   374.55780592]]
    350.10438197   358.08700622]]
    350.11508036   365.79840134]]
    350.15646513   339.41627326   365.8488031 ]]
    350.15840902   344.71746689   370.23473935]]
    350.17506303   337.83000122   358.74860908]]
    350.23297198   351.66065717   401.68392255]]
    350.25082371   343.88568263   377.75494061]]
    350.25105773   367.15256233]]
    350.25301692   320.49873784   338.97195002]]
    350.30162004   366.78013307]]
    350.34051648   367.11975111]]
    350.37522621   339.47665226   365.82789509]]
    350.43748641   342.04845136   373.32237525]]
    350.45273798   366.80566841]]
    350.52079987   343.64249473   376.92053862]]
    350.58240776   352.55031381]]
    350.58537311   337.88223317   357.68181098]]
    350.60336141   337.87314351   357.74953452]]
    350.63427378   358.06509769]]
    350.77390993   337.61242816   357.29614236]]
    350.77838039   343.41360836   376.12731667]]
    350.79676473   366.86795956]]
    350.80174461   366.95818368]]
    350.80390732   337.26519258   357.59427618]]
    350.81348729   341.79709126   372.11039511]]
    350.81536659   344.87152353   370.1166395 ]]
    350.85874698   366.88590177]]
    350.87339758   339.41536508   349.05989953]]
    350.87940937   356.57935697   395.97194255]]
    350.88041204   366.89828913]]
    350.98258398   339.62773544   365.73784935]]
    351.00004508   363.00001058   401.00005429]]
    351.02205598   343.20046073   375.38045556]]
    351.09264076   337.60457005   357.24056876]]
    351.10953468   319.63669329   338.16985423]]
    351.16854316   339.66950968   365.70309175]]
    351.19412279   341.55116111   370.95560718]]
    351.25159344   343.00320347   374.68115315]]
    351.34620145   339.70749077   365.66736804]]
    351.44127741   339.13002643   350.43163287]]
    351.47212042   345.03092696   370.00290966]]
    351.49004739   380.04802665]]
    351.52824943   336.84949303   355.91470408]]
    351.55938052   341.32376978   369.91110405]]
    351.56474144   337.5367961    357.48604902]]
    351.57291264   362.24256128   384.98651266]]
    351.61509843   319.16170764   337.74208568]]
    351.61978633   337.28090533   356.67196949]]
    351.66648209   337.44615417   357.25157043]]
    351.66769552   337.20114919   356.8749427 ]]
    351.66878094   342.65482678   373.42376944]]
    351.67734578   339.77314274   365.59446384]]
    351.69726976   358.06237041]]
    351.70993091   356.22945266   394.64838328]]
    351.79906438   337.36876043   357.2928056 ]]
    351.81032049   336.32459012   355.52737873]]
    351.83125052   339.80130485   365.55786555]]
    351.85231408   337.14249343   356.37714378]]
    351.85727782   342.50222538   372.86296679]]
    351.88124757   352.16422193   380.96011143]]
    351.89255922   341.12563676   369.01516172]]
    351.97573008   374.20860475   396.15201423]]
    351.97767917   339.82665698   365.52148177]]
    352.03327172   342.36270999   372.3441094 ]]
    352.04664095   337.03383692   356.09215932]]
    352.06351428   338.90707618   351.59397843]]
    352.07068497   337.03194632   356.71795416]]
    352.11728085   339.84949618   365.48494796]]
    352.12671374   345.19435514   369.89290541]]
    352.16598852   409.25062879]]
    352.19515652   340.95048563   368.24387746]]
    352.19754742   342.23521643   371.86446639]]
    352.21670971   318.6328339    337.28422995]]
    352.25035843   339.8700472    365.44837891]]
    352.26304439   409.41492946]]
    352.27197935   336.93939762   355.80688422]]
    352.44867324   335.65175341   353.87201669]]
    352.46266945   340.7942857    367.56549051]]
    352.46568334   355.77672965   392.8697018 ]]
    352.48208968   336.93453671   355.58943179]]
    352.49417199   342.01211224   371.01156125]]
    352.49756266   339.90497949   365.37626633]]
    352.61204109   339.9196724    365.34115151]]
    352.61601323   410.05174062]]
    352.69076356   340.66110779   366.96573255]]
    352.72068753   339.93270173   365.30687912]]
    352.74039298   336.57616247   354.54419772]]
    352.75113579   410.27406558]]
    352.75345597   341.82505795   370.28227675]]
    352.77768726   345.36076596   369.78617126]]
    352.82369506   339.94419042   365.27356929]]
    352.84830804   336.83064862   355.24758946]]
    352.87090282   341.74289558   369.95767611]]
    352.91019391   340.5030564    366.44381221]]
    352.91595139   335.11818357   352.48802552]]
    352.92173749   339.95454874   365.24192858]]
    352.98107529   341.66732174   369.65676874]]
    352.99683042   340.47894423   366.23546438]]
    353.01468396   339.96373766   365.21219676]]
    353.02601433   410.63877966]]
    353.07054143   409.58511038]]
    353.08455256   341.59768711   369.37752695]]
    353.10200049   339.97145294   365.18401024]]
    353.18186594   341.5334095    369.11809495]]
    353.24500533   340.3543655    365.72902958]]
    353.24513122   340.35387361   365.74205201]]
    353.25776069   336.64699023   354.79666439]]
    353.26061334   339.98278915   365.13231244]]
    353.27350161   341.47396788   368.87677943]]
    353.33227927   339.98652651   365.10884392]]
    353.39905037   339.9890199    365.08700639]]
    353.42391857   345.5293712    369.68241409]]
    353.44140302   341.36786149   368.44269116]]
    353.46103666   339.99027239   365.06683947]]
    353.51831518   339.99026032   365.04837337]]
    353.53384174   339.3068447    354.66600954]]
    353.54126864   337.59634396   354.15768057]]
    353.55882965   334.22481022   350.15319325]]
    353.61891888   339.98621577   365.0163943 ]]
    353.66034188   341.23508618   367.89392629]]
    353.66232184   339.98203924   365.00244678]]
    353.67307423   336.41120304   354.26581372]]
    353.70127805   339.97638619   364.98916027]]
    353.72583701   341.19660113   367.73390512]]
    353.73609861   339.9693617    364.97578664]]
    353.78804921   341.16056954   367.58378524]]
    353.79554315   339.9522099    364.94693346]]
    353.81089741   317.3605266    336.2700801 ]]
    353.82170532   339.94265535   364.93132672]]
    353.84721894   341.12677103   367.44276235]]
    353.85391797   333.9083082    349.23677093]]
    353.86916252   339.92268545   364.89778405]]
    353.89099207   339.91259052   364.87991667]]
    353.90356623   341.09500746   367.31010455]]
    353.91028869   334.88234774   370.5021477 ]]
    353.91181902   339.90258513   364.86139812]]
    353.93684521   333.62346007   348.49355338]]
    353.95100593   339.88318428   364.82271284]]
    353.96956209   339.87391097   364.80271101]]
    354.00493676   339.85641064   364.76180793]]
    354.02184929   339.84822583   364.74106912]]
    354.03829327   339.84043164   364.72024134]]
    354.05429691   339.83303005   364.69939594]]
    354.08507367   339.81938878   364.6579119 ]]
    354.10452798   340.98496445   366.85059343]]
    354.11432505   339.80723685   364.61708064]]
    354.12841103   339.80168867   364.59703001]]
    354.14141219   355.91429032   374.75799426]]
    354.14214971   339.79647324   364.5772758 ]]
    354.15554826   339.79157537   364.55785138]]
    354.16156422   338.445774     355.06963037]]
    354.18134754   339.78267028   364.52010172]]
    354.19257579   340.9387249    366.65628053]]
    354.19375756   339.77863213   364.50182074]]
    354.20584657   339.77485003   364.48395872]]
    354.21831356   333.37683819   347.7285386 ]]
    354.22907652   339.76799581   364.44954059]]
    354.23396327   340.91725478   366.56646772]]
    354.24022493   339.76489593   364.43300167]]
    354.24461904   333.15103504   347.13718217]]
    354.25106739   339.76199663   364.41691671]]
    354.26015438   374.94299378   393.56150242]]
    354.26160794   339.75928553   364.40128827]]
    354.27373555   340.89677897   366.48109545]]
    354.31199819   340.8772168    366.39983141]]
    354.32731822   339.74466538   364.30484389]]
    354.34884904   340.85849419   366.32236942]]
    354.38437883   340.8405431    366.24842731]]
    354.40925843   353.61126112]]
    354.41867166   340.82330109   366.17774489]]
    354.45180561   340.80671078   366.11008218]]
    354.45767781   331.39431279   375.1957082 ]]
    354.48385317   340.79071942   366.04521758]]
    354.49837891   332.95590665   346.49395675]]
    354.51488163   340.77527862   365.98294662]]
    354.51670325   335.82325806   353.02051762]]
    354.51946571   332.77549583   346.00125864]]
    354.52243432   327.98614581   342.07198586]]
    354.54495353   340.7603439    365.9230804 ]]
    354.55501547   328.07318781   342.82274607]]
    354.55644851   327.95626578   341.10827826]]
    354.57412706   340.74587436   365.86544433]]
    354.60246416   340.73182254   365.80985236]]
    354.63001489   340.71815474   365.75615622]]
    354.65682546   340.70484046   365.70422006]]
    354.68182939   328.32731795   344.04243892]]
    354.68293873   340.69185186   365.65391868]]
    354.69881925   345.87090091   369.48328917]]
    354.70839448   340.67916344   365.60513661]]
    354.71056984   328.01423421   339.83547716]]
    354.71367747   375.00711433   392.70374248]]
    354.72201849   332.61852502   345.46573671]]
    354.73322974   340.6667519    365.55776719]]
    354.78117415   340.6426759    365.4668798 ]]
    354.80410491   340.63097407   365.42318671]]
    354.82655746   340.61947412   365.38055492]]
    354.84855616   340.60816122   365.33891274]]
    354.87012369   340.59702188   365.29819404]]
    354.87659072   338.45341627   356.17206563]]
    354.89110985   355.51696189   384.92895789]]
    354.91204835   340.57521623   365.21928806]]
    354.93244344   340.5645289    365.18099302]]
    354.94170199   335.48863879   352.33358299]]
    354.95246336   329.08366963   377.86226468]]
    354.95248347   340.55397298   365.14340534]]
    354.99156026   340.53322435   365.07018196]]
    354.99992449   335.00037727   358.00044195]]
    355.01062519   340.52301828   365.03447019]]
    355.02939144   340.51291684   364.99931334]]
    355.04786759   340.50291849   364.9646901 ]]
    355.06606704   340.49301553   364.93056455]]
    355.07865377   329.0610239    345.61769927]]
    355.10167497   340.47348196   364.86370881]]
    355.11910101   340.4638458    364.83093584]]
    355.13628557   340.45429385   364.79857462]]
    355.15323569   340.4448245    364.766609  ]]
    355.18645776   340.42612901   364.7038088 ]]
    355.19866211   328.28340961   337.33243678]]
    355.20274076   340.41690179   364.67295087]]
    355.21881167   340.4077545    364.642441  ]]
    355.23467497   340.39868696   364.6122705 ]]
    355.25033471   340.38969917   364.58243177]]
    355.28041361   327.75883383   379.27470239]]
    355.29613396   340.36321188   364.49482896]]
    355.32571822   340.34595173   364.4379626 ]]
    355.32615074   346.04296903   369.38789603]]
    355.34045124   340.33729105   364.40939233]]
    355.35500336   340.32871691   364.38111322]]
    355.36216473   335.13966152   351.62682029]]
    355.39758689   340.30351938   364.29826309]]
    355.41142629   340.29529873   364.27137534]]
    355.42508923   340.28716913   364.2447703 ]]
    355.43857633   340.27913154   364.21845128]]
    355.46502543   340.26333604   364.16668348]]
    355.47798867   340.25557979   364.14124023]]
    355.48593339   350.10859603   391.8944054 ]]
    355.49077857   340.24791887   364.11609401]]
    355.51584109   340.23288556   364.06670097]]
    355.52811518   340.22551422   364.04245767]]
    355.52816485   329.99979094   346.32460185]]
    355.54021887   340.21824033   364.01851845]]
    355.55215298   340.2110642    363.99488445]]
    355.57551599   340.19700613   363.94853544]]
    355.58694986   340.19012212   363.92581285]]
    355.59822248   340.18333305   363.90338472]]
    355.60933406   340.1766396    363.88125339]]
    355.62028497   340.17004224   363.85942052]]
    355.63107581   340.16354119   363.83788722]]
    355.63357503   330.44735726   346.66606757]]
    355.64170726   340.15713655   363.81665415]]
    355.65218018   340.15082823   363.79572155]]
    355.66249548   340.14461605   363.7750893 ]]
    355.67265419   340.13849971   363.754757  ]]
    355.69250628   340.12655293   363.71498918]]
    355.70220204   340.12072148   363.69555156]]
    355.71174594   340.11498389   363.6764097 ]]
    355.72113932   340.10933949   363.65756205]]
    355.72787505   326.22707973   380.76145698]]
    355.73038352   340.10378757   363.63900688]]
    355.73947996   340.09832738   363.62074231]]
    355.75723526   340.08767895   363.58507673]]
    355.77441706   340.07738738   363.55054756]]
    355.77649235   334.78629427   350.91747097]]
    355.78279671   340.07237314   363.53370309]]
    355.79103759   340.06744534   363.51713527]]
    355.79914128   340.062603     363.50084143]]
    355.81494079   340.05317305   363.46907258]]
    355.83019552   340.04408567   363.43841051]]
    355.83762334   340.03966703   363.42348528]]
    355.91696438   393.43055625]]
    355.94383651   346.21484502   369.29394164]]
    355.98823475   328.97498861   335.02220009]]
    356.04705486   338.64310557   357.83509145]]
    356.06753745   394.02316612]]
    356.18858901   334.43405308   350.21517195]]
    356.21316312   333.88789486   349.38729923]]
    356.23423111   334.00688962   349.45369838]]
    356.34988589   335.79661119   350.76495164]]
    356.40193819   395.30276642]]
    356.55169065   346.38590602   369.20028851]]
    356.60881155   334.08274217   349.51907491]]
    356.74609899   396.61916675]]
    356.75959314   349.29371068   363.20053035]]
    357.05419282   333.72397896   348.81357797]]
    357.25996889   322.40764331   383.74504669]]
    357.35789546   358.91259146]]
    357.54468573   333.3456906    348.07511785]]
    357.65910016   339.43108291   359.68358649]]
    358.33607899   346.89646866   368.93172861]]
    358.48033636   358.3512764    388.3481129 ]]
    358.66001151   340.93292677   364.06403656]]
    358.67669362   340.94229436   364.0686629 ]]
    358.69360534   340.9517885    364.07334249]]
    358.70974728   332.50191534   346.43573109]]
    358.71075027   340.96141072   364.07807568]]
    358.72813208   340.97116254   364.08286277]]
    358.72986897   340.38566569   360.1164866 ]]
    358.74575454   340.98104549   364.08770408]]
    358.76362146   340.99106105   364.09259989]]
    358.78173668   341.00135892   364.09755034]]
    358.80010417   341.01180421   364.10255568]]
    358.81872766   341.02239994   364.10761735]]
    358.84514918   337.1907644    356.63917773]]
    358.85675829   341.0440538    364.11791316]]
    358.85691722   337.17995699   356.61168347]]
    358.86891164   337.16895305   356.583666  ]]
    358.87617364   341.05511709   364.12314797]]
    358.88113739   337.1577475    356.55511244]]
    358.89360442   337.14631878   356.52598774]]
    358.89586125   341.06634149   364.12844115]]
    358.90631761   337.13466161   356.49627915]]
    358.91480211   347.0651483    368.8480263 ]]
    358.91582537   341.07772968   364.133793  ]]
    358.91928197   337.12277046   356.46597358]]
    358.93250258   337.11063963   356.43505754]]
    358.93607034   341.08928444   364.1392038 ]]
    358.94598465   337.09826317   356.40351721]]
    358.95973346   337.0856349    356.37133832]]
    358.97375442   337.07274835   356.33850622]]
    358.98805302   337.05959682   356.30500584]]
    358.99853689   341.12497855   364.15579325]]
    359.00263485   337.04617328   356.27082166]]
    359.01995479   341.13723268   364.16144391]]
    359.03267111   337.0184805    356.20033753]]
    359.04167915   341.14967075   364.16715555]]
    359.06371507   341.16229628   364.17292841]]
    359.06390993   336.98960718   356.12692045]]
    359.07999532   336.97470656   356.08906826]]
    359.08606776   341.17511288   364.17876272]]
    359.09639953   336.95948448   356.0504293 ]]
    359.10874252   341.18812431   364.18465867]]
    359.11312881   336.94393128   356.01098466]]
    359.13018943   336.92803683   355.97071498]]
    359.15508001   341.21474718   364.19663626]]
    359.16533017   336.89518124   355.88762052]]
    359.18342307   336.87819738   355.84475461]]
    359.20187285   336.86082681   355.80098146]]
    359.20277209   341.24219732   364.20886239]]
    359.20750576   319.22129845   384.90547924]]
    359.22068587   336.84305685   355.75627949]]
    359.22713557   341.2562391    364.21506795]]
    359.23986843   336.82487435   355.71062686]]
    359.27691664   341.28496937   364.22766248]]
    359.29969421   336.76771259   355.56774408]]
    359.30234474   341.29966566   364.23405126]]
    359.32041473   336.74773883   355.518068  ]]
    359.32813826   341.31458803   364.24050087]]
    359.34153335   336.72728016   355.46733162]]
    359.35430252   341.32974056   364.24701113]]
    359.36305467   336.70632132   355.41551419]]
    359.37084474   331.98935552   345.46138052]]
    359.38084285   341.3451274    364.2535818 ]]
    359.38498266   336.68484714   355.36259602]]
    359.40732054   336.6628427    355.30855882]]
    359.40776459   341.36075278   364.26021262]]
    359.43507306   341.37662099   364.26690329]]
    359.46277359   341.39273639   364.27365345]]
    359.49087148   341.40910341   364.2804627 ]]
    359.50092019   336.57031233   355.08192013]]
    359.51937199   341.42572655   364.28733059]]
    359.54828034   341.44261036   364.29425663]]
    359.55035969   336.52126075   354.96211804]]
    359.57576194   336.49600882   354.90053921]]
    359.57760168   341.45975937   364.30124024]]
    359.60081899   341.14249015   360.25281332]]
    359.60162787   336.47026114   354.83781996]]
    359.60734109   341.47717805   364.30828069]]
    359.62796396   336.44400875   354.77394385]]
    359.63750354   341.49487104   364.31537732]]
    359.65477674   336.4172425    354.70889437]]
    359.6609076    359.64814013]]
    359.66809389   341.51284303   364.32252939]]
    359.68207274   336.38995304   354.64265502]]
    359.69911688   341.53109873   364.32973611]]
    359.70985847   336.3621308    354.57520926]]
    359.73057707   341.54964285   364.33699663]]
    359.73814048   336.33376598   354.50654058]]
    359.75496024   344.7390022    368.01731988]]
    359.76247885   341.56847997   364.34445782]]
    359.76692529   336.30484854   354.43663248]]
    359.82602934   336.24531426   354.29303218]]
    359.82762364   341.60705193   364.35956114]]
    359.86087407   341.62679587   364.36720218]]
    359.88722228   336.183442     354.14427747]]
    359.89458052   341.64685067   364.37490199]]
    359.95055487   336.11914095   353.99023965]]
    359.96337269   341.68791007   364.39047541]]
    359.98303898   336.08604986   353.91120041]]
    359.99846294   341.7089229    364.39834767]]
    360.01562703   331.46281559   344.45256598]]
    360.01607626   336.05231525   353.83079413]]
    360.03401821   341.730263     364.40627601]]
    360.04072029   347.39708648   368.69101363]]
    360.04967241   336.01792438   353.74900633]]
    360.07003946   341.75193394   364.41425971]]
    360.08383289   335.9828643    353.66582322]]
    360.10652706   341.77393904   364.422298  ]]
    360.11856282   335.94712182   353.5812319 ]]
    360.14348066   341.79628126   364.4303901 ]]
    360.15386692   335.91068363   353.4952205 ]]
    360.18089916   341.81896318   364.43853522]]
    360.18974942   335.8735364    353.40777846]]
    360.22621396   335.83566684   353.31889685]]
    360.25712211   341.86535398   364.45498127]]
    360.26326346   335.79706187   353.22856863]]
    360.29591971   341.8890654    364.46328059]]
    360.32034147   342.66633769   349.58919501]]
    360.33516875   341.91312171   364.47162944]]
    360.33912463   335.7175955    353.04355624]]
    360.37486514   341.93752403   364.48002568]]
    360.37793728   335.6767107    352.94887138]]
    360.41500125   341.96227106   364.48846838]]
    360.41733645   335.63504424   352.85273956]]
    360.45556787   341.98736042   364.49695661]]
    360.45731909   335.59258742   352.75500437]]
    360.49655399   342.01278849   364.50548949]]
    360.51970221   359.98296089]]
    360.53794669   342.03855025   364.51406618]]
    360.53901313   335.50527733   352.55524878]]
    360.57595627   331.00245804   343.53499652]]
    360.57973082   342.06463905   364.52268589]]
    360.62295387   335.41475488   352.34994323]]
    360.69784746   341.7854276    360.12700761]]
    360.70724301   342.14477243   364.54879665]]
    360.70903355   335.32104623   352.13939057]]
    360.75038957   342.17206271   364.55758258]]
    360.75282792   335.27302382   352.03228085]]
    360.79381038   342.19961429   364.56640935]]
    360.79709258   335.22424737   351.92404163]]
    360.83747156   342.22740555   364.57527716]]
    360.84179782   335.17474306   351.81475735]]
    360.88133495   342.25541136   364.58418654]]
    360.93238871   335.07369068   351.59345741]]
    360.96949192   342.31194614   364.6021345 ]]
    360.97819158   335.02223193   351.48167913]]
    360.99668035   360.99795724]]
    361.00000252   314.99998481   328.99998671]]
    361.01373816   342.34039783   364.61111325]]
    361.02426903   334.97022513   351.36933204]]
    361.02819688   330.6376091    342.77103083]]
    361.05809351   342.36891582   364.6200219 ]]
    361.07056667   334.91773684   351.25657343]]
    361.10252054   342.39746418   364.62885283]]
    361.10967416   347.71547459   368.54934709]]
    361.11702462   334.86484322   351.14357693]]
    361.14698085   342.42600536   364.63759867]]
    361.16357757   334.81163029   351.03053266]]
    361.18513589   341.10150067   358.260412  ]]
    361.19143772   342.45450232   364.64625212]]
    361.21015473   334.75819414   350.9176473 ]]
    361.23585897   342.48292104   364.65480582]]
    361.26778097   342.33007215   360.14264573]]
    361.28020735   342.51122301   364.66325375]]
    361.30307218   334.65108697   350.69326096]]
    361.32444715   342.53937053   364.67159071]]
    361.34924529   334.5976581    350.5822526 ]]
    361.36854585   342.56733123   364.67981452]]
    361.36954984   330.37555255   342.187137  ]]
    361.39510898   334.54448962   350.47238652]]
    361.41247464   342.59507777   364.68792544]]
    361.44056905   334.49172545   350.3639432 ]]
    361.45621493   342.62258705   364.69591915]]
    361.49975002   342.64983834   364.7037939 ]]
    361.52988652   334.38802413   350.15249956]]
    361.54306544   342.6768138    364.71155083]]
    361.57354288   334.33741003   350.0501069 ]]
    361.58615256   342.70350116   364.71919266]]
    361.61244777   347.86258392   368.4808582 ]]
    361.61491381   330.20961794   341.77822485]]
    361.61639546   334.28784386   349.95034753]]
    361.62900885   342.72989415   364.72672364]]
    361.64636282   360.85411575   390.93311841]]
    361.65820662   334.23969486   349.85387863]]
    361.67163811   342.7559928    364.73414957]]
    361.69828425   334.19401395   349.76251353]]
    361.73605322   334.15176304   349.67779577]]
    361.75626231   342.80733883   364.74871678]]
    361.79152048   330.12033013   341.51485842]]
    361.79829577   342.83261754   364.75587658]]
    361.80151312   334.08288754   349.53664749]]
    361.82876985   334.05714119   349.48115035]]
    361.84017846   342.85766392   364.76296806]]
    361.85381288   334.03493141   349.43156969]]
    361.87680093   334.01596479   349.38733581]]
    361.88194283   342.88250736   364.77000299]]
    361.91747604   333.98616846   349.31198844]]
    361.92362553   342.90718173   364.77699379]]
    361.92651304   330.08428102   341.35911746]]
    361.93568483   333.97438113   349.2791799 ]]
    361.96526665   342.93172467   364.78395328]]
    361.98526478   333.94515067   349.18939779]]
    361.99997453   365.99999411   375.00001991]]
    362.00103784   333.93578167   349.15956039]]
    362.01683509   333.92588975   349.12860415]]
    362.03284287   333.91515221   349.09601312]]
    362.03938641   330.08339937   341.27841428]]
    362.04859733   342.98058129   364.79783043]]
    362.04920726   333.90332157   349.06140075]]
    362.06603546   333.89022207   349.02450252]]
    362.08339933   333.87574213   348.98516239]]
    362.10134022   333.85982484   348.94331603]]
    362.13229624   343.0294258    364.81173712]]
    362.13899654   333.82366334   348.85220305]]
    362.15811745   330.07993062   341.2168533 ]]
    362.15868695   333.80349111   348.80311761]]
    362.17891209   333.78201097   348.75186366]]
    362.19962867   333.75930859   348.69861325]]
    362.21673282   343.07862095   364.82576953]]
    362.22078526   333.7354822    348.64355825]]
    362.25934022   343.10346218   364.83285987]]
    362.26417947   333.68490214   348.52888007]]
    362.26759475   330.08839731   341.1829132 ]]
    362.28628335   333.65839413   348.46971237]]
    362.30222529   343.12849776   364.84003753]]
    362.30856105   333.63125265   348.40964803]]
    362.33093452   333.60362206   348.34894052]]
    362.34541284   343.15375844   364.84732168]]
    362.35332294   333.57565428   348.28784978]]
    362.36290547   330.09942737   341.16516276]]
    362.37571961   333.54739997   348.2264642 ]]
    362.38893499   343.17927924   364.85472415]]
    362.39829557   333.51865472   348.16445858]]
    362.42098462   333.48953449   348.10204862]]
    362.44372443   333.46015045   348.03943932]]
    362.45061469   330.09542099   341.14106786]]
    362.46645846   333.4306064    347.97682022]]
    362.48913761   333.40099666   347.91436183]]
    362.53415255   333.34195092   347.79057772]]
    362.53961864   330.0734768    341.09878902]]
    362.56505538   348.14228825   368.33930854]]
    362.56688189   343.28455345   364.88572658]]
    362.60026708   333.25515712   347.60995457]]
    362.61242168   343.31178304   364.89387061]]
    362.62184316   333.2270124    347.55156639]]
    362.62606097   330.04467999   341.04680736]]
    362.64315867   333.19941406   347.49429442]]
    362.65839866   343.33940545   364.90218736]]
    362.66420064   333.17246817   347.43826704]]
    362.67622995   342.87291704   359.75607098]]
    362.67693599   330.09967573   341.07972805]]
    362.68496075   333.14629132   347.38361369]]
    362.70114648   330.10910085   341.08345306]]
    362.70480874   343.36742431   364.91068318]]
    362.71291938   337.68968167   350.56845198]]
    362.72563338   333.09676726   347.2789402 ]]
    362.72900481   330.11188951   341.07999994]]
    362.74556573   333.07371107   347.22916407]]
    362.74755879   343.10316806   359.82361072]]
    362.75163908   343.39583549   364.91936369]]
    362.76526001   333.0520067    347.18124293]]
    362.78475692   333.03183067   347.13526978]]
    362.78845184   330.108227     341.06303562]]
    362.84645549   343.45377047   364.93729793]]
    362.85010978   330.09230594   341.0327949 ]]
    362.88213958   332.96082845   346.93594172]]
    362.89435566   343.48323214   364.94655964]]
    362.90256061   332.95409764   346.90182455]]
    362.90658354   330.07355385   340.99987544]]
    362.92379092   332.95035619   346.86919409]]
    362.94249855   343.51295656   364.95602215]]
    362.94613608   332.94979503   346.83767902]]
    362.95519903   330.05638437   340.9697371 ]]
    362.96995803   332.95257532   346.80678235]]
    362.99079362   343.54286955   364.96568813]]
    362.99444654   346.99448888   335.98809468]]
    362.99560218   330.04250549   340.94483043]]
    362.99567897   332.95881413   346.77586236]]
    363.02378339   332.96856761   346.74411442]]
    363.03912318   343.57287212   364.97555993]]
    363.04683953   348.2859821    368.25709335]]
    363.06129069   330.02205329   340.90706086]]
    363.08903507   337.09622871   338.57210605]]
    363.09313919   332.9296207    346.60214545]]
    363.10075428   330.01528948   340.89313953]]
    363.13124047   332.88872178   346.50496416]]
    363.13238918   330.02729696   340.91895283]]
    363.13523923   343.63258923   364.99592957]]
    363.20914391   332.80510035   346.30624701]]
    363.23078964   343.69238932   365.01687836]]
    363.24895423   332.76237055   346.20469002]]
    363.28934197   332.71902377   346.10165441]]
    363.32465923   343.75152084   365.03827907]]
    363.33031058   332.67505731   345.99713127]]
    363.37012857   343.78012994   365.04915412]]
    363.37186319   332.63046885   345.89111247]]
    363.41400008   343.80757239   365.060152  ]]
    363.45565634   343.83332018   365.07128273]]
    363.49431913   343.8567064    365.08256351]]
    363.50005147   332.49295569   345.56401331]]
    363.52900581   343.87688944   365.0940233 ]]
    363.54396475   332.44586595   345.45194766]]
    363.55097231   348.43429618   368.16199191]]
    363.55847356   343.89280837   365.10570964]]
    363.58847249   332.39815022   345.33835907]]
    363.58930077   343.90998221   365.11735133]]
    363.62215867   343.92895484   365.12892492]]
    363.63357553   332.34980944   345.22324519]]
    363.65671025   343.94942487   365.14044723]]
    363.67927426   332.30084522   345.10660492]]
    363.69267113   343.97113648   365.15193103]]
    363.72556856   332.25125988   344.9884384 ]]
    363.72921323   343.59519659   359.59025523]]
    363.72981136   343.99388103   365.16338557]]
    363.76801084   344.01754083   365.17479939]]
    363.77245774   332.20105651   344.86874717]]
    363.80711852   344.04197956   365.18617957]]
    363.81994054   332.15023902   344.7475342 ]]
    363.84701294   344.06708687   365.19753235]]
    363.88759648   344.09277339   365.20886335]]
    363.91667875   332.04678167   344.50056285]]
    363.92879082   344.11896662   365.22017775]]
    363.95600281   361.72465964]]
    363.97053323   344.14560774   365.23148038]]
    364.01277374   344.17264909   365.24277581]]
    364.01575963   331.94093761   344.2475811 ]]
    364.05547291   344.20005218   365.25406842]]
    364.06232207   348.58387262   368.06077045]]
    364.06616782   331.88714075   344.11886218]]
    364.07004516   334.69941715   344.9032759 ]]
    364.09860006   344.22778618   365.26536242]]
    364.11714752   331.83277372   343.98867573]]
    364.14213198   344.25582675   365.27666193]]
    364.18605186   344.28415513   365.287971  ]]
    364.22079374   331.72237649   343.72396765]]
    364.23034856   344.31275754   365.29929364]]
    364.27344371   331.66637375   343.5894861 ]]
    364.27501603   344.34162461   365.31063381]]
    364.3096088    361.94549973]]
    364.32005294   344.37075119   365.32199549]]
    364.32663188   331.60985601   343.45361757]]
    364.41161418   344.42978106   365.34479922]]
    364.43494879   331.49535      343.17783254]]
    364.45799583   344.45969385   365.35624928]]
    364.46134732   344.06803513   359.46077914]]
    364.50479999   344.48988518   365.36773686]]
    364.54534662   331.37903072   342.89687471]]
    364.55204912   344.52037068   365.37926603]]
    364.57212567   348.73241403   367.95762423]]
    364.59977102   344.55117101   365.39084086]]
    364.60129008   331.32025657   342.75455588]]
    364.64799941   344.58231251   365.40246541]]
    364.69677458   344.61382797   365.41414368]]
    364.71457692   331.20163939   342.46648199]]
    364.74614431   344.64575755   365.42587957]]
    364.77187688   331.14187294   342.32084264]]
    364.79616487   344.67814994   365.43767685]]
    364.82958005   331.08186085   342.17422448]]
    364.84079207   362.95156078   392.63588805]]
    364.84690237   344.71106383   365.44953904]]
    364.88765525   331.0216556    342.02670563]]
    364.89843427   344.74456956   365.46146932]]
    364.94614479   330.96117142   341.8781499 ]]
    364.95085123   344.77875115   365.47347042]]
    365.00425935   344.81370878   365.48554443]]
    365.05878277   344.84956165   365.49769263]]
    365.11456683   344.8864515    365.50991523]]
    365.12401506   330.7781405    341.42642505]]
    365.17110317   344.92389828   365.52219861]]
    365.18404468   330.71669336   341.27398013]]
    365.21021405   332.56775984   341.16098737]]
    365.28135475   333.09372402   331.0344714 ]]
    365.28579664   344.9998496    365.54692811]]
    365.33744694   362.64265972]]
    365.34397195   345.03836424   365.55937187]]
    365.36607628   330.53142331   340.8117013 ]]
    365.40271341   345.0772461    365.57186653]]
    365.42733235   330.46944556   340.65612467]]
    365.46203289   345.11650223   365.58441058]]
    365.48883263   330.40742218   340.49992277]]
    365.52194379   345.15614084   365.59700232]]
    365.55052309   330.34544947   340.34324973]]
    365.57148335   349.02392903   367.75695515]]
    365.58246135   345.19617157   365.60963986]]
    365.61237385   330.2835691    340.18617876]]
    365.64360304   345.23660585   365.62232105]]
    365.67099156   331.87104063   340.00023644]]
    365.67435373   330.22182393   340.02878585]]
    365.70538901   345.2774573    365.63504348]]
    365.73643026   330.16025794   339.87114981]]
    365.76782582   345.31873131   365.64781068]]
    365.79856959   330.0989161    339.71335222]]
    365.86073655   330.03784437   339.5554775 ]]
    365.89462887   345.40253448   365.673506  ]]
    365.92289455   329.97708957   339.39761292]]
    366.02406973   345.48805057   365.69940674]]
    366.04703031   329.85672181   339.08227779]]
    366.05212625   349.16420481   367.6652869 ]]
    366.06036431   331.25006176   339.03181305]]
    366.10892774   329.7972059    338.92499658]]
    366.15623185   345.57533158   365.72550079]]
    366.17065544   329.73820076   338.76810442]]
    366.18496543   345.025228     359.10454145]]
    366.22336121   345.61965177   365.73861601]]
    366.29120511   345.66443539   365.75177418]]
    366.29342397   329.62192134   338.45571467]]
    366.35437172   329.56474714   338.3003937 ]]
    366.37991246   330.71299431   338.23130339]]
    366.42908593   345.75542661   365.77821086]]
    366.47514771   329.45257795   337.9921789 ]]
    366.51723746   349.30205394   367.58165855]]
    366.5347292    393.45740461]]
    366.53487119   329.39768112   337.83950197]]
    366.56997681   345.84837725   365.80479231]]
    366.59407796   329.34364053   337.68792774]]
    366.6049423    363.60232285]]
    366.63906373   330.260728     337.57457238]]
    366.64158439   345.89561198   365.81813078]]
    366.65270942   329.29050335   337.53757171]]
    366.71070386   329.23831562   337.38855284]]
    366.71398487   345.94336705   365.83149722]]
    366.76799602   329.18712202   337.24099424]]
    366.78719189   345.99165356   365.84488848]]
    366.84481138   329.89005894   337.04516851]]
    366.86121883   346.04048294   365.85830123]]
    366.88019053   329.08788794   336.95077688]]
    366.90049478   363.84107349]]
    366.92994453   330.51108711   326.58203498]]
    366.93493784   329.03992836   336.80839553]]
    366.93607862   346.08986683   365.87173192]]
    366.96661755   349.43684704   367.50580857]]
    366.98867041   328.99312461   336.66803391]]
    367.00777153   329.58871935   336.61934887]]
    367.01178332   346.13981694   365.88517681]]
    367.04129106   328.94751273   336.52986088]]
    367.08834375   346.19034478   365.898632  ]]
    367.09269104   328.90312772   336.39406598]]
    367.12051366   345.51277718   358.9064077 ]]
    367.13604565   329.34674774   336.27899186]]
    367.14274678   328.86000484   336.26086768]]
    367.16576882   346.24146134   365.91209342]]
    367.19131536   328.81818212   336.13052566]]
    367.23560642   329.155389     336.01049501]]
    367.23823376   328.77770329   336.00335728]]
    367.24406488   346.29317663   365.92555693]]
    367.28330508   328.73862718   335.87976605]]
    367.32323465   346.34549903   365.93901836]]
    367.32629022   328.70104091   335.76028127]]
    367.36689267   328.66508451   335.64561948]]
    367.38882989   328.84895593   335.58420643]]
    367.40008717   349.56815234   367.43740614]]
    367.40473609   328.63099482   335.536779  ]]
    367.43933033   328.599184     335.43518669]]
    367.47001824   328.5703806    335.34292763]]
    367.47093713   328.66873598   335.33690059]]
    367.48418077   346.4519858    365.96591885]]
    367.49588906   328.54588313   335.26310634]]
    367.51190547   328.57409505   335.20855132]]
    367.52728027   328.52092998   335.16204043]]
    367.52773973   328.53200411   335.15904794]]
    367.56593917   346.50618167   365.97935897]]
    367.64851944   346.56102017   365.99279423]]
    367.73187105   346.61648367   366.00622492]]
    367.81592242   346.67254148   366.01965343]]
    367.81746945   349.69562728   367.3760751 ]]
    367.90064307   346.72916149   366.03306522]]
    367.90361921   345.99856482   358.78420358]]
    367.90534319   364.91284125   393.55652524]]
    367.98601857   346.78632613   366.04644768]]
    367.99002841   364.77405534]]
    368.07200979   346.84402172   366.05980033]]
    368.13385563   328.9734841    324.34807428]]
    368.15857063   346.90223005   366.0731234 ]]
    368.21858293   349.8189617    367.3214098 ]]
    368.23778152   364.99950898]]
    368.24564808   346.96092818   366.08641794]]
    368.33318246   347.02008838   366.09968588]]
    368.42110817   347.07967831   366.11293015]]
    368.50935467   347.13966138   366.12615463]]
    368.59784797   347.19999744   366.13936418]]
    368.60324421   349.93785261   367.27298553]]
    368.77527264   347.32155555   366.16576209]]
    368.77813165   346.49481932   358.63369004]]
    368.86405583   347.3826884    366.17896391]]
    368.95060637   328.13368986   323.5866943 ]]
    368.95279361   347.44399834   366.19217728]]
    368.97096749   350.04986147   367.22905449]]
    369.12989154   347.56698537   366.21866808]]
    369.17893034   327.63263143   328.54958562]]
    369.21121905   327.63355945   328.62567689]]
    369.21815001   347.62858852   366.23195963]]
    369.26439598   327.63665067   328.58527051]]
    369.30399156   366.05185954]]
    369.30616021   347.6902217    366.24529067]]
    369.31951306   327.64317929   328.29275931]]
    369.32106843   350.15420796   367.18894522]]
    369.38570551   327.64891619   328.1628121 ]]
    369.39389035   347.75185719   366.258667  ]]
    369.43938182   327.65448725   328.03745978]]
    369.46758589   327.73178034   323.67949125]]
    369.48131464   347.81347025   366.27209386]]
    369.50093309   327.66099795   327.90513589]]
    369.56052123   327.66793415   327.77143277]]
    369.56841173   347.87503826   366.28557597]]
    369.59509573   346.99455544   358.51998907]]
    369.65516299   347.93653944   366.29911756]]
    369.68582704   327.68364937   327.4927862 ]]
    369.74155072   347.9979515    366.31272262]]
    369.75014213   327.69223979   327.34820419]]
    369.79719799   327.57423048   324.13015121]]
    369.81473284   327.70108921   327.19989701]]
    369.82755644   348.05925007   366.32639501]]
    369.91314818   348.12041341   366.34015724]]
    369.98265504   327.55279831   324.6631395 ]]
    370.00521448   327.7245863    326.71983581]]
    370.02843604   366.90562927]]
    370.06153701   327.72780046   326.54005137]]
    370.08307257   348.24235004   366.36802292]]
    370.08675858   327.59333786   325.14131306]]
    370.12930479   367.04286742]]
    370.13870493   327.6460382    325.53496706]]
    370.14200674   327.71314962   326.11768076]]
    370.15444677   327.68763063   325.85402702]]
    370.16773139   348.30329733   366.381953  ]]
    370.25229533   348.36430154   366.39583782]]
    370.26163158   350.42267008   367.09031657]]
    370.29106048   367.27833869]]
    370.33680655   348.42539694   366.40966379]]
    370.42130495   348.48661678   366.42341536]]
    370.43452658   347.50144365   358.40882922]]
    370.53817018   350.49761266   367.0640387 ]]
    370.61571245   367.66639032]]
    370.6379176    367.67069746]]
    370.67490644   348.67132837   366.46411538]]
    370.75927706   348.73327964   366.47753827]]
    370.79639968   350.56542534   367.04065933]]
    371.01110771   348.92003123   366.51735105]]
    371.03659371   350.62619338   367.0199106 ]]
    371.09443419   348.98250585   366.53045022]]
    371.17734732   349.04505067   366.54345298]]
    371.25847757   348.01329624   358.31686973]]
    371.25910549   350.68004625   367.00153843]]
    371.25977777   349.10763781   366.55635261]]
    371.34165153   349.17023734   366.56914211]]
    371.46437114   350.72713633   366.98528932]]
    371.50340752   349.29534288   366.5943614 ]]
    371.58311534   349.35777761   366.60677582]]
    371.65289213   350.76763789   366.9709164 ]]
    371.73970957   349.48221332   366.63117367]]
    371.81638382   349.54412671   366.64314012]]
    371.89182271   349.60577354   366.65493984]]
    371.96590139   349.66710196   366.66656375]]
    371.98194233   350.82966627   366.94686818]]
    372.03848661   349.7280565    366.67800257]]
    372.08222605   348.53032523   358.23748605]]
    372.12367385   350.85162542   366.93676233]]
    372.17881541   349.84860133   366.70028699]]
    372.24627002   349.90805874   366.71111326]]
    372.25082678   350.86785472   366.92767486]]
    372.31163019   349.96687723   366.72171608]]
    372.36427842   350.8785996    366.91943596]]
    372.37471502   350.02497893   366.73208596]]
    372.43533173   350.08228067   366.74221365]]
    372.46466856   350.88410806   366.91188588]]
    372.49327493   350.13869363   366.75209024]]
    372.54832582   350.19412301   366.76170731]]
    372.55263425   350.88462928   366.90488018]]
    372.60025141   350.24846773   366.77105719]]
    372.69371886   350.35346518   366.78892935]]
    372.69380178   350.87170329   366.89199707]]
    372.73471631   350.40388107   366.79744191]]
    372.79267697   350.84178294   366.87991369]]
    372.80374716   350.49989816   366.81360876]]
    372.82771774   350.82104593   366.87395516]]
    372.83112819   350.54521566   366.82126552]]
    372.85328514   350.588536     366.82864442]]
    372.86984138   350.62969602   366.83575492]]
    372.87176605   350.76916134   366.86187043]]
    372.88039883   350.66852377   366.84261087]]
    372.88181483   350.73845036   366.85564059]]
    372.88453744   350.70483842   366.84923118]]
    373.71319785   349.57657138   358.12292762]]
    373.96786779   367.15963109   393.06344241]]
    373.99999576   360.00000138   363.00000558]]
    374.7437933    394.54321378]]
    376.11888655   351.16544315   358.05697695]]
    376.51674567   367.44881431   392.22289068]]
    377.69101574   352.22873736   358.08098438]]
    378.46653193   352.75908577   358.11248976]]
    379.23474804   353.28757856   358.15654038]]
    379.99511019   353.81351355   358.21277961]]
    380.74734338   354.33621888   358.28082823]]
    381.49117036   354.85506239   358.36030547]]
    382.22633343   355.36945546   358.45082211]]
    382.94908747   355.87741322   358.55309118]]
    383.66144257   356.37837082   358.66494315]]
    384.36418423   356.8719902    358.78503099]]
    385.73938069   357.83571022   359.04704505]]
    386.41129726   358.30509763   359.18802114]]
    387.07227857   358.76586517   359.33547089]]
    387.72245524   359.21780407   359.48893844]]
    388.99032218   360.09489906   359.81289327]]
    390.21394566   360.93528012   360.15815182]]
    390.80907051   361.34166966   360.33830513]]
    391.39306422   361.73891543   360.52324438]]
    391.96592919   362.12708878   360.71280058]]
    392.52768765   362.50629783   360.9068116 ]]
    393.07838762   362.87668422   361.10511482]]
    393.61810333   363.23841927   361.30754248]]
    394.15876537   363.5985767    361.51196897]]
    395.73112142   364.65833558   362.1731477 ]]
    396.23872496   365.00122041   362.40603846]]
    397.22748367   365.66635701   362.88166034]]
    397.70766283   365.987631     363.12188447]]
    398.17770762   366.30057912   363.36237259]]
    399.52200351   367.18702288   364.07806787]]
    399.94640344   367.46430226   364.3128206 ]]
    400.35796989   367.73207516   364.54488514]]
    401.50809893   368.4748496    365.22080438]]
    401.86017983   368.70066578   365.43739059]]
    402.19476446   368.91458738   365.64861533]]
    402.51061517   369.11592507   365.85372096]]
    403.08118178   369.47816098   366.24211572]]
    403.33369653   369.63792731   366.42354169]]
    403.56325035   369.78295127   366.59519321]]
    403.76938566   369.91309314   366.75616595]]
    404.24859347   370.21627643   367.16732693]]
    404.49450191   370.37264629   367.37115341]]
    404.61376804   370.46727325   367.48574678]]
    404.74812498   370.52801776   367.55474321]]
    404.91480737   370.70067057   367.78124373]]
    404.98396582   370.71816766   367.77489118]]
    61/58    0.000    0.000    0.000    0.000 pyparsing.py:109(_ustr)
   Ordered by: standard name
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
  254/252    0.000    0.000    0.000    0.000 pyparsing.py:283(__init__)
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
100
100
100
100
100
100
100
100
100
100
100
100
101
101
101
101
101
101
101
101
101
101
101
101
102
102
102
102
102
102
102
102
102
102
102
102
103
103
103
103
103
103
103
103
103
103
103
103
104
104
104
104
104
104
104
104
104
104
104
104
105
105
105
105
105
105
105
105
105
105
105
105
106
106
106
106
106
106
106
106
106
106
106
106
107
107
107
107
107
107
107
107
107
107
107
107
108
108
108
108
108
108
108
108
108
108
108
108
109
109
109
109
109
109
109
109
109
109
109
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
110
110
110
110
110
110
110
110
110
110
110
111
111
111
111
111
111
111
111
111
111
111
112
112
112
112
112
112
112
112
112
112
112
113
113
113
113
113
113
113
113
113
113
114
114
114
114
114
114
114
114
114
114
115
115
115
115
115
115
115
115
115
115
116
116
116
116
116
116
116
116
116
116
117
117
117
117
117
117
117
117
117
117
118
118
118
118
118
118
118
118
118
118
119
119
119
119
119
119
119
119
119
119
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
12
120
120
120
120
120
120
120
120
120
120
121
121
121
121
121
121
121
121
121
121
122
122
122
122
122
122
122
122
122
122
123
123
123
123
123
123
123
123
123
123
124
124
124
124
124
124
124
124
124
124
125
125
125
125
125
125
125
125
125
125
126
126
126
126
126
126
126
126
126
126
127
127
127
127
127
127
127
127
127
127
128
128
128
128
128
128
128
128
128
128
129
129
129
129
129
129
129
129
129
129
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
130
130
130
130
130
130
130
130
130
130
131
131
131
131
131
131
131
131
131
131
132
132
132
132
132
132
132
132
132
133
133
133
133
133
133
133
133
133
134
134
134
134
134
134
134
134
134
135
135
135
135
135
135
135
135
136
136
136
136
136
136
136
136
137
137
137
137
137
137
137
137
138
138
138
138
138
138
138
138
139
139
139
139
139
139
139
139
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
14
140
140
140
140
140
140
140
141
141
141
141
141
141
141
142
142
142
142
142
142
142
143
143
143
143
143
143
143
144
144
144
144
144
144
144
145
145
145
145
145
145
145
146
146
146
146
146
146
146
147
147
147
147
147
147
147
148
148
148
148
148
148
148
149
149
149
149
149
149
149
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
15
150
150
150
150
150
150
150
151
151
151
151
151
151
151
152
152
152
152
152
152
152
153
153
153
153
153
153
153
154
154
154
154
154
154
154
155
155
155
155
155
155
155
156
156
156
156
156
156
156
157
157
157
157
157
157
157
158
158
158
158
158
158
158
159
159
159
159
159
159
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
16
160
160
160
160
160
160
161
161
161
161
161
161
162
162
162
162
162
162
163
163
163
163
163
163
164
164
164
164
164
164
165
165
165
165
165
165
166
166
166
166
166
166
167
167
167
167
167
167
168
168
168
168
168
168
169
169
169
169
169
169
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
17
170
170
170
170
170
170
171
171
171
171
171
171
172
172
172
172
172
172
173
173
173
173
173
173
174
174
174
174
174
174
175
175
175
175
175
175
176
176
176
176
176
176
177
177
177
177
177
177
178
178
178
178
178
178
179
179
179
179
179
179
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
18
180
180
180
180
180
180
181
181
181
181
181
181
182
182
182
182
182
182
183
183
183
183
183
183
184
184
184
184
184
184
185
185
185
185
185
185
186
186
186
186
186
186
187
187
187
187
187
187
188
188
188
188
188
188
189
189
189
189
189
189
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
19
190
190
190
190
190
190
191
191
191
191
191
191
192
192
192
192
192
192
193
193
193
193
193
193
194
194
194
194
194
194
195
195
195
195
195
195
196
196
196
196
196
196
197
197
197
197
197
197
198
198
198
198
198
198
199
199
199
199
199
199
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
20
200
200
200
200
200
200
201
201
201
201
201
201
202
202
202
202
202
202
203
203
203
203
203
203
204
204
204
204
204
204
205
205
205
205
205
205
206
206
206
206
206
206
207
207
207
207
207
207
208
208
208
208
208
208
209
209
209
209
209
209
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
21
210
210
210
210
210
210
211
211
211
211
211
211
212
212
212
212
212
212
213
213
213
213
213
213
214
214
214
214
214
214
215
215
215
215
215
215
216
216
216
216
216
216
217
217
217
217
217
217
218
218
218
218
218
218
219
219
219
219
219
219
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
22
220
220
220
220
220
220
221
221
221
221
221
221
222
222
222
222
222
222
223
223
223
223
223
223
224
224
224
224
224
224
225
225
225
225
225
225
226
226
226
226
226
226
227
227
227
227
227
227
228
228
228
228
228
228
229
229
229
229
229
229
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
23
230
230
230
230
230
230
231
231
231
231
231
231
232
232
232
232
232
232
233
233
233
233
233
233
234
234
234
234
234
234
235
235
235
235
235
235
236
236
236
236
236
236
237
237
237
237
237
237
238
238
238
238
238
238
239
239
239
239
239
239
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
24
240
240
240
240
240
240
241
241
241
241
241
241
242
242
242
242
242
242
243
243
243
243
243
243
244
244
244
244
244
244
245
245
245
245
245
245
246
246
246
246
246
246
247
247
247
247
247
247
248
248
248
248
248
248
249
249
249
249
249
249
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
25
250
250
250
250
250
250
251
251
251
251
251
251
252
252
252
252
252
252
253
253
253
253
253
253
254
254
254
254
254
254
255
255
255
255
255
255
256
256
256
256
256
256
257
257
257
257
257
257
258
258
258
258
258
258
259
259
259
259
259
259
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
26
260
260
260
260
260
260
261
261
261
261
261
261
262
262
262
262
262
262
263
263
263
263
263
263
264
264
264
264
264
264
265
265
265
265
265
265
266
266
266
266
266
266
267
267
267
267
267
267
268
268
268
268
268
268
269
269
269
269
269
269
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
27
270
270
270
270
270
270
271
271
271
271
271
271
272
272
272
272
272
272
273
273
273
273
273
273
274
274
274
274
274
274
275
275
275
275
275
275
276
276
276
276
276
276
277
277
277
277
277
277
278
278
278
278
278
278
279
279
279
279
279
279
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
28
280
280
280
280
280
281
281
281
281
281
282
282
282
282
282
283
283
283
283
283
284
284
284
284
284
285
285
285
285
285
286
286
286
286
286
287
287
287
287
287
288
288
288
288
288
289
289
289
289
289
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
29
290
290
290
290
290
291
291
291
291
291
292
292
292
292
292
293
293
293
293
293
294
294
294
294
294
295
295
295
295
295
296
296
296
296
296
297
297
297
297
297
298
298
298
298
298
299
299
299
299
299
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
30
300
300
300
300
300
301
301
301
301
301
302
302
302
302
302
303
303
303
303
303
304
304
304
304
304
305
305
305
305
305
306
306
306
306
306
307
307
307
307
307
308
308
308
308
308
309
309
309
309
309
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
31
310
310
310
310
310
311
311
311
311
311
312
312
312
312
312
313
313
313
313
313
314
314
314
314
314
315
315
315
315
315
316
316
316
316
316
317
317
317
317
317
318
318
318
318
318
319
319
319
319
319
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
32
320
320
320
320
320
321
321
321
321
321
322
322
322
322
322
323
323
323
323
323
324
324
324
324
324
325
325
325
325
325
326
326
326
326
326
327
327
327
327
328
328
328
328
329
329
329
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
33
330
330
330
331
331
331
332
332
333
333
334
334
335
335
336
336
337
337
338
338
339
339
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
34
340
340
341
341
342
342
343
343
344
344
345
345
346
346
347
347
348
348
349
349
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
35
350
350
351
351
352
352
353
353
354
354
355
355
356
356
357
357
358
358
359
359
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
36
360
360
361
361
362
362
363
363
364
364
365
365
366
366
367
367
368
369
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
37
370
371
372
373
374
375
376
377
378
379
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
38
380
381
382
383
384
385
386
387
388
389
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
39
390
391
392
393
394
395
396
397
398
399
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
40
400
401
402
403
404
405
406
407
408
409
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
41
410
411
412
413
414
415
416
417
418
419
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
42
420
421
422
423
424
425
426
427
428
429
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
43
430
431
432
433
434
435
436
437
438
439
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
44
440
441
442
443
444
445
446
447
448
449
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
45
450
451
452
453
454
455
456
457
458
459
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
46
460
461
462
463
464
465
466
467
468
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
47
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
48
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
49
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
5
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
50
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
51
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
52
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
53
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
54
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
55
56
56
56
56
56
56
56
56
56
56
56
56
56
56
56
56
56
56
56
56
56
56
56
57
57
57
57
57
57
57
57
57
57
57
57
57
57
57
57
57
57
57
57
57
57
57
58
58
58
58
58
58
58
58
58
58
58
58
58
58
58
58
58
58
58
58
58
58
59
59
59
59
59
59
59
59
59
59
59
59
59
59
59
59
59
59
59
59
59
59
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
60
61
61
61
61
61
61
61
61
61
61
61
61
61
61
61
61
61
61
61
61
61
61
62
62
62
62
62
62
62
62
62
62
62
62
62
62
62
62
62
62
62
62
62
62
63
63
63
63
63
63
63
63
63
63
63
63
63
63
63
63
63
63
63
63
63
63
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
64
65
65
65
65
65
65
65
65
65
65
65
65
65
65
65
65
65
65
65
65
65
66
66
66
66
66
66
66
66
66
66
66
66
66
66
66
66
66
66
66
66
66
67
67
67
67
67
67
67
67
67
67
67
67
67
67
67
67
67
67
67
67
67
68
68
68
68
68
68
68
68
68
68
68
68
68
68
68
68
68
68
68
68
69
69
69
69
69
69
69
69
69
69
69
69
69
69
69
69
69
69
69
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
70
70
70
70
70
70
70
70
70
70
70
70
70
70
70
70
70
70
70
71
71
71
71
71
71
71
71
71
71
71
71
71
71
71
71
71
71
71
72
72
72
72
72
72
72
72
72
72
72
72
72
72
72
72
72
72
72
73
73
73
73
73
73
73
73
73
73
73
73
73
73
73
73
73
74
74
74
74
74
74
74
74
74
74
74
74
74
74
74
74
74
75
75
75
75
75
75
75
75
75
75
75
75
75
75
75
75
76
76
76
76
76
76
76
76
76
76
76
76
76
76
76
76
77
77
77
77
77
77
77
77
77
77
77
77
77
77
77
77
78
78
78
78
78
78
78
78
78
78
78
78
78
78
78
78
79
79
79
79
79
79
79
79
79
79
79
79
79
79
79
79
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
80
80
80
80
80
80
80
80
80
80
80
80
80
80
80
80
81
81
81
81
81
81
81
81
81
81
81
81
81
81
81
81
82
82
82
82
82
82
82
82
82
82
82
82
82
82
82
82
83
83
83
83
83
83
83
83
83
83
83
83
83
83
83
83
84
84
84
84
84
84
84
84
84
84
84
84
84
84
84
84
85
85
85
85
85
85
85
85
85
85
85
85
85
85
85
85
86
86
86
86
86
86
86
86
86
86
86
86
86
86
86
86
87
87
87
87
87
87
87
87
87
87
87
87
87
87
88
88
88
88
88
88
88
88
88
88
88
88
88
88
89
89
89
89
89
89
89
89
89
89
89
89
89
89
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
90
90
90
90
90
90
90
90
90
90
90
90
90
90
91
91
91
91
91
91
91
91
91
91
91
91
91
91
92
92
92
92
92
92
92
92
92
92
92
92
92
93
93
93
93
93
93
93
93
93
93
93
93
93
94
94
94
94
94
94
94
94
94
94
94
94
94
95
95
95
95
95
95
95
95
95
95
95
95
95
96
96
96
96
96
96
96
96
96
96
96
96
96
97
97
97
97
97
97
97
97
97
97
97
97
98
98
98
98
98
98
98
98
98
98
98
98
99
99
99
99
99
99
99
99
99
99
99
99
ok
ok2
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
point
step is none
step is none
step is none
step is none
step is none
step is none
step is none
        1    0.000    0.000    0.001    0.001 ConfigParser.py:231(RawConfigParser)
        1    0.000    0.000    0.001    0.001 ElementPath.py:59(<module>)
        1    0.000    0.000    0.001    0.001 __init__.py:1604(get_metadata)
        1    0.000    0.000    0.001    0.001 __init__.py:1614(get_metadata_lines)
        1    0.000    0.000    0.001    0.001 __init__.py:1717(_get)
        1    0.000    0.000    0.001    0.001 __init__.py:1746(build)
        1    0.000    0.000    0.001    0.001 __init__.py:1799(__new__)
        1    0.000    0.000    0.001    0.001 __init__.py:2309(EntryPoint)
        1    0.000    0.000    0.001    0.001 _mathtext_data.py:3(<module>)
        1    0.000    0.000    0.001    0.001 _multivariate.py:4(<module>)
        1    0.000    0.000    0.001    0.001 _plotutils.py:1(<module>)
        1    0.000    0.000    0.001    0.001 artist.py:877(ArtistInspector)
        1    0.000    0.000    0.001    0.001 cbook.py:990(mkdirs)
        1    0.000    0.000    0.001    0.001 colors.py:48(<module>)
        1    0.000    0.000    0.001    0.001 core.py:21(<module>)
        1    0.000    0.000    0.001    0.001 difflib.py:29(<module>)
        1    0.000    0.000    0.001    0.001 encoder.py:2(<module>)
        1    0.000    0.000    0.001    0.001 foreign.py:11(<module>)
        1    0.000    0.000    0.001    0.001 frame.py:4(<module>)
        1    0.000    0.000    0.001    0.001 index.py:124(DatetimeIndex)
        1    0.000    0.000    0.001    0.001 kernel_regression.py:29(<module>)
        1    0.000    0.000    0.001    0.001 lilliefors.py:18(<module>)
        1    0.000    0.000    0.001    0.001 markers.py:78(<module>)
        1    0.000    0.000    0.001    0.001 markers.py:97(MarkerStyle)
        1    0.000    0.000    0.001    0.001 moments.py:4(<module>)
        1    0.000    0.000    0.001    0.001 numbers.py:6(<module>)
        1    0.000    0.000    0.001    0.001 panel.py:3(<module>)
        1    0.000    0.000    0.001    0.001 panel.py:4(<module>)
        1    0.000    0.000    0.001    0.001 panelnd.py:8(create_nd_panel_factory)
        1    0.000    0.000    0.001    0.001 patches.py:2965(ArrowStyle)
        1    0.000    0.000    0.001    0.001 pickle.py:25(<module>)
        1    0.000    0.000    0.001    0.001 plistlib.py:51(<module>)
        1    0.000    0.000    0.001    0.001 pyplot.py:1781(get_plot_commands)
        1    0.000    0.000    0.001    0.001 quoprimime.py:27(<module>)
        1    0.000    0.000    0.001    0.001 scale.py:10(<module>)
        1    0.000    0.000    0.001    0.001 specifiers.py:213(LegacySpecifier)
        1    0.000    0.000    0.001    0.001 stata.py:11(<module>)
        1    0.000    0.000    0.001    0.001 tarfile.py:31(<module>)
        1    0.000    0.000    0.001    0.001 threading.py:1(<module>)
        1    0.000    0.000    0.001    0.001 tools.py:1(<module>)
        1    0.000    0.000    0.001    0.001 trivial.py:7(<module>)
        1    0.000    0.000    0.001    0.001 urllib2.py:827(AbstractBasicAuthHandler)
        1    0.000    0.000    0.001    0.001 version.py:63(StrictVersion)
        1    0.000    0.000    0.001    0.001 what3words.py:21(What3Words)
        1    0.000    0.000    0.001    0.001 what3words.py:3(<module>)
        1    0.000    0.000    0.001    0.001 zipfile.py:3(<module>)
        1    0.000    0.000    0.001    0.001 zipfile.py:501(ZipExtFile)
        1    0.000    0.000    0.001    0.001 zipfile.py:722(__init__)
        1    0.001    0.001    0.001    0.001 __init__.py:17(<module>)
        1    0.001    0.001    0.001    0.001 __init__.py:24(<module>)
        1    0.001    0.001    0.001    0.001 _trustregion_dogleg.py:1(<module>)
        1    0.001    0.001    0.001    0.001 _validation.py:1(<module>)
        1    0.001    0.001    0.001    0.001 arpack.py:7(<module>)
        1    0.001    0.001    0.001    0.001 backend_agg.py:21(<module>)
        1    0.001    0.001    0.001    0.001 basic.py:3(<module>)
        1    0.001    0.001    0.001    0.001 bk_filter.py:1(<module>)
        1    0.001    0.001    0.001    0.001 build.py:8(<module>)
        1    0.001    0.001    0.001    0.001 calc_lwork.py:8(<module>)
        1    0.001    0.001    0.001    0.001 chainmap.py:1(<module>)
        1    0.001    0.001    0.001    0.001 cobyla.py:11(<module>)
        1    0.001    0.001    0.001    0.001 constraint.py:7(<module>)
        1    0.001    0.001    0.001    0.001 cov_struct.py:1(<module>)
        1    0.001    0.001    0.001    0.001 distance.py:63(<module>)
        1    0.001    0.001    0.001    0.001 extras.py:10(<module>)
        1    0.001    0.001    0.001    0.001 factorplots.py:4(<module>)
        1    0.001    0.001    0.001    0.001 fftpack.py:32(<module>)
        1    0.001    0.001    0.001    0.001 fitpack.py:23(<module>)
        1    0.001    0.001    0.001    0.001 flinalg.py:5(<module>)
        1    0.001    0.001    0.001    0.001 fromnumeric.py:3(<module>)
        1    0.001    0.001    0.001    0.001 kalmanfilter.py:19(<module>)
        1    0.001    0.001    0.001    0.001 kde.py:20(<module>)
        1    0.001    0.001    0.001    0.001 kernel_regression.py:673(TestRegCoefC)
        1    0.001    0.001    0.001    0.001 l1_slsqp.py:4(<module>)
        1    0.001    0.001    0.001    0.001 lapack.py:217(<module>)
        1    0.001    0.001    0.001    0.001 lbfgsb.py:9(<module>)
        1    0.001    0.001    0.001    0.001 lilliefors.py:96(get_lilliefors_table)
        1    0.001    0.001    0.001    0.001 message.py:92(Message)
        1    0.001    0.001    0.001    0.001 minpack.py:1(<module>)
        1    0.001    0.001    0.001    0.001 norms.py:1(<module>)
        1    0.001    0.001    0.001    0.001 numpy.py:47(<module>)
        1    0.001    0.001    0.001    0.001 packers.py:4(<module>)
        1    0.001    0.001    0.001    0.001 pickle.py:1(<module>)
        1    0.001    0.001    0.001    0.001 proportion.py:8(<module>)
        1    0.001    0.001    0.001    0.001 pseudo_diffs.py:3(<module>)
        1    0.001    0.001    0.001    0.001 quadpack.py:3(<module>)
        1    0.001    0.001    0.001    0.001 recfunctions.py:7(<module>)
        1    0.001    0.001    0.001    0.001 signaltools.py:4(<module>)
        1    0.001    0.001    0.001    0.001 spectral.py:2(<module>)
        1    0.001    0.001    0.001    0.001 stattools.py:3(<module>)
        1    0.001    0.001    0.001    0.001 triangulation.py:1(<module>)
        1    0.001    0.001    0.001    0.001 zipfile.py:799(_RealGetContents)
        2    0.000    0.000    0.001    0.000 _distn_infrastructure.py:1785(ppf)
        2    0.000    0.000    0.001    0.000 numeric.py:1609(array_repr)
        2    0.000    0.000    0.001    0.000 pyparsing.py:2764(parseImpl)
        2    0.000    0.000    0.001    0.000 util.py:1(<module>)
        2    0.000    0.000    0.001    0.001 pyparsing.py:3359(srange)
        2    0.001    0.000    0.001    0.001 six.py:1(<module>)
        2    0.001    0.001    0.001    0.001 __init__.py:14(<module>)
        3    0.000    0.000    0.001    0.000 <string>:1(_held_figure)
        3    0.000    0.000    0.001    0.000 __init__.py:1957(_has)
        3    0.000    0.000    0.001    0.000 panel.py:1428(_add_aggregate_operations)
        4    0.000    0.000    0.001    0.000 __init__.py:1774(load)
        4    0.000    0.000    0.001    0.000 __init__.py:1837(zipinfo)
        4    0.000    0.000    0.001    0.000 generic.py:4112(_add_numeric_operations)
        4    0.000    0.000    0.001    0.000 pyparsing.py:3002(__init__)
        4    0.001    0.000    0.001    0.000 {posix.fdopen}
        5    0.001    0.000    0.001    0.000 data.py:3(<module>)
        6    0.000    0.000    0.001    0.000 <string>:1(non_reentrant)
        6    0.000    0.000    0.001    0.000 __init__.py:2651(from_filename)
        6    0.000    0.000    0.001    0.000 core.py:113(iter_style_files)
        6    0.000    0.000    0.001    0.000 patches.py:1703(_pprint_styles)
        6    0.000    0.000    0.001    0.000 warnings.py:45(filterwarnings)
        7    0.000    0.000    0.001    0.000 nonlin.py:1488(_nonlin_wrapper)
        7    0.000    0.000    0.001    0.000 rcsetup.py:270(validate_colorlist)
        8    0.000    0.000    0.001    0.000 __init__.py:198(u)
       10    0.000    0.000    0.001    0.000 _version.py:114(_compare)
       10    0.000    0.000    0.001    0.000 colors.py:750(from_list)
       11    0.000    0.000    0.001    0.000 decorator.py:148(make)
       11    0.000    0.000    0.001    0.000 decorator.py:87(__init__)
       11    0.001    0.000    0.001    0.000 {compile}
       12    0.000    0.000    0.001    0.000 __init__.py:2250(normalize_path)
       12    0.000    0.000    0.001    0.000 contextlib.py:21(__exit__)
       13    0.000    0.000    0.001    0.000 path.py:103(__init__)
       14    0.000    0.000    0.001    0.000 __init__.py:1008(getLogger)
       14    0.000    0.000    0.001    0.000 __init__.py:1550(getLogger)
       15    0.000    0.000    0.001    0.000 ops.py:116(add_methods)
       17    0.000    0.000    0.001    0.000 abc.py:105(register)
       18    0.000    0.000    0.001    0.000 cbook.py:189(deprecate)
       22    0.000    0.000    0.001    0.000 linesearch.py:439(_quadmin)
       24    0.000    0.000    0.001    0.000 pyparsing.py:2729(parseImpl)
       24    0.001    0.000    0.001    0.000 {posix.access}
       26    0.000    0.000    0.001    0.000 __init__.py:2056(find_distributions)
       26    0.000    0.000    0.001    0.000 __init__.py:2991(_find_adapter)
       26    0.000    0.000    0.001    0.000 pyparsing.py:2814(parseImpl)
       26    0.001    0.000    0.001    0.000 __init__.py:2984(_get_mro)
       34    0.000    0.000    0.001    0.000 config.py:410(register_option)
       34    0.000    0.000    0.001    0.000 config.py:721(inner)
       34    0.000    0.000    0.001    0.000 pyparsing.py:1226(__add__)
       34    0.000    0.000    0.001    0.000 pyparsing.py:2351(__init__)
       37    0.000    0.000    0.001    0.000 __init__.py:2690(insert_on)
       40    0.000    0.000    0.001    0.000 core.py:109(get_object_signature)
       41    0.000    0.000    0.001    0.000 pyparsing.py:2234(__init__)
       50    0.000    0.000    0.001    0.000 colors.py:334(to_rgba)
       54    0.000    0.000    0.001    0.000 pyplot.py:2409(<lambda>)
       55    0.000    0.000    0.001    0.000 inspect.py:845(formatargspec)
       64    0.000    0.000    0.001    0.000 posixpath.py:350(abspath)
       65    0.000    0.000    0.001    0.000 copy.py:306(_reconstruct)
       65    0.000    0.000    0.001    0.000 function_base.py:3832(append)
       65    0.000    0.000    0.001    0.000 pyparsing.py:830(copy)
       65    0.000    0.000    0.001    0.000 shape_base.py:179(vstack)
       66    0.000    0.000    0.001    0.000 copy.py:66(copy)
       66    0.000    0.000    0.001    0.000 nosetester.py:181(__init__)
       67    0.001    0.000    0.001    0.000 cm.py:34(revcmap)
       70    0.001    0.000    0.001    0.000 posixpath.py:321(normpath)
       72    0.000    0.000    0.001    0.000 cm.py:51(_reverse_cmap_spec)
       72    0.000    0.000    0.001    0.000 version.py:246(__str__)
       72    0.000    0.000    0.001    0.000 version.py:351(_cmpkey)
       74    0.000    0.000    0.001    0.000 __init__.py:1355(safe_name)
       74    0.000    0.000    0.001    0.000 __init__.py:748(add)
       78    0.000    0.000    0.001    0.000 re.py:144(sub)
       79    0.000    0.000    0.001    0.000 docstring.py:128(<lambda>)
       90    0.001    0.000    0.001    0.000 rcsetup.py:77(validate_bool)
      126    0.000    0.000    0.001    0.000 rcsetup.py:237(validate_color)
      131    0.001    0.000    0.001    0.000 _methods.py:43(_count_reduce_items)
      132    0.000    0.000    0.001    0.000 linalg.py:106(_makearray)
      132    0.000    0.000    0.001    0.000 linalg.py:139(_commonType)
      169    0.000    0.000    0.001    0.000 {all}
      169    0.001    0.000    0.001    0.000 functools.py:17(update_wrapper)
      171    0.000    0.000    0.001    0.000 sre_parse.py:178(__init__)
      174    0.000    0.000    0.001    0.000 colors.py:214(is_color_like)
      174    0.001    0.000    0.001    0.000 colors.py:265(to_rgb)
      189    0.000    0.000    0.001    0.000 decorators.py:136(__call__)
      213    0.000    0.000    0.001    0.000 type_check.py:237(iscomplexobj)
      253    0.000    0.000    0.001    0.000 sre_parse.py:225(_class_escape)
      370    0.000    0.000    0.001    0.000 decorators.py:178(__call__)
      416    0.001    0.000    0.001    0.000 {posix.lstat}
      446    0.000    0.000    0.001    0.000 sre_parse.py:257(_escape)
      470    0.000    0.000    0.001    0.000 __init__.py:2254(_normalize_cached)
      8/4    0.000    0.000    0.001    0.000 pyparsing.py:2261(leaveWhitespace)
      8/4    0.000    0.000    0.001    0.000 pyparsing.py:2628(leaveWhitespace)
      889    0.001    0.000    0.001    0.000 {method 'format' of 'str' objects}
     1198    0.001    0.000    0.001    0.000 six.py:180(find_module)
     1459    0.001    0.000    0.001    0.000 artist.py:991(is_alias)
     15/9    0.000    0.000    0.001    0.000 pyparsing.py:2334(copy)
     1588    0.001    0.000    0.001    0.000 sre_parse.py:90(__init__)
     1946    0.001    0.000    0.001    0.000 {method 'startswith' of 'unicode' objects}
     20/6    0.000    0.000    0.001    0.000 pyparsing.py:2622(parseImpl)
     2416    0.001    0.000    0.001    0.000 sre_parse.py:138(append)
     3208    0.001    0.000    0.001    0.000 sre_parse.py:126(__len__)
    24/12    0.000    0.000    0.001    0.000 pyparsing.py:2478(parseImpl)
    28/18    0.000    0.000    0.001    0.000 abc.py:148(__subclasscheck__)
        1    0.000    0.000    0.002    0.002 ConfigParser.py:88(<module>)
        1    0.000    0.000    0.002    0.002 __init__.py:18(pylab_setup)
        1    0.000    0.000    0.002    0.002 _axes.py:51(Axes)
        1    0.000    0.000    0.002    0.002 decoder.py:17(_floatconstants)
        1    0.000    0.000    0.002    0.002 eval.py:13(<module>)
        1    0.000    0.000    0.002    0.002 fontconfig_pattern.py:74(__init__)
        1    0.000    0.000    0.002    0.002 fractions.py:4(<module>)
        1    0.000    0.000    0.002    0.002 pyparsing.py:3442(_makeTags)
        1    0.000    0.000    0.002    0.002 pyparsing.py:3471(makeHTMLTags)
        1    0.000    0.000    0.002    0.002 table.py:21(<module>)
        1    0.000    0.000    0.002    0.002 tzwin.py:2(<module>)
        1    0.000    0.000    0.002    0.002 urlparse.py:29(<module>)
        1    0.000    0.000    0.002    0.002 version.py:27(<module>)
        1    0.000    0.000    0.002    0.002 {method 'decode' of 'str' objects}
        1    0.001    0.001    0.002    0.002 __init__.py:19(<module>)
        1    0.001    0.001    0.002    0.002 builtins.py:11(<module>)
        1    0.001    0.001    0.002    0.002 linalg.py:7(<module>)
        1    0.001    0.001    0.002    0.002 ltisys.py:4(<module>)
        1    0.001    0.001    0.002    0.002 manager.py:50(<module>)
        1    0.001    0.001    0.002    0.002 panel4d.py:1(<module>)
        1    0.001    0.001    0.002    0.002 skip.py:7(<module>)
        1    0.001    0.001    0.002    0.002 sysconfig.py:10(<module>)
        1    0.001    0.001    0.002    0.002 testing.py:1(<module>)
        1    0.001    0.001    0.002    0.002 tsa_model.py:1(<module>)
        1    0.001    0.001    0.002    0.002 util.py:2(<module>)
        1    0.002    0.002    0.002    0.002 _kernel_base.py:4(<module>)
        1    0.002    0.002    0.002    0.002 _ode.py:39(<module>)
        1    0.002    0.002    0.002    0.002 afm.py:34(<module>)
        1    0.002    0.002    0.002    0.002 axis.py:3(<module>)
        1    0.002    0.002    0.002    0.002 basic.py:5(<module>)
        1    0.002    0.002    0.002    0.002 bisect.py:1(<module>)
        1    0.002    0.002    0.002    0.002 blas.py:143(<module>)
        1    0.002    0.002    0.002    0.002 csv.py:4(<module>)
        1    0.002    0.002    0.002    0.002 engines.py:2(<module>)
        1    0.002    0.002    0.002    0.002 excel.py:3(<module>)
        1    0.002    0.002    0.002    0.002 irf.py:3(<module>)
        1    0.002    0.002    0.002    0.002 linsolve.py:1(<module>)
        1    0.002    0.002    0.002    0.002 measurements.py:31(<module>)
        1    0.002    0.002    0.002    0.002 morestats.py:5(<module>)
        1    0.002    0.002    0.002    0.002 multicomp.py:78(<module>)
        1    0.002    0.002    0.002    0.002 nanops.py:1(<module>)
        1    0.002    0.002    0.002    0.002 optimize.py:17(<module>)
        1    0.002    0.002    0.002    0.002 placefinder.py:3(<module>)
        1    0.002    0.002    0.002    0.002 power.py:32(<module>)
        1    0.002    0.002    0.002    0.002 shutil.py:5(<module>)
        2    0.000    0.000    0.002    0.001 six.py:662(exec_)
        2    0.001    0.001    0.002    0.001 _version.py:7(<module>)
        2    0.002    0.001    0.002    0.001 __init__.py:5(<module>)
        2    0.002    0.001    0.002    0.001 base.py:1(<module>)
        4    0.000    0.000    0.002    0.000 __init__.py:2062(find_eggs_in_zip)
        5    0.000    0.000    0.002    0.000 six.py:112(_resolve)
        7    0.000    0.000    0.002    0.000 ops.py:206(add_flex_arithmetic_methods)
        8    0.000    0.000    0.002    0.000 ops.py:137(add_special_arithmetic_methods)
       10    0.000    0.000    0.002    0.000 six.py:89(__get__)
       11    0.000    0.000    0.002    0.000 decorator.py:177(create)
       11    0.000    0.000    0.002    0.000 decorator.py:200(decorator)
       11    0.000    0.000    0.002    0.000 six.py:78(_import_module)
       12    0.000    0.000    0.002    0.000 contextlib.py:15(__enter__)
       15    0.001    0.000    0.002    0.000 ops.py:24(_create_methods)
       20    0.000    0.000    0.002    0.000 _version.py:55(__init__)
       22    0.000    0.000    0.002    0.000 re.py:139(search)
       22    0.000    0.000    0.002    0.000 wrapper.py:105(populate_wrapper)
       25    0.000    0.000    0.002    0.000 doccer.py:173(decorate)
       35    0.001    0.000    0.002    0.000 abc.py:86(__new__)
       44    0.002    0.000    0.002    0.000 {dir}
       46    0.000    0.000    0.002    0.000 wrapper.py:87(make_wrapper)
       61    0.001    0.000    0.002    0.000 decorators.py:262(make_signature)
       66    0.001    0.000    0.002    0.000 _methods.py:53(_mean)
       72    0.001    0.000    0.002    0.000 version.py:208(__init__)
      122    0.001    0.000    0.002    0.000 citiBikeExample.py:85(sampleFromX)
      144    0.000    0.000    0.002    0.000 cm.py:64(_generate_cmap)
      225    0.000    0.000    0.002    0.000 re.py:134(match)
      281    0.001    0.000    0.002    0.000 shape_base.py:60(atleast_2d)
      282    0.001    0.000    0.002    0.000 function_base.py:3251(add_newdoc)
      416    0.000    0.000    0.002    0.000 posixpath.py:139(islink)
      678    0.001    0.000    0.002    0.000 sre_compile.py:354(_simple)
     1315    0.002    0.000    0.002    0.000 {method 'setdefault' of 'dict' objects}
     4502    0.002    0.000    0.002    0.000 arrayprint.py:32(product)
     4503    0.002    0.000    0.002    0.000 arrayprint.py:744(__init__)
        1    0.000    0.000    0.003    0.003 fontconfig_pattern.py:7(<module>)
        1    0.001    0.001    0.003    0.003 cont2discrete.py:3(<module>)
        1    0.001    0.001    0.003    0.003 desc.py:9(<module>)
        1    0.001    0.001    0.003    0.003 pyplot.py:2095(_setup_pyplot_info_docstrings)
        1    0.002    0.002    0.003    0.003 __init__.py:29(<module>)
        1    0.002    0.002    0.003    0.003 arrayprint.py:5(<module>)
        1    0.002    0.002    0.003    0.003 family.py:3(<module>)
        1    0.002    0.002    0.003    0.003 parsers.py:3(<module>)
        1    0.002    0.002    0.003    0.003 plotting.py:3(<module>)
        1    0.002    0.002    0.003    0.003 polynomial.py:55(<module>)
        1    0.002    0.002    0.003    0.003 scanner.py:2(<module>)
        1    0.003    0.003    0.003    0.003 VOIGeneral.py:3(<module>)
        1    0.003    0.003    0.003    0.003 categorical.py:3(<module>)
        1    0.003    0.003    0.003    0.003 collections.py:3(<module>)
        1    0.003    0.003    0.003    0.003 descriptive.py:17(<module>)
        1    0.003    0.003    0.003    0.003 dis.py:1(<module>)
        1    0.003    0.003    0.003    0.003 expressions.py:7(<module>)
        1    0.003    0.003    0.003    0.003 gzip.py:4(<module>)
        1    0.003    0.003    0.003    0.003 io.py:34(<module>)
        1    0.003    0.003    0.003    0.003 loader.py:1(<module>)
        1    0.003    0.003    0.003    0.003 mimetools.py:1(<module>)
        1    0.003    0.003    0.003    0.003 mstats.py:74(<module>)
        1    0.003    0.003    0.003    0.003 ols.py:3(<module>)
        1    0.003    0.003    0.003    0.003 ops.py:2(<module>)
        1    0.003    0.003    0.003    0.003 regressionplots.py:12(<module>)
        1    0.003    0.003    0.003    0.003 sandwich_covariance.py:103(<module>)
        1    0.003    0.003    0.003    0.003 transforms.py:30(<module>)
        2    0.000    0.000    0.003    0.001 __init__.py:2182(declare_namespace)
        2    0.003    0.001    0.003    0.001 {posix.popen}
        4    0.000    0.000    0.003    0.001 __init__.py:71(search_function)
        4    0.000    0.000    0.003    0.001 tempfile.py:230(_mkstemp_inner)
        4    0.003    0.001    0.003    0.001 {posix.open}
        7    0.000    0.000    0.003    0.000 pyparsing.py:1695(__init__)
       12    0.000    0.000    0.003    0.000 fontconfig_pattern.py:122(parse)
       12    0.000    0.000    0.003    0.000 rcsetup.py:313(validate_font_properties)
       12    0.001    0.000    0.003    0.000 __init__.py:974(_open_file_or_url)
       39    0.003    0.000    0.003    0.000 {imp.find_module}
       65    0.000    0.000    0.003    0.000 fromnumeric.py:2651(mean)
       65    0.001    0.000    0.003    0.000 groupby.py:2184(_whitelist_method_generator)
       72    0.000    0.000    0.003    0.000 __init__.py:1363(safe_version)
       94    0.000    0.000    0.003    0.000 docstring.py:113(dedent_interpd)
      120    0.001    0.000    0.003    0.000 citiBikeExample.py:361(transformationDomainX)
      174    0.000    0.000    0.003    0.000 docstring.py:94(dedent)
      277    0.003    0.000    0.003    0.000 {method 'sub' of '_sre.SRE_Pattern' objects}
      360    0.003    0.000    0.003    0.000 {method 'trace' of 'numpy.ndarray' objects}
      496    0.003    0.000    0.003    0.000 {method 'search' of '_sre.SRE_Pattern' objects}
     1102    0.002    0.000    0.003    0.000 posixpath.py:68(join)
     4861    0.002    0.000    0.003    0.000 sre_parse.py:195(match)
     9014    0.003    0.000    0.003    0.000 {method 'startswith' of 'str' objects}
        1    0.000    0.000    0.004    0.004 font_manager.py:955(pickle_load)
        1    0.000    0.000    0.004    0.004 texmanager.py:35(<module>)
        1    0.000    0.000    0.004    0.004 texmanager.py:89(TexManager)
        1    0.000    0.000    0.004    0.004 version.py:201(Version)
        1    0.001    0.001    0.004    0.004 __init__.py:11(<module>)
        1    0.001    0.001    0.004    0.004 index.py:3287(_add_accessors)
        1    0.001    0.001    0.004    0.004 lines.py:4(<module>)
        1    0.001    0.001    0.004    0.004 multicomp.py:6(<module>)
        1    0.002    0.002    0.004    0.004 filters.py:31(<module>)
        1    0.002    0.002    0.004    0.004 groupby.py:2244(SeriesGroupBy)
        1    0.002    0.002    0.004    0.004 groupby.py:3153(DataFrameGroupBy)
        1    0.002    0.002    0.004    0.004 misc.py:1(<module>)
        1    0.002    0.002    0.004    0.004 tz.py:9(<module>)
        1    0.003    0.003    0.004    0.004 ElementTree.py:59(<module>)
        1    0.003    0.003    0.004    0.004 numerictypes.py:82(<module>)
        1    0.003    0.003    0.004    0.004 series.py:4(<module>)
        1    0.003    0.003    0.004    0.004 {cPickle.load}
        1    0.004    0.004    0.004    0.004 matfuncs.py:5(<module>)
        1    0.004    0.004    0.004    0.004 mathtext.py:19(<module>)
        2    0.003    0.002    0.004    0.002 common.py:3(<module>)
        2    0.003    0.002    0.004    0.002 function_base.py:1(<module>)
        2    0.004    0.002    0.004    0.002 __init__.py:10(<module>)
        3    0.004    0.001    0.004    0.001 __init__.py:2(<module>)
        4    0.004    0.001    0.004    0.001 {posix.unlink}
        7    0.002    0.000    0.004    0.001 config.py:763(is_instance_factory)
        8    0.000    0.000    0.004    0.001 __init__.py:840(__init__)
       14    0.000    0.000    0.004    0.000 pyparsing.py:1084(parseString)
       37    0.000    0.000    0.004    0.000 __init__.py:2214(fixup_namespace_packages)
       51    0.000    0.000    0.004    0.000 posixpath.py:364(realpath)
       51    0.001    0.000    0.004    0.000 posixpath.py:372(_joinrealpath)
       70    0.002    0.000    0.004    0.000 linesearch.py:405(_cubicmin)
       74    0.000    0.000    0.004    0.000 __init__.py:2448(__init__)
       96    0.004    0.000    0.004    0.000 sre_compile.py:258(_mk_bitmap)
      184    0.000    0.000    0.004    0.000 cbook.py:1118(dedent)
      360    0.001    0.000    0.004    0.000 fromnumeric.py:1233(trace)
      409    0.001    0.000    0.004    0.000 artist.py:929(get_valid_values)
    78/14    0.000    0.000    0.004    0.000 pyparsing.py:2358(parseImpl)
   302/14    0.001    0.000    0.004    0.000 pyparsing.py:957(_parseNoCache)
        1    0.000    0.000    0.005    0.005 core.py:123(read_style_directory)
        1    0.000    0.000    0.005    0.005 core.py:91(load_base_library)
        1    0.000    0.000    0.005    0.005 platform.py:10(<module>)
        1    0.000    0.000    0.005    0.005 text.py:3(<module>)
        1    0.001    0.001    0.005    0.005 decimal.py:116(<module>)
        1    0.001    0.001    0.005    0.005 elregress.py:14(<module>)
        1    0.002    0.002    0.005    0.005 __init__.py:52(<module>)
        1    0.002    0.002    0.005    0.005 cm.py:6(<module>)
        1    0.002    0.002    0.005    0.005 mixed_linear_model.py:97(<module>)
        1    0.003    0.003    0.005    0.005 exc.py:7(<module>)
        1    0.003    0.003    0.005    0.005 kernel_density.py:29(<module>)
        1    0.003    0.003    0.005    0.005 offsets.py:1(<module>)
        1    0.004    0.004    0.005    0.005 legend.py:23(<module>)
        1    0.004    0.004    0.005    0.005 pytables.py:4(<module>)
        1    0.005    0.005    0.005    0.005 result.py:1(<module>)
        1    0.005    0.005    0.005    0.005 runner.py:1(<module>)
       11    0.000    0.000    0.005    0.000 artist.py:883(__init__)
       11    0.002    0.000    0.005    0.000 artist.py:901(get_aliases)
       74    0.000    0.000    0.005    0.000 __init__.py:2460(from_location)
    13509    0.005    0.000    0.005    0.000 arrayprint.py:661(__init__)
        1    0.000    0.000    0.006    0.006 __init__.py:724(matplotlib_fname)
        1    0.000    0.000    0.006    0.006 config.py:49(<module>)
        1    0.000    0.000    0.006    0.006 timedeltas.py:3(<module>)
        1    0.001    0.001    0.006    0.006 main.py:1(<module>)
        1    0.002    0.002    0.006    0.006 design_info.py:21(<module>)
        1    0.002    0.002    0.006    0.006 patches.py:3(<module>)
        1    0.003    0.003    0.006    0.006 discrete_model.py:17(<module>)
        1    0.003    0.003    0.006    0.006 mlab.py:176(<module>)
        1    0.004    0.004    0.006    0.006 _base.py:1(<module>)
        1    0.004    0.004    0.006    0.006 generalized_estimating_equations.py:24(<module>)
        1    0.004    0.004    0.006    0.006 ops.py:5(<module>)
        1    0.006    0.006    0.006    0.006 _distn_infrastructure.py:5(<module>)
        1    0.006    0.006    0.006    0.006 hashlib.py:55(<module>)
        1    0.006    0.006    0.006    0.006 heapq.py:31(<module>)
        1    0.006    0.006    0.006    0.006 linalg.py:10(<module>)
        1    0.006    0.006    0.006    0.006 npyio.py:1(<module>)
        1    0.006    0.006    0.006    0.006 socket.py:45(<module>)
        2    0.003    0.002    0.006    0.003 interface.py:1(<module>)
        2    0.005    0.003    0.006    0.003 util.py:3(<module>)
        6    0.001    0.000    0.006    0.001 __init__.py:988(_rc_params_in_file)
       16    0.000    0.000    0.006    0.000 pyparsing.py:1812(__init__)
       39    0.000    0.000    0.006    0.000 pkgutil.py:176(find_module)
       42    0.000    0.000    0.006    0.000 __init__.py:2155(_handle_ns)
      500    0.001    0.000    0.006    0.000 __init__.py:851(__setitem__)
 2254/851    0.005    0.000    0.006    0.000 sre_parse.py:140(getwidth)
        1    0.001    0.001    0.007    0.007 version.py:14(<module>)
        1    0.002    0.002    0.007    0.007 decoder.py:2(<module>)
        1    0.002    0.002    0.007    0.007 parser.py:16(<module>)
        1    0.003    0.003    0.007    0.007 generalized_linear_model.py:19(<module>)
        1    0.005    0.005    0.007    0.007 basic.py:7(<module>)
        1    0.005    0.005    0.007    0.007 lil.py:2(<module>)
        1    0.006    0.006    0.007    0.007 __init__.py:119(<module>)
        1    0.006    0.006    0.007    0.007 __init__.py:85(<module>)
        1    0.006    0.006    0.007    0.007 __init__.py:88(<module>)
        1    0.006    0.006    0.007    0.007 diagnostic.py:2(<module>)
        1    0.006    0.006    0.007    0.007 subprocess.py:387(<module>)
        2    0.000    0.000    0.007    0.003 __init__.py:615(_get_configdir)
        2    0.000    0.000    0.007    0.003 __init__.py:640(_get_cachedir)
        4    0.004    0.001    0.007    0.002 sre_compile.py:301(_optimize_unicode)
       65    0.000    0.000    0.007    0.000 fromnumeric.py:2838(var)
       65    0.005    0.000    0.007    0.000 _methods.py:77(_var)
      132    0.004    0.000    0.007    0.000 linalg.py:526(cholesky)
     6685    0.004    0.000    0.007    0.000 sre_parse.py:130(__getitem__)
    14/10    0.000    0.000    0.007    0.001 __init__.py:324(wrapper)
    32062    0.007    0.000    0.007    0.000 {method 'pop' of 'dict' objects}
        1    0.000    0.000    0.008    0.008 core.py:1(<module>)
        1    0.000    0.000    0.008    0.008 util.py:69(_get_soname)
        1    0.001    0.001    0.008    0.008 highlevel.py:6(<module>)
        1    0.002    0.002    0.008    0.008 _internal.py:6(<module>)
        1    0.002    0.002    0.008    0.008 frequencies.py:1(<module>)
        1    0.003    0.003    0.008    0.008 artist.py:1(<module>)
        1    0.003    0.003    0.008    0.008 ticker.py:143(<module>)
        1    0.004    0.004    0.008    0.008 __init__.py:8(<module>)
        1    0.004    0.004    0.008    0.008 rcsetup.py:15(<module>)
        1    0.004    0.004    0.008    0.008 var_model.py:7(<module>)
        1    0.005    0.005    0.008    0.008 __init__.py:48(<module>)
        1    0.006    0.006    0.008    0.008 __init__.py:69(<module>)
        1    0.006    0.006    0.008    0.008 httplib.py:67(<module>)
        1    0.006    0.006    0.008    0.008 utils.py:5(<module>)
        1    0.007    0.007    0.008    0.008 case.py:1(<module>)
        1    0.008    0.008    0.008    0.008 kde.py:13(<module>)
        4    0.000    0.000    0.008    0.002 tempfile.py:472(TemporaryFile)
        6    0.000    0.000    0.008    0.001 __init__.py:1055(rc_params_from_file)
     4503    0.008    0.000    0.008    0.000 arrayprint.py:716(__init__)
        1    0.000    0.000    0.009    0.009 util.py:106(_findLib_ldconfig)
        1    0.001    0.001    0.009    0.009 base64mime.py:25(<module>)
        1    0.001    0.001    0.009    0.009 data.py:7(<module>)
        1    0.003    0.003    0.009    0.009 array.py:3(<module>)
        1    0.004    0.004    0.009    0.009 ctypeslib.py:51(<module>)
        1    0.006    0.006    0.009    0.009 rrule.py:7(<module>)
        1    0.007    0.007    0.009    0.009 __init__.py:183(<module>)
        1    0.009    0.009    0.009    0.009 suite.py:9(<module>)
       18    0.007    0.000    0.009    0.001 collections.py:288(namedtuple)
      168    0.001    0.000    0.009    0.000 sre_compile.py:359(_compile_info)
      313    0.000    0.000    0.009    0.000 webbrowser.py:114(_isexecutable)
      315    0.001    0.000    0.009    0.000 genericpath.py:26(isfile)
     4503    0.007    0.000    0.009    0.000 {_functools.reduce}
        1    0.000    0.000    0.010    0.010 __init__.py:943(rc_params)
        1    0.002    0.002    0.010    0.010 windows.py:1(<module>)
        1    0.003    0.003    0.010    0.010 __init__.py:99(<module>)
        1    0.005    0.005    0.010    0.010 series.py:3(<module>)
        1    0.006    0.006    0.010    0.010 expr.py:2(<module>)
        1    0.007    0.007    0.010    0.010 __init__.py:65(<module>)
        5    0.000    0.000    0.010    0.002 webbrowser.py:121(_iscommand)
       11    0.003    0.000    0.010    0.001 artist.py:957(_get_setters_and_targets)
       17    0.010    0.001    0.010    0.001 {posix.listdir}
       34    0.000    0.000    0.010    0.000 __init__.py:1705(_has)
       36    0.000    0.000    0.010    0.000 SquaredExponentialKernel.py:156(minuslogLikelihoodParameters)
       36    0.000    0.000    0.010    0.000 optimize.py:280(function_wrapper)
        1    0.002    0.002    0.011    0.011 formulatools.py:1(<module>)
        1    0.002    0.002    0.011    0.011 polynomial.py:4(<module>)
        1    0.003    0.003    0.011    0.011 _ellip_harm.py:1(<module>)
        1    0.006    0.006    0.011    0.011 ignfrance.py:3(<module>)
        1    0.006    0.006    0.011    0.011 index_tricks.py:1(<module>)
        1    0.007    0.007    0.011    0.011 cbook.py:7(<module>)
        3    0.008    0.003    0.011    0.004 base.py:3(<module>)
        4    0.000    0.000    0.011    0.003 __init__.py:220(_is_writable_dir)
       37    0.000    0.000    0.011    0.000 __init__.py:1600(has_metadata)
       39    0.000    0.000    0.011    0.000 __init__.py:2604(_get_metadata)
      303    0.010    0.000    0.011    0.000 {__import__}
        1    0.002    0.002    0.012    0.012 webbrowser.py:2(<module>)
        1    0.003    0.003    0.012    0.012 SBOGeneral2.py:63(__init__)
        1    0.003    0.003    0.012    0.012 compressed.py:1(<module>)
        1    0.003    0.003    0.012    0.012 urllib2.py:76(<module>)
        1    0.005    0.005    0.012    0.012 util.py:35(<module>)
        1    0.006    0.006    0.012    0.012 __init__.py:138(<module>)
      102    0.000    0.000    0.012    0.000 genericpath.py:38(isdir)
     4503    0.009    0.000    0.012    0.000 arrayprint.py:689(__init__)
        1    0.000    0.000    0.013    0.013 _discrete_distns.py:5(<module>)
        1    0.000    0.000    0.013    0.013 specifiers.py:274(Specifier)
        1    0.001    0.001    0.013    0.013 pyparsing.py:58(<module>)
        1    0.009    0.009    0.013    0.013 Image.py:27(<module>)
        1    0.010    0.010    0.013    0.013 _minimize.py:8(<module>)
        4    0.000    0.000    0.013    0.003 __init__.py:580(_get_config_or_cache_dir)
        1    0.002    0.002    0.014    0.014 _savitzky_golay.py:1(<module>)
        1    0.008    0.008    0.014    0.014 collections.py:1(<module>)
        1    0.010    0.010    0.014    0.014 ar_model.py:1(<module>)
      213    0.008    0.000    0.014    0.000 npyio.py:899(savetxt)
    13201    0.012    0.000    0.014    0.000 sre_parse.py:182(__next)
        1    0.000    0.000    0.015    0.015 numdiff.py:5(<module>)
        1    0.002    0.002    0.015    0.015 web.py:4(<module>)
        1    0.003    0.003    0.015    0.015 eval.py:4(<module>)
        1    0.005    0.005    0.015    0.015 loader.py:8(<module>)
        1    0.009    0.009    0.015    0.015 random.py:40(<module>)
       51    0.000    0.000    0.015    0.000 genericpath.py:15(exists)
        1    0.001    0.001    0.016    0.016 specifiers.py:14(<module>)
        1    0.004    0.004    0.016    0.016 csr.py:1(<module>)
        1    0.006    0.006    0.016    0.016 font_manager.py:21(<module>)
       11    0.001    0.000    0.016    0.001 artist.py:1036(pprint_setters)
        1    0.000    0.000    0.017    0.017 util.py:119(find_library)
        1    0.003    0.003    0.017    0.017 tokenize.py:23(<module>)
    11610    0.005    0.000    0.017    0.000 sre_parse.py:201(get)
        1    0.005    0.005    0.018    0.018 __init__.py:44(<module>)
        1    0.006    0.006    0.018    0.018 arcgis.py:3(<module>)
        1    0.009    0.009    0.018    0.018 interpolate.py:2(<module>)
        1    0.000    0.000    0.019    0.019 __init__.py:953(subscribe)
        1    0.001    0.001    0.019    0.019 uuid.py:45(<module>)
        1    0.014    0.014    0.019    0.019 sparse.py:4(<module>)
       37    0.000    0.000    0.019    0.001 __init__.py:2609(activate)
       37    0.000    0.000    0.019    0.001 __init__.py:3099(<lambda>)
      364    0.019    0.000    0.019    0.000 {method 'poisson' of 'mtrand.RandomState' objects}
        1    0.001    0.001    0.020    0.020 reshape.py:3(<module>)
        1    0.007    0.007    0.020    0.020 config.py:1(<module>)
        1    0.011    0.011    0.020    0.020 urllib.py:23(<module>)
        1    0.006    0.006    0.021    0.021 dates.py:111(<module>)
        1    0.008    0.008    0.021    0.021 __init__.py:582(<module>)
        1    0.012    0.012    0.021    0.021 charset.py:6(<module>)
       11    0.000    0.000    0.021    0.002 artist.py:1322(kwdoc)
       91    0.002    0.000    0.021    0.000 citiBikeExample.py:75(simulatorW)
      592    0.010    0.000    0.021    0.000 sre_compile.py:207(_optimize_charset)
        1    0.005    0.005    0.022    0.022 point.py:4(<module>)
        1    0.007    0.007    0.022    0.022 internals.py:1(<module>)
        1    0.009    0.009    0.022    0.022 pilutil.py:7(<module>)
        1    0.004    0.004    0.023    0.023 gbq.py:1(<module>)
        2    0.008    0.004    0.023    0.011 index.py:2(<module>)
      592    0.002    0.000    0.023    0.000 sre_compile.py:178(_compile_charset)
        1    0.000    0.000    0.024    0.024 __init__.py:618(__init__)
        1    0.000    0.000    0.024    0.024 __init__.py:631(_build_master)
        1    0.006    0.006    0.024    0.024 __init__.py:157(<module>)
        1    0.006    0.006    0.024    0.024 contour.py:4(<module>)
        1    0.007    0.007    0.024    0.024 widgets.py:10(<module>)
        1    0.000    0.000    0.026    0.026 decomp_schur.py:1(<module>)
        1    0.002    0.002    0.026    0.026 empirical_distribution.py:3(<module>)
        1    0.006    0.006    0.026    0.026 textpath.py:3(<module>)
        2    0.000    0.000    0.026    0.013 getlimits.py:126(_init)
       23    0.000    0.000    0.026    0.001 getlimits.py:93(__new__)
   125254    0.026    0.000    0.026    0.000 {math.log}
        1    0.004    0.004    0.027    0.027 message.py:5(<module>)
        1    0.009    0.009    0.027    0.027 tempfile.py:18(<module>)
        1    0.010    0.010    0.027    0.027 numeric.py:1(<module>)
        1    0.005    0.005    0.028    0.028 generic.py:2(<module>)
    61296    0.028    0.000    0.028    0.000 {method 'end' of '_sre.SRE_Match' objects}
   102585    0.028    0.000    0.028    0.000 {method 'rstrip' of 'str' objects}
   128208    0.029    0.000    0.029    0.000 {numpy.core.umath.geterrobj}
       92    0.002    0.000    0.030    0.000 __init__.py:2088(find_on_path)
        1    0.003    0.003    0.031    0.031 feedparser.py:20(<module>)
        1    0.007    0.007    0.031    0.031 inspect.py:25(<module>)
    99950    0.031    0.000    0.031    0.000 {abs}
        1    0.001    0.001    0.032    0.032 parser.py:5(<module>)
        1    0.017    0.017    0.033    0.033 api.py:2(<module>)
       26    0.000    0.000    0.033    0.001 __init__.py:673(add_entry)
     4502    0.003    0.000    0.033    0.000 _methods.py:28(_amin)
    46432    0.033    0.000    0.033    0.000 fromnumeric.py:1462(shape)
        1    0.004    0.004    0.034    0.034 decorator.py:29(<module>)
      474    0.034    0.000    0.034    0.000 {posix.stat}
     4502    0.003    0.000    0.036    0.000 _methods.py:25(_amax)
    13509    0.036    0.000    0.036    0.000 {method 'compress' of 'numpy.ndarray' objects}
    18446    0.026    0.000    0.036    0.000 arrayprint.py:457(_extendLine)
        2    0.009    0.004    0.037    0.018 __init__.py:45(<module>)
 1586/168    0.010    0.000    0.037    0.000 sre_compile.py:32(_compile)
        1    0.011    0.011    0.038    0.038 model.py:1(<module>)
        1    0.010    0.010    0.039    0.039 utils.py:4(<module>)
    32051    0.032    0.000    0.039    0.000 numeric.py:2809(__init__)
        1    0.005    0.005    0.040    0.040 core.py:2(<module>)
        1    0.014    0.014    0.040    0.040 __init__.py:203(<module>)
        3    0.000    0.000    0.040    0.013 machar.py:97(__init__)
        3    0.010    0.003    0.040    0.013 machar.py:113(_do_init)
     4502    0.007    0.000    0.040    0.000 fromnumeric.py:2142(amin)
        1    0.006    0.006    0.042    0.042 iterative.py:1(<module>)
        1    0.011    0.011    0.042    0.042 format.py:2(<module>)
     4502    0.008    0.000    0.043    0.000 fromnumeric.py:2058(amax)
        1    0.016    0.016    0.044    0.044 __init__.py:253(<module>)
      168    0.000    0.000    0.047    0.000 sre_compile.py:478(_code)
    64104    0.047    0.000    0.047    0.000 {numpy.core.umath.seterrobj}
        1    0.003    0.003    0.048    0.048 arima_model.py:7(<module>)
  807/186    0.018    0.000    0.049    0.000 sre_parse.py:379(_parse)
  577/168    0.002    0.000    0.050    0.000 sre_parse.py:301(_parse_sub)
      168    0.001    0.000    0.051    0.000 sre_parse.py:675(parse)
        1    0.000    0.000    0.052    0.052 __init__.py:3074(_initialize_master_working_set)
        2    0.000    0.000    0.052    0.026 __init__.py:3059(_call_aside)
        1    0.004    0.004    0.054    0.054 matfuncs.py:3(<module>)
        1    0.005    0.005    0.054    0.054 config_init.py:11(<module>)
      432    0.001    0.000    0.054    0.000 matrixComputations.py:17(inverseComp)
        2    0.010    0.005    0.056    0.028 __init__.py:38(<module>)
    43958    0.036    0.000    0.056    0.000 fromnumeric.py:495(transpose)
        2    0.005    0.002    0.058    0.029 decorators.py:1(<module>)
        1    0.005    0.005    0.059    0.059 frame.py:10(<module>)
        1    0.009    0.009    0.060    0.060 backend_bases.py:28(<module>)
        1    0.012    0.012    0.060    0.060 _axes.py:1(<module>)
        1    0.019    0.019    0.060    0.060 __init__.py:155(<module>)
    15877    0.061    0.000    0.061    0.000 _continuous_distns.py:85(_norm_cdf)
     4502    0.020    0.000    0.063    0.000 citiBikeExample.py:433(conditionOpt)
        4    0.022    0.005    0.065    0.016 api.py:3(<module>)
        1    0.002    0.002    0.067    0.067 _subplots.py:1(<module>)
    76993    0.067    0.000    0.067    0.000 {method 'nonzero' of 'numpy.ndarray' objects}
    61312    0.069    0.000    0.069    0.000 {iter}
    15877    0.009    0.000    0.070    0.000 _continuous_distns.py:135(_cdf)
    30553    0.070    0.000    0.070    0.000 {numpy.core.multiarray.putmask}
       36    0.000    0.000    0.071    0.002 SquaredExponentialKernel.py:152(gradientLogLikelihood)
        1    0.004    0.004    0.072    0.072 groupby.py:1(<module>)
       36    0.000    0.000    0.072    0.002 SquaredExponentialKernel.py:162(minusGradLogLikelihoodParameters)
    61266    0.072    0.000    0.072    0.000 _iotools.py:30(_is_string_like)
        1    0.004    0.004    0.073    0.073 collections.py:10(<module>)
   158585    0.078    0.000    0.078    0.000 {method 'ravel' of 'numpy.ndarray' objects}
        1    0.007    0.007    0.080    0.080 figure.py:12(<module>)
       72    0.010    0.000    0.081    0.001 SquaredExponentialKernel.py:85(logLikelihood)
    14677    0.063    0.000    0.081    0.000 twodim_base.py:190(eye)
        2    0.007    0.004    0.082    0.041 __init__.py:7(<module>)
       36    0.000    0.000    0.082    0.002 lbfgsb.py:265(func_and_grad)
        1    0.000    0.000    0.083    0.083 SquaredExponentialKernel.py:171(optimizeKernel)
        1    0.000    0.000    0.083    0.083 SquaredExponentialKernel.py:184(trainnoParallel)
        1    0.000    0.000    0.083    0.083 lbfgsb.py:48(fmin_l_bfgs_b)
        1    0.000    0.000    0.083    0.083 misc.py:18(kernOptWrapper)
        1    0.000    0.000    0.083    0.083 optimization.py:43(opt)
        1    0.001    0.001    0.083    0.083 lbfgsb.py:199(_minimize_lbfgsb)
        1    0.000    0.000    0.084    0.084 SBOGeneral2.py:508(trainModel)
       86    0.003    0.000    0.089    0.001 _distn_infrastructure.py:1399(__init__)
    36892    0.070    0.000    0.089    0.000 arrayprint.py:632(_digits)
        1    0.004    0.004    0.094    0.094 _continuous_distns.py:5(<module>)
     4502    0.022    0.000    0.097    0.000 citiBikeExample.py:278(projectGradientDescent)
      160    0.000    0.000    0.098    0.001 re.py:188(compile)
      168    0.001    0.000    0.099    0.001 sre_compile.py:493(compile)
      485    0.002    0.000    0.101    0.000 re.py:226(_compile)
        2    0.008    0.004    0.102    0.051 api.py:4(<module>)
    61053    0.093    0.000    0.102    0.000 npyio.py:747(flatten_dtype)
        1    0.007    0.007    0.108    0.108 linear_model.py:32(<module>)
        1    0.006    0.006    0.111    0.111 colorbar.py:20(<module>)
    64103    0.102    0.000    0.111    0.000 numeric.py:2524(geterr)
    76993    0.111    0.000    0.111    0.000 {method 'take' of 'numpy.ndarray' objects}
        1    0.033    0.033    0.114    0.114 __init__.py:101(<module>)
     4503    0.069    0.000    0.115    0.000 arrayprint.py:639(__init__)
    76993    0.048    0.000    0.115    0.000 fromnumeric.py:1380(nonzero)
   127936    0.117    0.000    0.117    0.000 {method 'endswith' of 'str' objects}
        1    0.006    0.006    0.119    0.119 distributions.py:8(<module>)
        1    0.002    0.002    0.122    0.122 stats.py:168(<module>)
    29282    0.048    0.000    0.122    0.000 fromnumeric.py:125(reshape)
        1    0.010    0.010    0.126    0.126 __init__.py:105(<module>)
    61053    0.138    0.000    0.138    0.000 {method 'squeeze' of 'numpy.ndarray' objects}
        1    0.011    0.011    0.139    0.139 __init__.py:335(<module>)
        1    0.003    0.003    0.140    0.140 type_check.py:3(<module>)
        1    0.090    0.090    0.154    0.154 simulationPoissonProcess.py:37(generateSets)
    14677    0.076    0.000    0.156    0.000 numeric.py:2125(identity)
    76993    0.045    0.000    0.157    0.000 fromnumeric.py:53(take)
    78190    0.161    0.000    0.161    0.000 {numpy.lib._compiled_base._insert}
   606869    0.163    0.000    0.163    0.000 misc.py:126(_datacopied)
        2    0.039    0.019    0.165    0.083 __init__.py:15(<module>)
325851/325809    0.167    0.000    0.167    0.000 {issubclass}
        1    0.005    0.005    0.173    0.173 nonlin.py:110(<module>)
        1    0.009    0.009    0.175    0.175 googlev3.py:3(<module>)
   354633    0.175    0.000    0.175    0.000 utils.py:47(_set_function_name)
   354633    0.176    0.000    0.176    0.000 utils.py:64(__init__)
        1    0.004    0.004    0.177    0.177 _root.py:7(<module>)
    32051    0.039    0.000    0.179    0.000 numeric.py:2818(__exit__)
        1    0.002    0.002    0.191    0.191 add_newdocs.py:10(<module>)
        1    0.011    0.011    0.205    0.205 __init__.py:171(<module>)
    32051    0.035    0.000    0.206    0.000 numeric.py:2813(__enter__)
    78190    0.050    0.000    0.212    0.000 function_base.py:1449(place)
        1    0.007    0.007    0.213    0.213 pyplot.py:17(<module>)
        1    0.021    0.021    0.228    0.228 __init__.py:72(<module>)
   122325    0.243    0.000    0.243    0.000 {method 'extend' of 'list' objects}
        1    0.020    0.020    0.250    0.250 __init__.py:106(<module>)
    61053    0.113    0.000    0.251    0.000 fromnumeric.py:1083(squeeze)
   638596    0.264    0.000    0.264    0.000 {method 'transpose' of 'numpy.ndarray' objects}
        4    0.004    0.001    0.265    0.066 utils.py:1(<module>)
        2    0.037    0.019    0.266    0.133 __init__.py:4(<module>)
       18    0.003    0.000    0.268    0.015 data.py:1(<module>)
    61774    0.268    0.000    0.268    0.000 {method 'match' of '_sre.SRE_Pattern' objects}
   606906    0.276    0.000    0.276    0.000 {method 'index' of 'list' objects}
   709038    0.231    0.000    0.294    0.000 _distn_infrastructure.py:668(<lambda>)
  1065319    0.309    0.000    0.309    0.000 {setattr}
    64103    0.132    0.000    0.310    0.000 numeric.py:2428(seterr)
        1    0.005    0.005    0.337    0.337 simulationPoissonProcess.py:3(<module>)
        1    0.020    0.020    0.351    0.351 SBOGeneral2.py:6(<module>)
        1    0.003    0.003    0.353    0.353 optimization.py:3(<module>)
        6    0.061    0.010    0.363    0.061 __init__.py:3(<module>)
   117402    0.378    0.000    0.378    0.000 {method 'clip' of 'numpy.ndarray' objects}
        1    0.010    0.010    0.386    0.386 tools.py:3(<module>)
    30553    0.405    0.000    0.405    0.000 _continuous_distns.py:77(_norm_pdf)
  2177876    0.407    0.000    0.407    0.000 {method 'get' of 'dict' objects}
   111150    0.414    0.000    0.414    0.000 citiBikeExample.py:389(<lambda>)
    46440    0.177    0.000    0.419    0.000 shape_base.py:8(atleast_1d)
    30553    0.020    0.000    0.424    0.000 _continuous_distns.py:129(_pdf)
        5    0.022    0.004    0.427    0.085 __init__.py:9(<module>)
   158554    0.130    0.000    0.430    0.000 fromnumeric.py:1291(ravel)
   355039    0.432    0.000    0.432    0.000 {method 'update' of 'dict' objects}
    29282    0.448    0.000    0.448    0.000 {method 'argmin' of 'numpy.ndarray' objects}
    61053    0.288    0.000    0.449    0.000 npyio.py:610(_getconv)
    54096    0.301    0.000    0.450    0.000 twodim_base.py:242(diag)
    63697    0.040    0.000    0.478    0.000 _methods.py:37(_any)
    29282    0.031    0.000    0.479    0.000 fromnumeric.py:946(argmin)
    18446    0.254    0.000    0.480    0.000 arrayprint.py:598(__call__)
   117402    0.110    0.000    0.488    0.000 fromnumeric.py:1574(clip)
        8    0.077    0.010    0.518    0.065 api.py:1(<module>)
  1064206    0.429    0.000    0.530    0.000 inspect.py:209(iscode)
    63697    0.078    0.000    0.556    0.000 {method 'any' of 'numpy.ndarray' objects}
  1064589    0.456    0.000    0.566    0.000 inspect.py:142(isfunction)
    87988    0.579    0.000    0.579    0.000 {method 'astype' of 'numpy.ndarray' objects}
   354547    0.593    0.000    0.593    0.000 {method 'copy' of 'dict' objects}
9005/4503    0.082    0.000    0.608    0.000 arrayprint.py:465(_formatArray)
   355887    0.612    0.000    0.612    0.000 {hasattr}
     4503    0.021    0.000    0.714    0.000 arrayprint.py:700(__init__)
    63697    0.101    0.000    0.795    0.000 fromnumeric.py:1772(any)
   230141    0.804    0.000    0.804    0.000 {numpy.core.multiarray.empty}
        1    0.033    0.033    0.818    0.818 SquaredExponentialKernel.py:3(<module>)
  2129077    0.836    0.000    0.836    0.000 {built-in method __new__ of type object at 0x788ee0}
    58564    0.855    0.000    0.855    0.000 {method 'argmax' of 'numpy.ndarray' objects}
   709044    0.858    0.000    0.858    0.000 _distn_infrastructure.py:704(<genexpr>)
    76993    0.186    0.000    0.870    0.000 function_base.py:1400(extract)
    58564    0.051    0.000    0.906    0.000 fromnumeric.py:889(argmax)
  1064206    0.682    0.000    0.913    0.000 inspect.py:67(ismethod)
   770422    0.930    0.000    0.930    0.000 {method 'items' of 'dict' objects}
  1219906    1.022    0.000    1.022    0.000 {getattr}
    13509    0.536    0.000    1.123    0.000 arrayprint.py:547(fillFormat)
    13509    0.037    0.000    1.160    0.000 arrayprint.py:533(__init__)
   230049    1.197    0.000    1.197    0.000 {numpy.core.multiarray.copyto}
       67    0.107    0.002    1.358    0.020 __init__.py:1(<module>)
   337362    1.417    0.000    1.417    0.000 {numpy.core.multiarray.concatenate}
    14676    1.548    0.000    1.591    0.000 citiBikeExample.py:200(gradXB)
    15877    0.730    0.000    1.671    0.000 _distn_infrastructure.py:1620(cdf)
    46436    0.596    0.000    1.910    0.000 _distn_infrastructure.py:549(argsreduce)
  1629882    1.954    0.000    1.954    0.000 {method 'reshape' of 'numpy.ndarray' objects}
   162567    1.497    0.000    1.973    0.000 function_base.py:1055(diff)
   354428    2.020    0.000    2.020    0.000 {numpy.core.multiarray.arange}
     4503    0.101    0.000    2.052    0.000 arrayprint.py:233(_array2string)
     4504    0.030    0.000    2.090    0.000 arrayprint.py:343(array2string)
     4502    0.006    0.000    2.096    0.000 numeric.py:1681(array_str)
    30525    2.310    0.000    2.310    0.000 {method 'argsort' of 'numpy.ndarray' objects}
   230049    0.353    0.000    2.355    0.000 numeric.py:141(ones)
  1761224    2.930    0.000    2.930    0.000 {numpy.core.multiarray.zeros}
   708840    3.207    0.000    3.207    0.000 {numpy.core.multiarray.where}
   354633    3.137    0.000    3.900    0.000 utils.py:69(__call__)
    58802    0.096    0.000    3.927    0.000 SquaredExponentialKernel.py:76(A)
   536670    3.936    0.000    3.936    0.000 citiBikeExample.py:240(<lambda>)
       30    0.022    0.001    4.064    0.135 citiBikeExample.py:381(computeLogProductExpectationsForAn)
    91578    4.182    0.000    4.182    0.000 {next}
    30553    1.570    0.000    4.500    0.000 _distn_infrastructure.py:1539(pdf)
    15876    0.297    0.000    4.624    0.000 VOIGeneral.py:289(hvoi)
    14676    3.703    0.000    4.798    0.000 citiBikeExample.py:176(gradXWSigmaOfunc)
  2306104    1.793    0.000    5.179    0.000 numeric.py:394(asarray)
    88120    3.341    0.000    5.237    0.000 SquaredExponentialKernel.py:54(K)
  1418082    5.000    0.000    5.256    0.000 function_base.py:1644(__init__)
   354633    1.407    0.000    5.482    0.000 utils.py:113(deprecate)
    61056    6.003    0.000    6.003    0.000 {method 'read' of 'file' objects}
   354519    0.963    0.000    6.257    0.000 _distn_infrastructure.py:611(__init__)
  1213751    0.670    0.000    6.439    0.000 _methods.py:40(_all)
 47152611    6.490    0.000    6.490    0.000 {method 'lstrip' of 'str' objects}
    39216    6.502    0.000    6.551    0.000 citiBikeExample.py:248(gradXBforAn)
  1064206    4.777    0.000    7.018    0.000 inspect.py:744(getargs)
  1063791    7.083    0.000    7.083    0.000 {method 'replace' of 'str' objects}
  1213751    0.852    0.000    7.291    0.000 {method 'all' of 'numpy.ndarray' objects}
  1213738    6.795    0.000    7.555    0.000 numerictypes.py:949(_can_coerce_all)
   606869    1.020    0.000    8.575    0.000 numerictypes.py:970(find_common_type)
   755272    7.007    0.000    9.480    0.000 _distn_infrastructure.py:763(_argcheck)
 42257648    9.838    0.000    9.838    0.000 {range}
 20157534    9.883    0.000    9.883    0.000 {method 'strip' of 'str' objects}
   606875    2.126    0.000   11.063    0.000 blas.py:182(find_best_blas_type)
  1064206    3.062    0.000   12.388    0.000 inspect.py:804(getargspec)
22690489/22690480   11.624    0.000   12.483    0.000 {method 'join' of 'str' objects}
  1213738    4.830    0.000   14.217    0.000 function_base.py:550(asarray_chkfinite)
   699768    1.312    0.000   15.805    0.000 {map}
    29282   15.842    0.001   15.842    0.001 {numpy.core.multiarray.lexsort}
   606875    3.584    0.000   16.316    0.000 blas.py:226(_get_funcs)
   606869    0.504    0.000   16.819    0.000 lapack.py:255(get_lapack_funcs)
 20116295   16.907    0.000   16.907    0.000 {method 'write' of 'file' objects}
        7    0.000    0.000   17.070    2.439 linesearch.py:460(_zoom)
  4890208   17.326    0.000   17.326    0.000 {numpy.core.multiarray.dot}
 40424767   18.083    0.000   18.083    0.000 {method 'sort' of 'numpy.ndarray' objects}
  5570040   20.093    0.000   20.093    0.000 citiBikeExample.py:166(<lambda>)
 41026340   20.718    0.000   20.718    0.000 {method 'pop' of 'list' objects}
   708840   18.408    0.000   21.615    0.000 _discrete_distns.py:440(_ppf)
 42847239   24.744    0.000   24.744    0.000 {method 'exponential' of 'mtrand.RandomState' objects}
  8365320   30.033    0.000   30.033    0.000 citiBikeExample.py:237(<lambda>)
 21980486   32.188    0.000   32.188    0.000 {method 'splitlines' of 'str' objects}
313594613   32.626    0.000   32.626    0.000 {method 'append' of 'list' objects}
   606869    6.887    0.000   39.536    0.000 basic.py:103(solve_triangular)
 21980476   39.768    0.000   39.768    0.000 {method 'expandtabs' of 'str' objects}
   354538    9.801    0.000   42.300    0.000 six.py:209(exec_)
 40424767   42.452    0.000   42.452    0.000 {method 'copy' of 'numpy.ndarray' objects}
425449074/425448217   46.982    0.000   46.983    0.000 {len}
   709091   29.697    0.000   47.636    0.000 doccer.py:128(indentcount_lines)
   354519    7.103    0.000   58.778    0.000 _distn_infrastructure.py:619(_construct_argparser)
    30543   62.740    0.002   64.251    0.002 {eval}
40192216/20096108   61.383    0.000   64.893    0.000 npyio.py:776(pack_items)
 40728570   29.647    0.000   67.736    0.000 numeric.py:464(asanyarray)
 14583180   67.875    0.000   67.875    0.000 _discrete_distns.py:425(_logpmf)
    77978    4.944    0.000   70.142    0.001 statGeneral.py:87(aN_grad)
736630013   70.562    0.000   70.562    0.000 simulationPoissonProcess.py:101(<lambda>)
    77978    0.746    0.000   72.970    0.001 citiBikeExample.py:337(functionGradientAscentAn)
    77978    0.125    0.000   73.094    0.001 SBOGeneral2.py:395(g)
       30    0.000    0.000   76.123    2.537 SBOGeneral2.py:389(optimizeAn)
       30    0.000    0.000   76.123    2.537 misc.py:35(AnOptWrapper)
    30525   91.178    0.003   91.178    0.003 decoder.py:371(raw_decode)
    30525    0.165    0.000   91.644    0.003 decoder.py:360(decode)
    30525    0.101    0.000   91.745    0.003 __init__.py:293(loads)
 20096188   95.170    0.000   95.170    0.000 {zip}
    30525    0.213    0.000   97.239    0.003 __init__.py:257(load)
 14583180   31.476    0.000   99.351    0.000 _discrete_distns.py:429(_pmf)
       35    0.148    0.004  104.464    2.985 citiBikeExample.py:59(noisyF)
 40424767  104.645    0.000  104.645    0.000 {method 'uniform' of 'mtrand.RandomState' objects}
   122100  109.722    0.001  109.722    0.001 {method 'multinomial' of 'mtrand.RandomState' objects}
   122117  110.992    0.001  110.992    0.001 {method 'close' of 'file' objects}
   152859  111.842    0.001  111.842    0.001 {open}
 44509304  139.730    0.000  139.730    0.000 {numpy.core.multiarray.array}
 37272027  173.602    0.000  173.602    0.000 {min}
 14583180   24.486    0.000  178.313    0.000 _distn_infrastructure.py:3112(fun)
 40424767   57.710    0.000  185.279    0.000 fromnumeric.py:694(sort)
301598680  215.028    0.000  215.028    0.000 {isinstance}
 40315376  231.283    0.000  231.283    0.000 {method 'split' of 'str' objects}
   709083   87.669    0.000  235.410    0.000 doccer.py:12(docformat)
   354420   24.427    0.000  237.685    0.001 _distn_infrastructure.py:3055(expect)
2420284168  241.882    0.000  241.882    0.000 simulationPoissonProcess.py:158(<lambda>)
   354519    4.147    0.000  247.835    0.001 _distn_infrastructure.py:696(_construct_doc)
 20157161   29.093    0.000  270.258    0.000 npyio.py:792(split_line)
  1136232  332.804    0.000  333.098    0.000 {max}
   354433    8.823    0.000  333.752    0.001 _distn_infrastructure.py:2559(__init__)
   354420    2.703    0.000  342.547    0.001 _distn_infrastructure.py:428(__init__)
   354420    0.576    0.000  343.123    0.001 _distn_infrastructure.py:726(freeze)
   354420    0.469    0.000  343.592    0.001 _distn_infrastructure.py:743(__call__)
    14676   14.359    0.001  398.622    0.027 citiBikeExample.py:214(gradWB)
    29282   49.773    0.002  479.768    0.016 VOIGeneral.py:47(evalVOI)
  2238997   72.549    0.000  529.761    0.000 simulationPoissonProcess.py:99(findBikeStation)
[[ 1166.68092754   382.70174569   611.64870237]]
[[ 1167.08284306   383.70074888   612.15430194]]
[[ 1167.48673951   384.70488171   612.66205319]]
[[ 1167.89263354   385.71418868   613.17197271]]
[[ 1168.30054198   386.72871483   613.68407724]]
[[ 1168.71048186   387.74850572   614.19838372]]
[[ 1169.12247041   388.77360747   614.71490927]]
[[ 1169.53652506   389.80406676   615.2336712 ]]
[[ 1169.95266344   390.8399308    615.75468699]]
[[ 1170.37090339   391.88124741   616.27797431]]
[[ 1170.79126294   392.92806496   616.80355105]]
[[ 1171.21376037   393.98043243   617.33143527]]
[[ 1171.63841414   395.03839937   617.86164523]]
[[ 1172.06524295   396.10201596   618.39419939]]
[[ 1172.49426572   397.17133297   618.92911643]]
[[ 1172.92550157   398.24640182   619.46641521]]
[[ 1173.35896989   399.32727454   620.00611481]]
[[ 1173.79469027   400.41400383   620.54823453]]
[[ 1174.23268255   401.50664301   621.09279386]]
[[ 1174.67296679   402.60524609   621.63981254]]
[[ 1175.11556332   403.70986774   622.1893105 ]]
[[ 1175.56049269   404.82056331   622.74130791]]
[[ 1176.00777573   405.93738886   623.29582515]]
[[ 1176.45743348   407.06040114   623.85288286]]
[[ 1176.90948728   408.18965761   624.41250187]]
    30525  139.129    0.005  624.465    0.020 simulationPoissonProcess.py:64(startInitialConfiguration)
[[ 1177.3639587    409.32521649   624.97470328]]
[[ 1177.8208696    410.4671367    625.53950842]]
[[ 1178.28024208   411.61547793   626.10693884]]
[[ 1178.74209854   412.77030064   626.67701636]]
[[ 1179.20646164   413.93166603   627.24976304]]
[[ 1179.67335433   415.09963612   627.8252012 ]]
[[ 1180.14279984   416.27427371   628.4033534 ]]
[[ 1180.6148217    417.45564243   628.98424248]]
[[ 1181.08944372   418.64380671   629.56789151]]
[[ 1181.56669001   419.83883183   630.15432386]]
[[ 1182.04658501   421.04078392   630.74356315]]
[[ 1182.52915342   422.24972998   631.33563329]]
[[ 1183.0144203    423.46573787   631.93055845]]
[[ 1183.50241101   424.68887635   632.52836309]]
[[ 1183.99315122   425.91921511   633.12907195]]
[[ 1184.48666694   427.15682473   633.73271008]]
[[ 1184.98298452   428.40177673   634.33930279]]
[[ 1185.48213063   429.6541436    634.94887572]]
[[ 1185.9841323    430.91399879   635.56145478]]
[[ 1186.4890169    432.18141671   636.17706622]]
[[ 1186.99681215   433.45647281   636.79573658]]
[[ 1187.50754616   434.73924353   637.41749271]]
[[ 1188.02124735   436.02980634   638.0423618 ]]
[[ 1188.53794457   437.32823976   638.67037134]]
[[ 1189.057667     438.6346234    639.30154917]]
[[ 1189.58044424   439.94903792   639.93592345]]
[[ 1190.10630625   441.2715651    640.57352269]]
[[ 1190.63528342   442.60228785   641.21437572]]
[[ 1191.1674065    443.9412902    641.85851173]]
[[ 1191.70270667   445.28865736   642.50596028]]
[[ 1192.24121554   446.64447568   643.15675126]]
[[ 1134.30505554   402.03603158   643.22480959]]
[[ 1134.7190649    403.03481945   643.68893695]]
[[ 1192.78296512   448.00883276   643.81091494]]
[[ 1135.13502761   404.03846719   644.1549329 ]]
[[ 1193.32798785   449.38181738   644.46848195]]
[[ 1135.55295947   405.04701496   644.62281107]]
[[ 1135.97287648   406.06050336   645.09258519]]
[[ 1193.87631661   450.76351956   645.12948329]]
[[ 1136.3947948    407.07897347   645.56426917]]
[[ 1194.42798473   452.15403061   645.79395036]]
[[ 1136.8187308    408.10246684   646.03787703]]
[[ 1194.98302598   453.55344308   646.46191491]]
[[ 1137.24470101   409.13102547   646.51342296]]
[[ 1137.67272216   410.16469189   646.99092127]]
[[ 1195.54147459   454.96185086   647.1334091 ]]
[[ 1138.10281117   411.2035091    647.47038643]]
[[ 1196.10336524   456.37934914   647.80846549]]
[[ 1138.53498515   412.24752058   647.95183307]]
[[ 1138.9692614    413.29677035   648.43527595]]
[[ 1196.66873312   457.80603447   648.48711702]]
[[ 1139.40565743   414.35130293   648.92073   ]]
[[ 1197.23761386   459.24200476   649.16939706]]
[[ 1139.84419094   415.41116334   649.4082103 ]]
[[ 1197.8100436    460.68735933   649.85533937]]
[[ 1140.28487986   416.47639717   649.89773208]]
[[ 1140.7277423    417.54705052   650.38931074]]
[[ 1198.38605897   462.14219891   650.54497815]]
[[ 1141.17279659   418.62317004   650.88296184]]
[[ 1198.96569709   463.60662566   651.23834801]]
[[ 1141.62006128   419.70480292   651.37870111]]
[[ 1142.06955512   420.79199694   651.87654441]]
[[ 1199.54899562   465.08074323   651.93548399]]
[[ 1142.5212971    421.88480042   652.37650782]]
[[ 1200.13599273   466.56465675   652.63642157]]
[[ 1142.97530643   422.98326228   652.87860756]]
[[ 1200.72672709   468.05847287   653.34119668]]
[[ 1143.43160253   424.08743202   653.38286002]]
[[ 1143.89020507   425.19735972   653.88928177]]
[[ 1201.32123796   469.56229979   654.04984567]]
[[ 1144.35113394   426.31309608   654.39788957]]
[[ 1201.91956511   471.07624728   654.76240539]]
[[ 1144.81440927   427.43469242   654.90870034]]
[[ 1145.28005145   428.56220066   655.42173119]]
[[ 1202.52174887   472.60042672   655.47891311]]
[[ 1145.74808107   429.69567337   655.93699941]]
[[ 1203.12783015   474.13495109   656.1994066 ]]
[[ 1146.21851902   430.83516376   656.45452249]]
[[ 1203.73785042   475.67993505   656.92392408]]
[[ 1146.6913864    431.98072569   656.97431809]]
[[ 1147.16670459   433.13241367   657.49640408]]
[[ 1204.35185174   477.23549494   657.65250427]]
[[ 1116.57900131   416.61768526   657.91424231]]
[[ 1147.64449521   434.29028289   658.02079851]]
[[ 1116.99899046   417.61315287   658.36016745]]
[[ 1204.96987676   478.80174883   658.38518637]]
[[ 1148.12478017   435.45438924   658.54751962]]
[[ 1117.42090459   418.61329649   658.80782449]]
[[ 1148.60758163   436.62478928   659.07658588]]
[[ 1205.59196875   480.37881649   659.12201008]]
[[ 1117.84475882   419.61815339   659.25722552]]
[[ 1149.092922     437.80154027   659.60801593]]
[[ 1118.27056845   420.62776121   659.70838277]]
[[ 1206.21817158   481.96681952   659.8630156 ]]
[[ 1149.58082402   438.98470021   660.14182864]]
[[ 1118.69834896   421.64215803   660.16130858]]
[[ 1206.84852974   483.5658813    660.60824364]]
[[ 1119.12811598   422.66138235   660.61601543]]
[[ 1150.07131066   440.1743278    660.67804306]]
[[ 1119.55988532   423.68547307   661.07251591]]
[[ 1150.56440519   441.37048248   661.21667847]]
[[ 1207.48308837   485.17612705   661.35773544]]
[[ 1119.99367297   424.71446957   661.53082272]]
[[ 1151.06013118   442.57322447   661.75775437]]
[[ 1120.42949508   425.74841162   661.99094872]]
[[ 1208.12189324   486.79768386   662.11153274]]
[[ 1151.55851247   443.7826147    662.30129045]]
[[ 1120.867368     426.78733946   662.45290685]]
[[ 1152.05957323   444.99871492   662.84730665]]
[[ 1208.76499079   488.43068074   662.86967783]]
[[ 1121.30730825   427.8312938    662.91671022]]
[[ 1121.74933255   428.88031576   663.38237206]]
[[ 1152.5633379    446.22158763   663.3958231 ]]
[[ 1209.41242811   490.07524863   663.63221353]]
[[ 1122.19345778   429.93444697   663.84990571]]
[[ 1153.06983125   447.45129614   663.94686019]]
[[ 1122.63970103   430.99372952   664.31932468]]
[[ 1210.06425299   491.73152045   664.39918322]]
[[ 1153.57907834   448.68790457   664.5004385 ]]
[[ 1123.08807959   432.05820595   664.79064258]]
[[ 1154.09110457   449.93147786   665.05657888]]
[[ 1210.7205139    493.39963111   665.17063083]]
[[ 1123.53861092   433.12791932   665.26387318]]
[[ 1154.60593565   451.18208179   665.61530238]]
[[ 1123.99131271   434.20291316   665.73903038]]
[[ 1211.38126002   495.0797176    665.94660084]]
[[ 1155.1235976    452.43978299   666.17663031]]
[[ 1124.44620281   435.28323151   666.21612822]]
[[ 1124.90329932   436.36891891   666.69518088]]
[[ 1212.04654122   496.77191896   666.72713833]]
[[ 1155.64411681   453.70464894   666.74058423]]
[[ 1125.36262051   437.46002041   667.17620269]]
[[ 1156.16751998   454.97674802   667.3071859 ]]
[[ 1212.71640813   498.47637636   667.51228891]]
[[ 1125.82418489   438.5565816    667.65920813]]
[[ 1156.69383416   456.25614947   667.87645739]]
[[ 1126.28801115   439.65864857   668.14421182]]
[[ 1213.3909121    500.19323315   668.30209884]]
[[ 1157.22308675   457.54292347   668.44842096]]
[[ 1126.75411823   440.76626797   668.63122851]]
[[ 1157.75530549   458.83714109   669.02309918]]
[[ 1214.07010522   501.92263483   669.09661492]]
[[ 1127.22252527   441.87948697   669.12027315]]
[[ 1158.2905185    460.13887435   669.60051483]]
[[ 1127.69325163   442.99835332   669.61136079]]
[[ 1214.75404036   503.66472919   669.89588458]]
[[ 1128.16631691   444.1229153    670.10450668]]
[[ 1158.82875426   461.44819622   670.18069099]]
[[ 1128.64174093   445.25322179   670.59972619]]
[[ 1215.44277117   505.41966625   670.69995587]]
[[ 1159.37004161   462.76518064   670.76365099]]
[[ 1129.11954375   446.38932222   671.09703488]]
[[ 1159.91440977   464.08990251   671.34941842]]
[[ 1216.13635208   507.18759838   671.50887743]]
[[ 1129.59974565   447.53126661   671.59644845]]
[[ 1160.46188837   465.42243776   671.93801717]]
[[ 1130.08236716   448.67910558   672.09798277]]
[[ 1216.83483833   508.96868029   672.32269856]]
[[ 1161.01250738   466.76286332   672.52947137]]
[[ 1130.56742906   449.83289036   672.60165388]]
[[ 1131.05495236   450.99267278   673.10747798]]
[[ 1161.56629722   468.11125714   673.12380546]]
[[ 1217.53828598   510.76306911   673.14146918]]
[[ 1131.54495835   452.15850529   673.61547145]]
[[ 1162.12328867   469.46769824   673.72104417]]
[[ 1218.2467519    512.5709244    673.96523986]]
[[ 1132.03746853   453.33044097   674.12565084]]
[[ 1162.68351295   470.83226669   674.32121249]]
[[ 1132.53250471   454.50853355   674.63803286]]
[[ 1218.96029383   514.39240821   674.79406183]]
[[ 1163.24700167   472.20504365   674.92433573]]
[[ 1133.03008891   455.6928374    675.15263441]]
[[ 1163.81378688   473.58611139   675.53043948]]
[[ 1219.67897035   516.22768516   675.62798697]]
[[ 1133.53024345   456.88340755   675.66947257]]
[[ 1164.38390107   474.9755533    676.13954964]]
[[ 1134.03299092   458.0802997    676.18856459]]
[[ 1220.40284095   518.0769224    676.46706786]]
[[ 1134.53835416   459.28357024   676.70992792]]
[[ 1164.95737713   476.37345389   676.75169242]]
[[ 1135.04635632   460.49327623   677.23358019]]
[[ 1221.13196596   519.94028975   677.31135772]]
[[ 1165.53424844   477.77989885   677.36689433]]
[[ 1135.5570208    461.70947545   677.7595392 ]]
[[ 1166.1145488    479.19497505   677.9851822 ]]
[[ 1221.86640665   521.81795969   678.16091051]]
[[ 1136.07037132   462.93222638   678.28782296]]
[[ 1166.69831247   480.61877054   678.60658319]]
[[ 1136.58643186   464.16158822   678.81844968]]
[[ 1222.6062252    523.71010743   679.01578085]]
[[ 1167.28557421   482.05137461   679.23112477]]
[[ 1137.10522672   465.39762091   679.35143775]]
[[ 1167.87636922   483.49287779   679.85883473]]
[[ 1223.35148473   525.61691096   679.87602409]]
[[ 1137.62678048   466.64038513   679.88680577]]
[[ 1138.15111806   467.88994232   680.42457253]]
[[ 1168.47073321   484.94337186   680.48974123]]
[[ 1224.10224929   527.53855108   680.7416963 ]]
[[ 1138.67826465   469.1463547    680.96475704]]
[[ 1169.06870235   486.40294989   681.12387272]]
[[ 1139.20824578   470.40968525   681.50737849]]
[[ 1224.85858394   529.4752115    681.61285427]]
[[ 1169.67031335   487.87170625   681.76125804]]
[[ 1139.74108728   471.67999774   682.05245632]]
[[ 1170.27560339   489.34973665   682.40192634]]
[[ 1225.62055469   531.42707883   682.48955553]]
[[ 1140.27681533   472.95735677   682.60001014]]
[[ 1170.8846102    490.83713815   683.04590715]]
[[ 1140.81545643   474.24182774   683.15005981]]
[[ 1226.38822855   533.39434268   683.37185837]]
[[ 1171.49737202   492.33400918   683.69323034]]
[[ 1141.3570374    475.53347689   683.70262538]]
[[ 1141.90158543   476.83237128   684.25772715]]
[[ 1227.16167358   535.37719571   684.25982181]]
[[ 1172.11392762   493.84044957   684.34392616]]
[[ 1142.44912803   478.13857887   684.81538562]]
[[ 1172.73431634   495.35656057   684.99802522]]
[[ 1227.94095885   537.37583365   685.15350566]]
[[ 1142.99969307   479.45216846   685.37562152]]
[[ 1173.35857806   496.88244491   685.6555585 ]]
[[ 1143.55330879   480.77320973   685.93845583]]
[[ 1228.72615449   539.3904554    686.05297051]]
[[ 1173.9867532    498.41820675   686.31655737]]
[[ 1144.11000377   482.10177329   686.50390975]]
[[ 1229.51733169   541.42126307   686.9582777 ]]
[[ 1174.61888281   499.96395178   686.98105358]]
[[ 1144.66980699   483.43793064   687.0720047 ]]
[[ 1145.23274777   484.78175422   687.64276238]]
[[ 1175.25500847   501.51978721   687.64907927]]
[[ 1230.31456277   543.46846203   687.86948942]]
[[ 1145.79885585   486.1333174    688.2162047 ]]
[[ 1175.89517238   503.08582181   688.32066698]]
[[ 1231.11792111   545.532261     688.78666862]]
[[ 1146.36816131   487.49269453   688.79235383]]
[[ 1176.53941735   504.66216592   688.99584966]]
[[ 1146.94069467   488.85996092   689.37123218]]
[[ 1177.18778679   506.24893151   689.67466065]]
[[ 1231.92748124   547.61287206   689.70987909]]
[[ 1147.51648683   490.23519288   689.95286243]]
[[ 1177.84032475   507.84623218   690.35713372]]
[[ 1148.0955691    491.61846771   690.53726751]]
[[ 1232.74331885   549.71051077   690.63918543]]
[[ 1178.49707592   509.4541832    691.04330306]]
[[ 1148.67797319   493.00986377   691.12447061]]
[[ 1233.56551076   551.82539619   691.57465309]]
[[ 1149.26373125   494.40946042   691.71449517]]
[[ 1179.15808563   511.07290154   691.73320328]]
[[ 1149.85287586   495.8173381    692.30736493]]
[[ 1179.82339987   512.70250591   692.42686943]]
[[ 1234.394135     553.95775096   692.51634836]]
[[ 1150.44544001   497.23357832   692.90310388]]
[[ 1180.49306532   514.34311677   693.12433699]]
[[ 1235.22927082   556.10780137   693.46433838]]
[[ 1151.04145716   498.6582637    693.50173628]]
[[ 1181.16712932   515.99485638   693.82564191]]
[[ 1151.64096121   500.09147796   694.10328668]]
[[ 1236.07099865   558.27577743   694.41869116]]
[[ 1181.84563993   517.65784883   694.53082057]]
[[ 1152.2439865    501.53330593   694.70777993]]
[[ 1182.52864591   519.33222007   695.23990981]]
[[ 1152.85056787   502.98383363   695.31524113]]
[[ 1236.91940022   560.46191291   695.37947557]]
[[ 1153.46074061   504.44314822   695.92569571]]
[[ 1183.21619674   521.01809795   695.95294695]]
[[ 1237.77455848   562.66644546   696.34676139]]
[[ 1154.07454048   505.91133807   696.53916936]]
[[ 1183.90834266   522.71561224   696.66996978]]
[[ 1154.69200376   507.38849275   697.1556881 ]]
[[ 1238.6365577    564.88961662   697.32061928]]
[[ 1184.60513464   524.4248947    697.39101657]]
[[ 1155.31316721   508.87470305   697.77527825]]
[[ 1185.30662441   526.14607905   698.11612608]]
[[ 1239.50548344   567.13167194   698.3011208 ]]
[[ 1155.9380681    510.37006102   698.39796641]]
[[ 1186.01286449   527.8793011    698.84533755]]
[[ 1156.5667442    511.87466      699.02377952]]
[[ 1240.38142262   569.39286103   699.28833842]]
[[ 1186.72390819   529.6246987    699.57869075]]
[[ 1157.19923384   513.38859461   699.65274485]]
[[ 1241.26446348   571.67343763   700.28234554]]
[[ 1157.83557585   514.91196077   700.28488995]]
[[ 1187.43980962   531.38241184   700.31622594]]
[[ 1158.47580961   516.44485578   700.92024273]]
[[ 1188.16062373   533.15258267   701.05798391]]
[[ 1242.15469566   573.9736597    701.28321649]]
[[ 1159.11997507   517.98737827   701.55883142]]
[[ 1188.8864063    534.93535551   701.80400596]]
[[ 1159.76811272   519.53962827   702.2006846 ]]
[[ 1243.05221018   576.2937895    702.29102655]]
[[ 1189.61721395   536.73087696   702.55433394]]
[[ 1160.42026363   521.10170723   702.84583117]]
[[ 1243.95709951   578.63409363   703.30585193]]
[[ 1190.35310419   538.53929586   703.30901024]]
[[ 1161.07646946   522.67371802   703.49430038]]
[[ 1191.0941354    540.36076341   704.06807779]]
[[ 1161.73677244   524.25576499   704.14612184]]
[[ 1244.86945753   580.99484316   704.32776981]]
[[ 1162.40121544   525.84795396   704.80132553]]
[[ 1191.84036688   542.19543316   704.83158009]]
[[ 1245.78937961   583.37631368   705.35685834]]
[[ 1163.0698419    527.45039228   705.45994175]]
[[ 1192.59185883   544.04346109   705.5995612 ]]
[[ 1163.74269592   529.06318884   706.12200121]]
[[ 1193.34867241   545.90500563   706.37206575]]
[[ 1246.71696262   585.77878538   706.39319665]]
[[ 1164.41982221   530.68645409   706.78753496]]
[[ 1194.11086972   547.78022771   707.14913897]]
[[ 1247.65230493   588.20254315   707.43686483]]
[[ 1165.10126616   532.32030007   707.45657446]]
[[ 1194.87851383   549.66929085   707.93082667]]
[[ 1165.78707379   533.96484048   708.12915152]]
[[ 1248.59550645   590.64787666   708.487944  ]]
[[ 1195.65166881   551.57236115   708.71717527]]
[[ 1166.47729179   535.62019064   708.80529835]]
[[ 1167.17196756   537.28646757   709.48504758]]
[[ 1196.43039976   553.48960737   709.50823178]]
[[ 1249.54666867   593.11508041   709.54651624]]
[[ 1167.87114918   538.96379001   710.1684322 ]]
[[ 1197.21477277   555.42120099   710.30404387]]
[[ 1250.50589465   595.60445387   710.61266468]]
[[ 1168.57488543   540.65227844   710.85548563]]
[[ 1198.00485502   557.36731624   711.1046598 ]]
[[ 1169.28322584   542.35205512   711.54624171]]
[[ 1251.47328909   598.11630154   711.68647343]]
[[ 1198.80071474   559.32813019   711.91012849]]
[[ 1169.99622064   544.06324412   712.24073467]]
[[ 1199.60242127   561.30382275   712.72049951]]
[[ 1252.44895831   600.65093303   712.76802765]]
[[ 1170.71392083   545.78597137   712.9389992 ]]
[[ 1200.41004503   563.29457677   713.53582307]]
[[ 1171.43637818   547.52036467   713.64107039]]
[[ 1253.43301031   603.20866318   713.8574135 ]]
[[ 1172.16364522   549.26655372   714.34698378]]
[[ 1201.22365761   565.30057811   714.35615006]]
[[ 1254.42555476   605.78981212   714.9547182 ]]
[[ 1172.89577529   551.02467019   715.05677537]]
[[ 1202.04333175   567.32201563   715.18153206]]
[[ 1173.63282252   552.79484773   715.77048159]]
[[ 1202.86914137   569.35908133   716.01202133]]
[[ 1255.42670308   608.39470536   716.06003001]]
[[ 1174.37484187   554.57722201   716.48813933]]
[[ 1203.70116157   571.41197038   716.84767082]]
[[ 1256.43656841   611.02367393   717.17343823]]
[[ 1175.12188914   556.37193077   717.20978596]]
[[ 1204.53946872   573.48088115   717.68853419]]
[[ 1175.87402098   558.17911385   717.93545931]]
[[ 1257.45526566   613.67705442   718.2950332 ]]
[[ 1205.38414041   575.56601533   718.53466584]]
[[ 1176.63129492   559.99891322   718.66519768]]
[[ 1206.23525552   577.66757796   719.38612088]]
[[ 1177.39376936   561.83147304   719.39903988]]
[[ 1258.48291155   616.35518911   719.42490634]]
[[ 1178.16150363   563.67693969   720.1370252 ]]
[[ 1207.09289423   579.78577753   720.24295518]]
[[ 1259.51962461   619.05842603   720.56315011]]
[[ 1178.93455795   565.53546182   720.87919343]]
[[ 1207.95713805   581.92082599   721.10522534]]
[[ 1179.71299351   567.40719037   721.62558488]]
[[ 1260.56552522   621.78711912   721.70985805]]
[[ 1208.82806985   584.0729389    721.97298875]]
[[ 1180.49687243   569.29227866   722.37624035]]
[[ 1209.70577388   586.24233543   722.84630356]]
[[ 1261.62073565   624.54162825   722.86512475]]
[[ 1181.28625783   571.19088238   723.13120121]]
[[ 1210.59033579   588.42923849   723.72522872]]
[[ 1182.08121382   573.1031597    723.89050931]]
[[ 1262.68538005   627.3223194    724.02904589]]
[[ 1211.48184268   590.63387476   724.60982396]]
[[ 1182.88180551   575.02927125   724.65420709]]
[[ 1263.75958452   630.1295647    725.20171819]]
[[ 1183.68809907   576.96938022   725.4223375 ]]
[[ 1212.38038312   592.8564748    725.50014984]]
[[ 1184.5001617    578.92365238   726.19494407]]
[[ 1264.84347709   632.96374254   726.38323948]]
[[ 1213.28604717   595.09727312   726.39626773]]
[[ 1185.31806171   580.89225616   726.9720709 ]]
[[ 1214.19892643   597.35650825   727.29823986]]
[[ 1265.93718781   635.8252377    727.57370862]]
[[ 1186.14186848   582.87536265   727.75376265]]
[[ 1215.11911405   599.63442284   728.20612928]]
[[ 1186.97165252   584.87314572   728.54006457]]
[[ 1267.04084871   638.71444143   728.77322556]]
[[ 1216.04670477   601.93126374   729.11999991]]
[[ 1187.80748548   586.88578202   729.33102251]]
[[ 1268.15459386   641.63175158   729.98189132]]
[[ 1216.98179497   604.24728207   730.03991654]]
[[ 1188.64944019   588.91345109   730.12668291]]
[[ 1189.49759066   590.95633534   730.92709283]]
[[ 1217.92448267   606.58273332   730.96594487]]
[[ 1269.27855939   644.57757264   731.19980797]]
[[ 1190.35201211   593.01462018   731.73229996]]
[[ 1218.87486759   608.93787748   731.89815147]]
[[ 1270.41288353   647.55231593   732.42707866]]
[[ 1191.212781     595.08849405   732.54235261]]
[[ 1219.83305118   611.31297905   732.83660383]]
[[ 1192.07997506   597.17814849   733.35729972]]
[[ 1271.55770661   650.55639963   733.66380758]]
[[ 1220.79913665   613.70830721   733.78137037]]
[[ 1192.95367331   599.28377818   734.17719091]]
[[ 1221.77322901   616.12413588   734.73252046]]
[[ 1272.71317111   653.59024894   734.91009997]]
[[ 1193.83395608   601.40558104   735.00207644]]
[[ 1222.75543511   618.56074383   735.6901244 ]]
[[ 1194.72090506   603.54375826   735.83200725]]
[[ 1273.87942167   656.65429616   736.16606213]]
[[ 1223.74586366   621.01841478   736.65425347]]
[[ 1195.61460329   605.69851439   736.66703497]]
[[ 1275.05660512   659.74898078   737.43180136]]
[[ 1196.51513523   607.87005742   737.5072119 ]]
[[ 1224.74462531   623.4974375    737.62497993]]
[[ 1197.42258675   610.0585988    738.35259106]]
[[ 1225.75183264   625.99810594   738.60237704]]
[[ 1276.2448705    662.87474961   738.70742603]]
[[ 1198.3370452    612.26435358   739.20322619]]
[[ 1226.76760023   628.52071929   739.58651906]]
[[ 1277.44436909   666.03205688   739.99304547]]
[[ 1199.2585994    614.48754043   740.05917176]]
[[ 1227.7920447    631.06558215   740.57748127]]
[[ 1200.18733972   616.72838175   740.92048296]]
[[ 1278.65525443   669.22136434   741.28877006]]
[[ 1228.82528477   633.63300461   741.57533999]]
[[ 1201.12335805   618.98710371   741.78721574]]
[[ 1229.86744124   636.22330236   742.58017261]]
[[ 1279.87768236   672.44314136   742.59471113]]
[[ 1202.0667479    621.26393637   742.65942681]]
[[ 1203.01760437   623.55911375   743.53717367]]
[[ 1230.91863712   638.83679683   743.59205756]]
[[ 1281.11181099   675.69786503   743.91098099]]
[[ 1203.97602424   625.8728739    744.42051458]]
[[ 1231.9789976    641.47381532   744.61107437]]
[[ 1282.35780079   678.98602029   745.2376929 ]]
[[ 1204.94210596   628.20545899   745.30950861]]
[[ 1233.04865015   644.13469109   745.63730366]]
[[ 1205.91594974   630.5571154    746.20421566]]
[[ 1283.61581456   682.3081       746.57496106]]
[[ 1234.12772455   646.81976352   746.67082717]]
[[ 1206.89765751   632.92809383   747.10469643]]
[[ 1235.21635292   649.52937822   747.71172774]]
[[ 1284.88601747   685.66460503   747.92290057]]
[[ 1207.88733305   635.31864936   748.01101247]]
[[ 1236.31466979   652.26388719   748.76008939]]
[[ 1208.88508194   637.72904154   748.92322617]]
[[ 1286.16857708   689.0560444    749.28162742]]
[[ 1237.42281217   655.02364893   749.81599726]]
[[ 1209.89101166   640.15953453   749.84140081]]
[[ 1287.46366334   692.48293535   750.65125847]]
[[ 1210.90523163   642.61039717   750.76560053]]
[[ 1238.54091956   657.80902858   750.8795377 ]]
[[ 1211.92785321   645.08190308   751.69589036]]
[[ 1239.669134     660.62039808   751.95079821]]
[[ 1288.77144863   695.94580342   752.03191139]]
[[ 1212.95898978   647.57433075   752.63233625]]
[[ 1240.8076002    663.45813633   753.02986753]]
[[ 1290.09210774   699.44518258   753.42370468]]
[[ 1213.99875676   650.08796369   753.57500507]]
[[ 1241.9564655    666.32262929   754.11683558]]
[[ 1215.0472717    652.62309051   754.52396462]]
[[ 1291.42581793   702.98161529   754.82675758]]
[[ 1243.11587997   669.21427018   755.21179355]]
[[ 1216.10465425   655.18000503   755.47928366]]
[[ 1292.77275888   706.55565258   756.2411901 ]]
[[ 1244.28599649   672.13345961   756.31483386]]
[[ 1217.17102628   657.75900641   756.4410319 ]]
[[ 1218.2465119    660.36039924   757.40928007]]
[[ 1245.46697076   675.08060576   757.42605019]]
[[ 1294.13311277   710.16785415   757.66712291]]
[[ 1219.33123751   662.9844937    758.38409986]]
[[ 1246.6589614    678.05612452   758.54553752]]
[[ 1295.50706422   713.81878846   759.10467736]]
[[ 1220.42533185   665.63160566   759.365564  ]]
[[ 1247.86212999   681.06043968   759.67339212]]
[[ 1221.52892603   668.30205679   760.35374623]]
[[ 1296.89480035   717.50903277   760.55397539]]
[[ 1249.07664113   684.09398307   760.80971155]]
[[ 1222.64215366   670.99617474   761.34872135]]
[[ 1250.30266252   687.15719478   761.95459472]]
[[ 1298.29651072   721.23917324   762.01513954]]
[[ 1223.7651508    673.71429322   762.35056524]]
[[ 1251.54036502   690.25052329   763.10814188]]
[[ 1224.8980561    676.45675218   763.35935483]]
[[ 1299.71238739   725.00980496   763.48829282]]
[[ 1252.7899227    693.37442569   764.27045463]]
[[ 1226.04101083   679.2238979    764.37516817]]
[[ 1301.14262491   728.82153206   764.97355874]]
[[ 1227.19415891   682.01608319   765.39808443]]
[[ 1254.05151292   696.52936782   765.44163593]]
[[ 1228.35764702   684.8336675    766.42818389]]
[[ 1302.58742025   732.67496773   766.47106118]]
[[ 1255.32531641   699.71582451   766.62179014]]
[[ 1229.53162464   687.67701708   767.465548  ]]
[[ 1256.6115173    702.93427975   767.81102303]]
[[ 1304.04697287   736.57073424   767.98092438]]
[[ 1230.71624409   690.54650514   768.51025938]]
[[ 1257.91030323   706.18522687   769.00944175]]
[[ 1305.52148467   740.50946306   769.50327286]]
[[ 1231.91166064   693.44251201   769.56240184]]
[[ 1259.22186542   709.46916877   770.21715492]]
[[ 1233.11803254   696.36542528   770.6220604 ]]
[[ 1307.01115997   744.49179481   771.03823135]]
[[ 1260.5463987    712.7866181    771.43427257]]
[[ 1234.33552112   699.31563999   771.68932129]]
[[ 1308.51620549   748.51837932   772.5859247 ]]
[[ 1261.88410164   716.13809748   772.66090619]]
[[ 1235.5642908    702.29355879   772.76427201]]
[[ 1236.80450926   705.29959214   773.84700131]]
[[ 1263.23517657   719.52413972   773.89716875]]
[[ 1310.03683034   752.58987565   774.14647783]]
[[ 1238.05634741   708.33415843   774.93759923]]
[[ 1264.59982972   722.94528799   775.14317469]]
[[ 1311.57324599   756.70695209   775.72001564]]
[[ 1239.31997952   711.39768423   776.03615712]]
[[ 1265.97827121   726.40209612   776.39903993]]
[[ 1240.5955833    714.49060444   777.14276766]]
[[ 1313.12566619   760.87028612   777.30666292]]
[[ 1267.3707152    729.89512874   777.66488191]]
[[ 1241.88333996   717.61336249   778.25752485]]
[[ 1314.694307     765.08056445   778.90654426]]
[[ 1268.77737995   733.42496155   778.94081957]]
[[ 1243.18343427   720.76641052   779.38052408]]
[[ 1270.19848788   736.99218155   780.22697338]]
[[ 1244.49605469   723.95020963   780.51186213]]
[[ 1316.2793867    769.33848295   780.51978393]]
[[ 1271.63426564   740.59738727   781.52346533]]
[[ 1245.82139341   727.16523003   781.65163718]]
[[ 1317.88112572   773.64474662   782.14650584]]
[[ 1247.15964647   730.41195129   782.79994885]]
[[ 1273.08494424   744.24118896   782.83041896]]
[[ 1319.49974664   778.0000695    783.78683337]]
[[ 1248.51101379   733.69086254   783.95689818]]
[[ 1274.55075906   747.92420892   784.14795934]]
[[ 1249.87569934   737.00246269   785.12258772]]
[[ 1321.13547407   782.40517467   785.44088927]]
[[ 1276.03194998   751.64708164   785.4762131 ]]
[[ 1251.25391113   740.34726066   786.29712149]]
[[ 1277.52876146   755.41045414   786.81530843]]
[[ 1322.78853458   786.86079407   787.10879558]]
[[ 1252.64586141   743.72577562   787.48060503]]
[[ 1279.04144256   759.21498613   788.16537507]]
[[ 1254.05176666   747.1385372    788.67314543]]
[[ 1324.45915667   791.36766846   788.79067346]]
[[ 1280.57024709   763.06135033   789.52654432]]
[[ 1255.47184774   750.58608576   789.87485132]]
[[ 1326.14757059   795.92654725   790.48664307]]
[[ 1282.11543364   766.95023266   790.89894905]]
[[ 1256.90632999   754.06897262   791.08583291]]
[[ 1327.85400833   800.5381884    792.19682344]]
[[ 1283.67726567   770.88233254   792.28272369]]
[[ 1258.3554433    757.58776031   792.30620203]]
[[ 1259.81942221   761.14302284   793.5360721 ]]
[[ 1285.25601159   774.85836311   793.67800422]]
[[ 1329.57870344   805.20335818   793.92133233]]
[[ 1261.29850603   764.73534594   794.77555821]]
[[ 1286.85194481   778.8790515    795.08492818]]
[[ 1331.32189093   809.92283103   795.66028607]]
[[ 1262.79293891   768.36532734   796.02477711]]
[[ 1288.46534384   782.94513907   796.50363465]]
[[ 1264.30296997   772.03357706   797.28384722]]
[[ 1333.08380716   814.69738933   797.41379938]]
[[ 1290.09649234   787.05738166   797.93426426]]
[[ 1265.82885338   775.74071762   798.55288868]]
[[ 1334.86468964   819.52782314   799.18198523]]
[[ 1291.74567917   791.21654986   799.37695914]]
[[ 1267.37084848   779.48738442   799.83202334]]
[[ 1293.41319849   795.42342922   800.83186295]]
[[ 1336.66477692   824.41492994   800.96495468]]
[[ 1268.92921986   783.27422591   801.1213748 ]]
[[ 1295.09934979   799.67882055   802.29912085]]
[[ 1270.50423748   787.10190399   802.42106842]]
[[ 1338.48430839   829.35951431   802.76281664]]
[[ 1272.09617677   790.9710942    803.73123135]]
[[ 1296.80443792   803.9835401    803.77887946]]
[[ 1340.32352409   834.3623876    804.57567774]]
[[ 1273.70531872   794.8824861    805.05199253]]
[[ 1298.52877318   808.33841982   805.27128685]]
[[ 1275.33195      798.83678352   806.3834827 ]]
[[ 1342.18266449   839.42436755   806.40364209]]
[[ 1300.27267134   812.74430758   806.77649251]]
[[ 1276.97636304   802.83470488   807.72583446]]
[[ 1344.06197031   844.54627787   808.24681107]]
[[ 1302.03645367   817.20206743   808.29464733]]
[[ 1278.63885615   806.87698348   809.07918221]]
[[ 1303.82044696   821.71257974   809.82590355]]
[[ 1345.9616822    849.72894782   810.10528315]]
[[ 1280.3197336    810.96436781   810.44366224]]
[[ 1305.62498355   826.27674144   811.37041472]]
[[ 1282.01930573   815.09762189   811.81941269]]
[[ 1347.88204057   854.97321166   811.97915361]]
[[ 1307.45040132   830.89546623   812.92833566]]
[[ 1283.737889     819.27752552   813.20657358]]
[[ 1349.8232852    860.27990815   813.86851435]]
[[ 1309.2970437    835.5696847    814.49982241]]
[[ 1285.47580616   823.50487462   814.60528682]]
[[ 1351.78565502   865.64987994   815.77345359]]
[[ 1287.23338623   827.78048154   816.01569619]]
[[ 1311.16525963   840.30034451   816.08503216]]
[[ 1289.01096468   832.10517535   817.43794737]]
[[ 1313.05540354   845.08841052   817.68412321]]
[[ 1353.76938772   871.08397294   817.69405567]]
[[ 1290.80888342   836.47980214   818.87218793]]
[[ 1314.9678353    849.93486492   819.29725487]]
[[ 1355.7747194    876.58303559   819.63040073]]
[[ 1292.62749092   840.90522532   820.31856734]]
[[ 1316.90292017   854.8407073    820.9245874 ]]
[[ 1357.80188418   882.14791815   821.58256443]]
[[ 1294.46714225   845.38232591   821.77723694]]
[[ 1318.86102867   859.80695471   822.56628193]]
[[ 1296.32819911   849.91200279   823.24834994]]
[[ 1359.8511138    887.77947183   823.55061771]]
[[ 1320.84253652   864.83464171   824.22250033]]
[[ 1298.21102992   854.49517304   824.73206143]]
[[ 1361.92263711   893.47854791   825.53462643]]
[[ 1322.84782448   869.92482032   825.89340515]]
[[ 1300.11600979   859.13277212   826.2285283 ]]
[[ 1364.01667965   899.2459968    827.53465105]]
[[ 1324.8772782    875.07856002   827.57915947]]
[[ 1302.04352059   863.82575416   827.73790931]]
[[ 1303.99395089   868.5750922    829.26036497]]
[[ 1326.93128805   880.29694763   829.2799268 ]]
[[ 1366.13346307   905.08266699   829.55074634]]
[[ 1305.96769601   873.38177833   830.79605756]]
[[ 1329.01024887   885.5810872    830.99587092]]
[[ 1368.27320461   910.98940391   831.58296102]]
[[ 1307.96515793   878.24682398   832.34515108]]
[[ 1331.11455975   890.93209975   832.72715574]]
[[ 1370.43611644   916.96704876   833.63133737]]
[[ 1309.98674527   883.17125999   833.90781118]]
[[ 1333.24462373   896.35112312   834.47394511]]
[[ 1312.03287322   888.15613679   835.48420513]]
[[ 1372.62240504   923.01643717   835.6959109 ]]
[[ 1335.40084746   901.83931152   836.23640268]]
[[ 1314.1039634    893.20252449   837.07450174]]
[[ 1374.8322705    929.13839786   837.77670994]]
[[ 1337.58364083   907.39783525   838.01469167]]
[[ 1316.20044376   898.31151293   838.67887131]]
[[ 1339.79341652   913.02788013   839.80897468]]
[[ 1377.06590576   935.33375106   839.87375526]]
[[ 1318.32274841   903.4842117    840.29748549]]
[[ 1342.03058959   918.730647     841.61941342]]
[[ 1320.47131743   908.72175015   841.93051726]]
[[ 1379.32349581   941.603307     841.9870596 ]]
[[ 1344.29557683   924.50735099   843.44616849]]
[[ 1322.64659662   914.02527722   843.57814075]]
[[ 1381.6052168    947.94786409   844.11662732]]
[[ 1324.84903725   919.39596138   845.24053115]]
[[ 1346.58879625   930.3592208    845.28939907]]
[[ 1383.91123518   954.36820715   846.26245385]]
[[ 1327.07909574   924.83499038   846.91786461]]
[[ 1348.91066635   936.28749775   847.14926265]]
[[ 1386.24170663   960.86510537   848.42452533]]
[[ 1329.33723324   930.34357096   848.61031799]]
[[ 1351.26160537   942.29343478   849.0259147 ]]
[[ 1331.62391525   935.92292846   850.3180688 ]]
[[ 1388.59677509   967.43931025   850.60281803]]
[[ 1353.6420305    948.37829528   850.91950829]]
[[ 1333.93961115   941.5743064    852.04129491]]
[[ 1390.97657155   974.09155328   852.7972979 ]]
[[ 1356.05235689   954.54335173   852.83019371]]
[[ 1336.28479357   947.29896587   853.78017443]]
[[ 1358.49299666   960.78988425   854.7581181 ]]
[[ 1393.38121293   980.82254361   855.00792004]]
[[ 1338.65993782   953.09818487   855.5348854 ]]
[[ 1360.96435779   967.11917886   856.70342492]]
[[ 1395.81080076   987.63296538   857.23462817]]
[[ 1341.0655212    958.97325746   857.30560557]]
[[ 1363.46684283   973.53252563   858.66625356]]
[[ 1343.50202212   964.92549287   859.0925121 ]]
[[ 1398.2654198    994.52347508   859.47735405]]
[[ 1366.00084758   980.03121655   860.64673871]]
[[ 1345.96991932   970.95621432   860.89578126]]
[[ 1400.74513663  1001.49469856   861.7360169 ]]
[[ 1368.56675958   986.61654323   862.64500989]]
[[ 1348.46969079   977.06675783   862.71558807]]
[[ 1403.24999812  1008.54722799   864.01052283]]
[[ 1351.00181271   983.25847069   864.55210592]]
[[ 1371.16495647   993.28979423   864.66119078]]
[[ 1405.78002977  1015.68161852   866.30076421]]
[[ 1353.56675823   989.53270984   866.40550615]]
[[ 1373.79580423  1000.05225224   866.69539856]]
[[ 1356.16499611   995.89084001   868.27595761]]
[[ 1408.33523401  1022.89838486   868.60661903]]
[[ 1376.45965519  1006.90519089   868.74774325]]
[[ 1358.79698919  1002.33423153   870.16362612]]
[[ 1379.15684596  1013.84987124   870.81832689]]
[[ 1410.91558837  1030.1979975    870.92795022]]
[[ 1361.46319281  1008.86425803   872.06867398]]
[[ 1381.88769512  1020.88753797   872.90724277]]
[[ 1413.52104356  1037.58087892   873.26460504]]
[[ 1364.16405298  1015.48229373   873.99125932]]
[[ 1384.65250072  1028.01941515   875.01457452]]
[[ 1416.15152147  1045.04739938   875.6164143 ]]
[[ 1366.90000434  1022.18971046   875.93153549]]
[[ 1387.45153761  1035.24670167   877.14039518]]
[[ 1369.67146809  1028.98787442   877.88965032]]
[[ 1418.80691302  1052.59787262   877.98319171]]
[[ 1390.28505454  1042.57056624   879.28476622]]
[[ 1372.47884954  1035.87814246   879.86574538]]
[[ 1421.48707592  1060.23255129   880.36473311]]
[[ 1393.153271    1049.99214188   881.44773641]]
[[ 1375.32253558  1042.86185803   881.85995514]]
[[ 1424.1918324   1067.95162217   882.76081574]]
[[ 1396.05637391  1057.51252011   883.62934075]]
[[ 1378.20289185  1049.94034679   883.87240607]]
[[ 1426.92096668  1075.75520113   885.17119746]]
[[ 1398.99451402  1065.13274445   885.82959918]]
[[ 1381.12025973  1057.11491166   885.90321566]]
[[ 1429.67422256  1083.64332787   887.59561595]]
[[ 1384.07495299  1064.38682746   887.95249138]]
[[ 1401.96780202  1072.85380359   888.04851533]]
[[ 1387.06725433  1071.75733507   890.02032956]]
[[ 1432.45130068  1091.61596049   890.03378799]]
[[ 1404.9763045   1080.67662391   890.28607514]]
[[ 1390.09741147  1079.227635     892.10681414]]
[[ 1435.25185589  1099.67296976   892.48540855]]
[[ 1408.02003959  1088.60206149   892.54224539]]
[[ 1393.1656331   1086.79888048   894.21201542]]
[[ 1411.0989723   1096.63089358   894.8169722 ]]
[[ 1438.07549439  1107.81413323   894.95015006]]
[[ 1396.27208444  1094.47216991   896.33598861]]
[[ 1414.2130097   1104.76380941   897.11017937]]
[[ 1440.92177095  1116.03912914   897.42766156]]
[[ 1399.41688258  1102.24853871   898.47877238]]
[[ 1417.36199575  1113.00140054   899.42176671]]
[[ 1443.79018587  1124.34753011   899.91756789]]
[[ 1402.60009146  1110.12895057   900.64038726]]
[[ 1420.54570597  1121.34415047   901.75160829]]
[[ 1446.68018211  1132.73879673   902.41946888]]
[[ 1405.82171656  1118.11428801   902.82083394]]
[[ 1423.76384176  1129.79242379   904.09955052]]
[[ 1449.59114223  1141.21227096   904.93293853]]
[[ 1409.08169928  1126.2053423    905.02009152]]
[[ 1427.01602464  1138.34645464   906.46541031]]
[[ 1412.37991104  1134.40280268   907.23811556]]
[[ 1452.5223854   1149.76716942   907.45752424]]
[[ 131.54927654  993.24133451  907.79219807]]
[[ 132.54835175  993.56618106  908.10181367]]
[[ 133.54992651  993.89159142  908.412231  ]]
[[ 134.5540065   994.21756601  908.72345222]]
[[ 1430.30179015  1147.00633475   908.848973  ]]
[[ 135.56059737  994.54410523  909.03547949]]
[[ 136.56970476  994.87120947  909.34831495]]
[[ 1415.71614704  1142.70724493   909.47483616]]
[[ 137.58133426  995.1988791   909.66196074]]
[[ 138.59549141  995.5271145   909.97641898]]
[[ 1455.47316437  1158.40257665   909.99274605]]
[[ 139.61218176  995.855916    910.29169181]]
[[ 140.63141077  996.18528393  910.60778133]]
[[ 141.65318391  996.51521862  910.92468967]]
[[ 142.6775066   996.84572036  911.24241893]]
[[ 1433.62058167  1155.7720008    911.24999038]]
[[ 143.7043842   997.17678945  911.56097118]]
[[ 1419.09011981  1151.11911923   911.73015581]]
[[ 144.73382206  997.50842616  911.88034853]]
[[ 145.76582548  997.84063073  912.20055305]]
[[ 146.80039972  998.17340342  912.5215868 ]]
[[ 1458.44266254  1167.11743827   912.53809588]]
[[ 147.83755     998.50674445  912.84345185]]
[[ 148.87728148  998.84065402  913.16615024]]
[[ 149.9195993   999.17513234  913.48968401]]
[[ 1436.97174409  1164.64322142   913.6681785 ]]
[[ 150.96450855  999.51017956  913.81405519]]
[[ 1422.50145244  1159.63873736   914.00394726]]
[[ 152.01201426  999.84579586  914.13926579]]
[[  153.06212144  1000.18198138   914.46531784]]
[[  154.11483503  1000.51873624   914.79221331]]
[[ 1461.42999104  1175.91055422   915.09303684]]
[[  155.17015993  1000.85606054   915.1199542 ]]
[[  156.22810098  1001.19395438   915.44854248]]
[[  157.288663    1001.53241783   915.77798012]]
[[ 1440.35451733  1173.61958366   916.10321562]]
[[  158.35185071  1001.87145094   916.10826905]]
[[ 1425.94967161  1168.26625932   916.29605121]]
[[  159.41766883  1002.21105374   916.43941122]]
[[  160.48612198  1002.55122626   916.77140855]]
[[  161.55721475  1002.89196848   917.10426296]]
[[  162.63095168  1003.2332804    917.43797633]]
[[ 1464.4341859   1184.78057199   917.65700258]]
[[  163.70733724  1003.57516196   917.77255055]]
[[  164.78637584  1003.91761311   918.10798749]]
[[  165.86807183  1004.26063376   918.444289  ]]
[[ 1443.76802993  1182.70047919   918.55473996]]
[[ 1429.43420043  1177.00167923   918.60627395]]
[[  166.95242951  1004.60422382   918.78145693]]
[[  168.03945312  1004.94838316   919.11949309]]
[[  169.12914682  1005.29311165   919.45839929]]
[[  170.22151472  1005.63840912   919.79817733]]
[[  171.31656086  1005.98427539   920.13882898]]
[[ 1467.45420542  1193.72598002   920.22939665]]
[[  172.41428922  1006.33071026   920.480356  ]]
[[  173.5147037   1006.6777135    920.82276013]]
[[ 1432.95435107  1185.8448108    920.934385  ]]
[[ 1447.21129248  1191.88509015   921.02234757]]
[[  174.61780815  1007.02528486   921.16604309]]
[[  175.72360633  1007.37342408   921.51020659]]
[[  176.83210195  1007.72213087   921.85525232]]
[[  177.94329862  1008.07140491   922.20118195]]
[[ 2195.8714007    962.78628434   922.21331534   349.70926138
[[ 2194.87900447   963.65185799   922.32468111   349.73003103
[[ 2193.8696046    964.53087621   922.43820532   349.75118237
[[  179.0571999   1008.42124586   922.54799712]]
[[ 2192.84290091   965.42344651   922.55393522   349.77272479
[[ 2191.79845521   966.32929519   922.67193418   349.79469652
[[ 2190.73595575   967.24854396   922.792253     349.81710751
[[ 1470.48892762  1202.74510125   922.80959204]]
[[  180.17380928  1008.77165338   922.89569948]]
[[ 2189.65508466   968.18131107   922.91494445   349.83996803
[[ 2188.5555177    969.12771107   923.04006347   349.86328874
[[ 2187.43692415   970.08785434   923.16766745   349.88708066
[[  181.29313014  1009.12262707   923.24429062]]
[[ 1436.5093174   1194.79527223   923.28011452]]
[[ 2186.29896665   971.0618468    923.2978165    349.91135526
[[ 2185.141301     972.04978944   923.43057384   349.93612444
[[ 1450.68319132  1201.17237482   923.50559012]]
[[ 2183.96357605   973.05177792   923.56600624   349.96140056
[[  182.41516582  1009.47416653   923.59377215]]
[[ 2182.76543351   974.06790217   923.70418449   349.98719648
[[ 2181.54650782   975.09824584   923.84518407   350.0135256    359.01750562
[[  183.53991956  1009.82627134   923.94414562]]
[[ 2180.30642602   976.14288592   923.98908579   350.04040186
[[ 2179.0448076    977.20189216   924.1359767    350.0678398    359.04813722
[[ 2177.76126443   978.27532661   924.28595109   350.09585457
[[  184.66739453  1010.17894104   924.2954126 ]]
[[ 2176.45540064   979.36324306   924.43911163   350.12446198
[[ 2175.12681259   980.46568652   924.59557086   350.15367853
[[  185.79759382  1010.53217515   924.6475746 ]]
[[ 2173.77508888   981.58269262   924.75545279   350.18352141
[[ 2172.39981034   982.71428715   924.91889488   350.21400854
[[  186.93052042  1010.88597318   925.00063314]]
[[ 2171.00055013   983.86048539   925.08605033   350.2451586    359.14758776
[[ 2169.57687391   985.02129165   925.25709084   350.27699104
[[  188.06617726  1011.2403346    925.35458969]]
[[ 1473.53714795  1211.83608698   925.39693066]]
[[ 2168.12834011   986.19669868   925.43220969   350.30952605
[[ 2166.65450019   987.38668718   925.61162557   350.34278458
[[ 1440.09816748  1203.85247072   925.64315086]]
[[  189.20456717  1011.59525887   925.70944573]]
[[ 2165.15489919   988.59122531   925.79558683   350.37678831
[[ 2163.62907626   989.8102683    925.9843766    350.41155957
[[ 1454.18248223  1210.56105329   926.00397275]]
[[  190.3456929   1011.9507454    926.06520268]]
[[ 2162.07656548   991.04375802   926.17831866   350.44712129   359.2594267
[[ 2160.49689679   992.29162276   926.37778431   350.48349689   359.2793667
[[  191.48955712  1012.3067936    926.42186196]]
[[ 2158.88959717   993.55377702   926.58320023   350.52071009
[[  192.63616239  1012.66340284   926.77942497]]
[[ 2157.25419211   994.83012151   926.7950577    350.55878473
[[ 2155.59020734   996.12054324   927.0139231    350.59774451
[[  193.7855112   1013.02057248   927.13789307]]
[[ 2153.89717095   997.42491586   927.24045004   350.63761257
[[ 2152.1746159    998.74310024   927.47539324   350.67841115
[[  194.93760594  1013.37830183   927.49726761]]
[[ 2150.42208295  1000.07494534   927.71962438   350.72016092
[[  196.0924489   1013.73659019   927.85754989]]
[[ 2148.63921873  1001.42335034   927.96964497   350.76276659   359.4300766
[[ 1476.59757723  1220.99691094   927.99072299]]
[[ 1443.71983614  1213.01558671   928.02313799]]
[[  197.2500423   1014.09543684   928.21874121]]
[[ 2146.82555938  1002.78884032   928.22492349   350.8062246    359.45325763
[[ 2144.98061494  1004.17143948   928.485561     350.8505506    359.47687002
[[ 1457.7077845   1220.04959316   928.51695198]]
[[  198.41038823  1014.45484102   928.58084285]]
[[ 2143.10389048  1005.57116159   928.75165977   350.89576049
[[  199.57348872  1014.81480195   928.94385602]]
[[ 2141.19488635  1006.98800939   929.02332355   350.94187042   359.5254146
[[ 2139.25309844  1008.42197405   929.30065775   350.98889681
[[  200.73934567  1015.17531882   929.30778196]]
[[ 2137.27801847  1009.8730346    929.58376985   351.03685642
[[  201.90796091  1015.53639079   929.67262184]]
[[ 2135.26913434  1011.34115734   929.87276979   351.08576628
[[  203.07933613  1015.898017     930.03837682]]
[[ 2133.22593056  1012.8262952    930.16777064   351.13564381
[[  204.25347297  1016.26019655   930.40504803]]
[[ 1447.37311765  1222.28355791   930.41967287]]
[[ 2131.14788869  1014.32838722   930.46888927   351.18650678
[[ 1479.6688399   1230.22536395   930.5902478 ]]
[[  205.43037292  1016.62292854   930.77263657]]
[[ 2129.03448793  1015.84735786   930.77624733   351.23837339
[[ 1461.25757523  1229.63619544   931.0439337 ]]
[[ 2126.88520572  1017.38311644   931.08997238   351.29126224
[[  206.61003739  1016.98621201   931.14114351]]
[[ 2124.69951846  1018.9355565    931.41019926   351.34519243
[[  207.79246767  1017.35004598   931.51056989]]
[[ 2122.47690252  1020.50455509   931.73707114   351.40035785
[[  208.97766496  1017.71442945   931.88091674]]
[[ 2120.21683483  1022.08997239   932.07074262   351.4566232    359.79621942
[[  210.16563033  1018.07936139   932.25218502]]
[[ 2117.91879418  1023.69165106   932.41138162   351.51401127
[[  211.35636476  1018.44484074   932.62437569]]
[[ 2115.58226233  1025.30941561   932.75917213   351.5725457    359.85636149
[[ 1451.05665862  1231.65506327   932.832303  ]]
[[  212.54986911  1018.81086641   932.99748967]]
[[ 2113.20672544  1026.94307192   933.11431744   351.63225103
[[ 1482.74947261  1239.51904891   933.19475203]]
[[  213.74614413  1019.17743727   933.37152785]]
[[ 2110.79167558  1028.59240669   933.47704384   351.69315271   359.918618
[[ 1464.83018411  1239.31878094   933.58427122]]
[[  214.94519043  1019.54455218   933.74649108]]
[[ 2108.33661243  1030.25718693   933.84760486   351.75527715
[[  216.14700855  1019.91220995   934.12238019]]
[[ 2105.84104515  1031.93715959   934.22628608   351.81865178
[[  217.35159888  1020.28040938   934.49919596]]
[[ 2103.30449449  1033.63205105   934.61341043   351.88330502
[[  218.5589617   1020.64914923   934.87693916]]
[[ 2100.72649504  1035.34156682   935.00934425   351.94926628
[[  219.76909717  1021.01842823   935.25561051]]
[[ 1454.7689512   1241.12850711   935.26052382]]
[[ 2098.10659772  1037.06539121   935.41450373   352.01656597
[[  220.98200534  1021.38824507   935.63521069]]
[[ 1485.83792319  1248.87537646   935.80345072]]
[[ 2095.44437242  1038.80318703   935.82936205   352.08523539
[[  222.19768612  1021.75859843   936.01574036]]
[[ 1468.42378879  1249.09497715   936.13726352]]
[[ 2092.73941085  1040.55459534   936.25445691   352.15530666
[[  223.41613931  1022.12948695   936.39720015]]
[[ 2089.99132955  1042.31923532   936.69039859   352.22681258
[[  224.63736458  1022.50090923   936.77959062]]
[[ 2087.19977296  1044.09670404   937.13787813   352.29978647
[[  225.86136147  1022.87286384   937.16291233]]
[[  227.0881294   1023.24534934   937.54716579]]
[[ 2084.36441669  1045.88657636   937.59767578   352.37426188
[[ 1458.50832675  1250.70200355   937.70377635]]
[[  228.31766765  1023.61836424   937.93235147]]
[[ 2081.48497073  1047.68840476   938.0706693    352.4502723    360.30089999
[[  229.54997538  1023.99190701   938.31846981]]
[[ 1488.93255008  1258.29156138   938.41552714]]
[[ 2078.56118267  1049.50171925   938.55784189   352.52785083
[[ 1472.03641082  1258.96210603   938.70215364]]
[[  230.78505162  1024.36597611   938.7055212 ]]
[[ 2075.59284085  1051.32602714   939.0602895    352.60702963
[[  232.02289527  1024.74056996   939.09350601]]
[[  233.26350507  1025.11568694   939.48242455]]
[[ 2072.57977727  1053.16081282   939.57922715   352.68783946
[[  234.50687966  1025.4913254    939.8722771 ]]
[[ 2069.52187043  1055.00553734   940.11599323   352.77030899
[[ 1462.27294996  1260.37336142   940.16144487]]
[[  235.75301752  1025.86748367   940.26306392]]
[[  237.00191701  1026.24416003   940.65478519]]
[[ 2066.41904733  1056.85963814   940.67205347   352.85446408   360.4978803
[[ 1492.03162223  1267.76461966   941.03013308]]
[[  238.25357633  1026.62135275   941.04744109]]
[[ 2063.27128551  1058.72252833   941.24900119   352.94032699
[[ 1475.66591251  1268.91717275   941.27812729]]
[[  239.50799356  1026.99906004   941.44103172]]
[[  240.76516663  1027.37728009   941.83555717]]
[[ 2060.07861428  1060.5935959    941.8485551    353.0279154    360.5807083
[[  242.02509333  1027.75601107   942.23101748]]
[[ 2056.84111545  1062.47220262   942.47255395   353.11724141
[[  243.2877713   1028.13525109   942.62741265]]
[[ 1466.0608138   1270.14007      942.63285474]]
[[  244.55319804  1028.51499826   943.02474261]]
[[ 2053.55892323  1064.35768275   943.12294724   353.2083104    360.66573498
[[  245.8213709   1028.89525062   943.42300729]]
[[ 1495.13331955  1277.29136655   943.64638926]]
[[ 2050.23222354  1066.24934139   943.80178196   353.30111988
[[  247.0922871   1029.27600621   943.82220655]]
[[ 1479.30999458  1278.95685577   943.8643117 ]]
[[  248.3659437   1029.65726302   944.22234021]]
[[ 2046.86125252  1068.14645251   944.51118474   353.39565815
[[  249.64233761  1030.039019     944.62340805]]
[[  250.92146558  1030.42127208   945.02540981]]
[[ 1469.86973521  1279.99928569   945.11727045]]
[[ 2043.44629441  1070.04825678   945.25333943   353.49190306
[[  252.20332424  1030.80402015   945.42834517]]
[[  253.48791004  1031.18726108   945.83221378]]
[[ 2039.9876788   1071.9539589    946.0304599    353.58982061
[[  254.77521928  1031.57099268   946.23701523]]
[[ 1498.23573397  1286.86841554   946.26338593]]
[[ 1482.96619495  1289.07749836   946.45977479]]
[[  256.06524812  1031.95521275   946.64274908]]
[[ 2036.48577752  1073.86272486   946.84475818   353.6893636    360.8869095
[[  257.35799256  1032.33991905   947.04941483]]
[[  258.65344844  1032.7251093    947.45701195]]
[[ 1473.6973518   1289.94781996   947.61389385]]
[[ 2032.9410012   1075.77367883   947.6984082    353.79047032
[[  259.95161145  1033.11078119   947.86553984]]
[[  261.25247712  1033.49693238   948.27499787]]
[[ 2029.35379586  1077.68590002   948.59350562   353.89306325
[[  262.55604082  1033.8835605    948.68538536]]
[[ 1501.33687113  1296.4921785    948.88018372]]
[[ 1486.63188866  1299.27510199   949.0635246 ]]
[[  263.86229776  1034.27066313   949.09670158]]
[[  265.171243    1034.65823784   949.50894574]]
[[ 2025.72463971  1079.59841941   949.53202413   353.99704789
[[  266.48287144  1035.04628214   949.92211703]]
[[ 1477.54111968  1299.98212887   950.12186279]]
[[  267.7971778   1035.43479354   950.33621457]]
[[ 2022.05404055  1081.51021669   950.51576922   354.10231167
[[  269.11415666  1035.82376948   950.75123742]]
[[  270.43380243  1036.21320739   951.16718463]]
[[ 1504.43465267  1306.15886687   951.49581463]]
[[ 2018.34253386  1083.42021729   951.54633009   354.20872308
[[  271.75610936  1036.60310467   951.58405516]]
[[ 1490.30428916  1309.54532167   951.67450922]]
[[  273.08107154  1036.99345868   952.00184794]]
[[  274.40868289  1037.38426674   952.42056185]]
[[ 2014.59068202  1085.32728992   952.6250307    354.31613095
[[ 1481.39831259  1310.09830442   952.64024993]]
[[  275.73893718  1037.77552614   952.84019572]]
[[  277.07182798  1038.16723415   953.26074832]]
[[  278.40734875  1038.559388     953.68221838]]
[[ 2010.79907478  1087.23024458   953.75288106   354.42436402
[[  279.74549274  1038.95198488   954.10460457]]
[[ 1507.52691935  1315.86449424   954.10928326]]
[[ 1493.98045088  1319.88346366   954.29161696]]
[[  281.08625306  1039.34502197   954.52790552]]
[[ 2006.96833112  1089.12783136   954.93052961   354.53323076   361.25668
[[  282.42962265  1039.7384964    954.95211981]]
[[ 1485.26602246  1320.29206804   955.16806203]]
[[  283.77559428  1040.13240526   955.37724595]]
[[  285.12416055  1040.52674564   955.80328242]]
[[ 2003.09910257  1091.01874007   956.15821783   354.64251952
[[  286.47531392  1040.92151456   956.23022763]]
[[  287.82904666  1041.31670905   956.65807997]]
[[ 1510.61143479  1325.60488018   956.71956825]]
[[ 1497.65727349  1330.28448564   956.91367717]]
[[  289.18535088  1041.71232609   957.08683773]]
[[ 1999.19207789  1092.90160095   957.435738     354.75199907
[[  290.54421854  1042.10836262   957.5164992 ]]
[[ 1489.14116153  1330.5587665    957.70423968]]
[[  291.90564141  1042.50481556   957.94706259]]
[[  293.26961113  1042.90168181   958.37852605]]
[[ 1995.2479891   1094.77498652   958.76239497   354.86141946
[[  294.63611914  1043.29895822   958.8108877 ]]
[[  296.00515673  1043.69664163   959.24414561]]
[[ 1513.68589006  1335.3756555    959.32562393]]
[[ 1501.33150763  1340.74299969   959.53946134]]
[[  297.37671505  1044.09472885   959.67829777]]
[[  298.75078505  1044.49321665   960.11334215]]
[[ 1991.26761834  1096.6374147    960.13697275   354.97051336
[[ 1493.0204662   1340.89337056   960.24765747]]
[[  300.12735755  1044.89210177   960.54927666]]
[[  301.50642318  1045.29138095   960.98609915]]
[[  302.88797244  1045.69105088   961.42380742]]
[[ 1987.25180548  1098.48735321   961.55770685   355.0789978    361.48552816
[[  304.27199564  1046.09110823   961.86239923]]
[[ 1516.74790899  1345.17226903   961.9263823 ]]
[[ 1504.99976243  1351.25327823   962.16768489]]
[[  305.65848296  1046.49154963   962.30187229]]
[[  307.0474244   1046.89237171   962.74222424]]
[[ 1496.90050269  1351.2904766    962.79712467]]
[[ 1983.20145577  1100.3232254    963.02226288   355.18657634
[[  308.43880981  1047.29357106   963.18345269]]
[[  309.83262889  1047.69514425   963.62555519]]
[[  311.22887117  1048.09708783   964.06852925]]
[[  312.62752606  1048.49939831   964.51237231]]
[[ 1519.79505425  1354.98999576   964.52075507]]
[[ 1979.11754727  1102.14341732   964.5277223    355.29294179
[[ 1508.6585147   1361.80926303   964.79700941]]
[[  314.02858277  1048.9020722    964.95708178]]
[[ 1500.7776746   1361.74431152   965.35138658]]
[[  315.43203041  1049.30510597   965.40265503]]
[[  316.83785789  1049.70849609   965.84908935]]
[[ 1975.00113725  1103.94628602   966.07057613   355.39777919
[[  318.24605402  1050.11223898   966.296382  ]]
[[  319.65660743  1050.51633106   966.74453021]]
[[ 1522.8248342   1364.82394664   967.10763611]]
[[  321.06950662  1050.92076872   967.19353112]]
[[ 1512.3041199   1372.40457762   967.4260455 ]]
[[  322.48473995  1051.32554835   967.64338187]]
[[ 1970.85965969  1105.7314151    967.67862186   355.50027458
[[ 1504.64823251  1372.248741     967.90912634]]
[[  323.90229563  1051.7306663    968.09407953]]
[[  325.32216174  1052.13611892   968.54562111]]
[[  326.74432622  1052.54190253   968.99800361]]
[[  328.16877687  1052.94801344   969.45122396]]
[[ 1966.71796921  1107.50162745   969.46968732   355.59792108
[[ 1525.83471054  1374.6690798    969.68590397]]
[[  329.59550137  1053.35444795   969.90527905]]
[[ 1515.93282482  1383.03254288   970.05335617]]
[[  331.02448726  1053.76120234   970.36016574]]
[[ 1508.50828552  1382.7972815    970.46896749]]
[[  332.45572197  1054.16827287   970.81588084]]
[[  333.88919278  1054.5756558    971.2724211 ]]
[[ 1962.58521705  1109.25626676   971.48260795   355.68847319
[[  335.32488686  1054.98334738   971.72978326]]
[[  336.76279127  1055.39134384   972.187964  ]]
[[ 1528.82210654  1384.5202133    972.25442476]]
[[  338.20289294  1055.79964141   972.64695997]]
[[ 1519.54078205  1393.68619616   972.67746082]]
[[ 1512.35381485  1393.38311587   973.02947714]]
[[  339.6451787   1056.20823629   973.10676777]]
[[  341.08963525  1056.6171247    973.56738397]]
[[ 1958.47214616  1110.99458466   973.76462966   355.7689733    361.77077751
[[  342.53624919  1057.02630285   974.02880512]]
[[  343.98500705  1057.43576691   974.4910277 ]]
[[ 1531.7844161   1394.37203934   974.81205512]]
[[  345.4358952   1057.8455131    974.95404818]]
[[ 1523.12406599  1404.35831366   975.29683988]]
[[  346.88889995  1058.25553759   975.41786298]]
[[ 1516.18068943  1403.99911285   975.58916984]]
[[  348.34400752  1058.66583657   975.88246851]]
[[  349.80120402  1059.07640623   976.34786113]]
[[ 1954.39144054  1112.71564086   976.37329107   355.83553852
[[  351.26047549  1059.48724275   976.81403717]]
[[  352.72180788  1059.89834231   977.28099293]]
[[ 1534.71901326  1404.21913981   977.35764543]]
[[  354.18518707  1060.30970111   977.7487247 ]]
[[ 1526.67869041  1415.04143609   977.9099399 ]]
[[ 1519.98468339  1414.6378503    978.1465121 ]]
[[  355.65059884  1060.72131533   978.21722872]]
[[  357.11802894  1061.13318118   978.68650122]]
[[ 1950.36878506  1114.40101565   979.15249658   355.88989411
[[  358.58746304  1061.54529485   979.15653839]]
[[  360.05888672  1061.95765255   979.62733642]]
[[ 1537.62326238  1414.05600321   979.89004321]]
[[  361.53228555  1062.3702505    980.09889146]]
[[ 1530.20062738  1425.72789748   980.51517937]]
[[  363.00764501  1062.78308494   980.57119964]]
[[ 1523.76149533  1425.29164211   980.69992765]]
[[  364.48495056  1063.1961521    981.04425708]]
[[  365.96418761  1063.60944823   981.51805989]]
[[ 1946.43414716  1116.03250523   981.89241441   355.93681733
[[  367.44534153  1064.0229696    981.99260414]]
[[ 1540.49452868  1423.87704267   982.40809667]]
[[  368.92839765  1064.43671249   982.4678859 ]]
[[  370.41334129  1064.8506732    982.94390124]]
[[ 1533.68582742  1436.4098568    983.11095495]]
[[ 1527.50676923  1435.95256868   983.24780331]]
[[  371.90015775  1065.26484806   983.4206462 ]]
[[  373.3888323   1065.6792334    983.89811681]]
[[  374.87935022  1066.09382558   984.37630912]]
[[ 1942.60159771  1117.61076383   984.57616575   355.97685045
[[  376.37169675  1066.50862098   984.85521913]]
[[ 1543.33018919  1433.67661505   984.91065837]]
[[  377.86585718  1066.92361601   985.33484289]]
[[ 1537.13024057  1447.07933215   985.69564843]]
[[ 1531.21611676  1446.61251068   985.78849565]]
[[  379.36181677  1067.33880711   985.8151764 ]]
[[  380.85956082  1067.75419075   986.2962157 ]]
[[  382.35907463  1068.16976341   986.77795679]]
[[ 1938.8843898   1119.13718227   987.18692792   356.0107261    361.89793995
[[  383.86034354  1068.58552161   987.26039571]]
[[ 1546.12764396  1443.44904096   987.39658903]]
[[  385.36335292  1069.00146193   987.7435285 ]]
[[  386.86808818  1069.41758095   988.22735119]]
[[ 1540.52983821  1457.72823724   988.26763424]]
[[ 1534.88514078  1457.26318573   988.32033828]]
[[  388.37453477  1069.8338753    988.71185984]]
[[  389.88267822  1070.25034165   989.19705051]]
[[  391.39250408  1070.66697672   989.6829193 ]]
[[ 1935.29442733  1120.61387844   989.70857471   356.03934071
[[ 1548.88432742  1453.18862541   989.86476143]]
[[  392.90399801  1071.08377725   990.16946228]]
[[  394.4171457   1071.50074004   990.65667559]]
[[ 1543.88063535  1468.3484195    990.8252877 ]]
[[ 1538.50945977  1467.89618769   990.84164999]]
[[  395.93193298  1071.91786193   991.14455537]]
[[  397.44834571  1072.33513982   991.63309777]]
[[  398.96636989  1072.75257064   992.12229899]]
[[ 1931.84173824  1122.0436537    992.12636402   356.06371378
[[ 1551.59771976  1462.889679     992.31406445]]
[[  400.4859916   1073.1701514    992.61215526]]
[[  402.00719707  1073.58787913   993.10266282]]
[[ 1542.08473275  1478.50302791   993.3507438 ]]
[[ 1547.17871308  1478.93169952   993.36699428]]
[[  403.5299726   1074.00575094   993.59381797]]
[[  405.05430467  1074.423764     994.08561703]]
[[ 1928.53400542  1123.42991529   994.42760433   356.0849362    361.95285842
[[  406.58017986  1074.84191554   994.57805636]]
[[ 1554.26535827  1472.5465395    994.74340719]]
[[  408.10758492  1075.26020282   995.07113239]]
[[  409.63650674  1075.67862322   995.56484155]]
[[ 1545.60668457  1489.07517805   995.8459373 ]]
[[ 1550.42024087  1489.46991105   995.89116034]]
[[  411.1669324   1076.09717413   996.05918036]]
[[  412.69884912  1076.51585307   996.55414537]]
[[ 1925.37621024  1124.77656967   996.60222225   356.1041129    361.969291
[[  414.23224432  1076.93465757   997.04973319]]
[[ 1556.88484839  1482.15359328   997.15172325]]
[[  415.76710561  1077.35358529   997.54594049]]
[[  417.3034208   1077.77263392   998.04276399]]
[[ 1549.07113101  1499.60411351   998.32556482]]
[[ 1553.60149842  1499.95494091   998.39622611]]
[[  418.84117791  1078.19180125   998.54020048]]
[[ 1922.37043439  1126.08789537   998.64316007   356.12230654
[[  420.38036517  1078.61108516   999.03824683]]
[[  421.92097105  1079.0304836    999.53689996]]
[[ 1559.45387457  1491.7052968    999.53797543]]
[[  423.46298426  1079.4499946   1000.03615687]]
[[  425.00639375  1079.8696163   1000.53601464]]
[[ 1919.51584564  1127.36840643  1000.54655453   356.14048862
[[ 1552.47400341  1510.08135678  1000.7879927 ]]
[[ 1556.71889675  1510.37876782  1000.88068266]]
[[  426.55118873  1080.28934692  1001.03647043]]
[[  428.09735869  1080.70918475  1001.53752148]]
[[ 1561.9702105   1501.19619741  1001.90116074]]
[[  429.64489339  1081.12912823  1002.03916511]]
[[ 1916.80886718  1128.62271855  1002.31168212   356.15950301
[[  431.19378287  1081.54917584  1002.54139875]]
[[  432.7440175   1081.9693262   1003.04421991]]
[[ 1555.81137249  1520.49851952  1003.23163968]]
[[ 1559.76899808  1520.733499    1003.34309565]]
[[  434.29558793  1082.38957803  1003.54762619]]
[[ 1914.24350352  1129.85542813  1003.94069244   356.18004458
[[  435.84848514  1082.80993013  1004.05161531]]
[[ 1564.43172895  1510.62095352  1004.2403166 ]]
[[  437.40270046  1083.23038145  1004.55618508]]
[[  438.95822556  1083.65093102  1005.06133343]]
[[ 1911.81177659  1131.07101182  1005.43818093   356.20265258
[[  440.51505243  1084.07157799  1005.5670584 ]]
[[ 1559.07947081  1530.84734191  1005.65500638]]
[[ 1562.74853438  1531.01140274  1005.78214097]]
[[  442.07317349  1084.49232164  1006.07335814]]
[[ 1566.83641079  1519.97435347  1006.55452849]]
[[  443.63258148  1084.91316137  1006.58023092]]
[[ 1909.50421637  1132.27375022  1006.81066792   356.22771654
[[  445.19326957  1085.3340967   1007.08767515]]
[[  446.75523132  1085.75512727  1007.59568934]]
[[ 1562.27471366  1541.11972695  1008.05672072]]
[[ 1907.31035309  1133.46767599  1008.0660516    356.25549103
[[  448.3184607   1086.17625285  1008.10427217]]
[[ 1565.65442385  1541.20493445  1008.19666162]]
[[  449.8829521   1086.59747337  1008.61342243]]
[[ 1569.18235323  1529.25133273  1008.84294085]]
[[  451.44870039  1087.01878885  1009.12313905]]
[[ 1905.21916861  1134.65654406  1009.21309108   356.28611528
[[  453.01570084  1087.44019949  1009.63342113]]
[[  454.58394921  1087.86170561  1010.14426789]]
[[ 1903.21947948  1135.84381996  1010.26095793   356.31963413   362.1198741
[[ 1565.39371767  1551.3077664   1010.43561214]]
[[ 1568.48378515  1551.30675168  1010.58576201]]
[[  456.15344175  1088.28330769  1010.65567873]]
[[ 1571.46777714  1538.4469887   1011.10477327]]
[[  457.72417518  1088.70500634  1011.1676532 ]]
[[ 1901.30023941  1137.03268177  1011.21887559   356.35601782
[[  459.29614674  1089.12680234  1011.68019099]]
[[ 1899.45076075  1138.22603146  1012.09585017   356.39517894
[[  460.86935418  1089.54869662  1012.19329201]]
[[  462.44379578  1089.97069026  1012.70695629]]
[[ 1568.43331667  1561.40375254  1012.79083722]]
[[ 1897.66086331  1139.42651209  1012.90048515   356.43698579
[[ 1571.23394851  1561.30971131  1012.94896926]]
[[  464.01947038  1090.39278452  1013.22118407]]
[[ 1573.69103323  1547.55659178  1013.33934628]]
[[ 1895.92096297  1140.63652794  1013.64086588   356.48127217
[[  465.59637735  1090.81498082  1013.73597576]]
[[  467.17451667  1091.23728073  1014.25133196]]
[[ 1894.22211413  1141.85826567  1014.32449663   356.52784389
[[  468.75388889  1091.65968603  1014.76725347]]
[[ 1892.55601939  1143.09371495  1014.95827505   356.5764825    362.2423236
[[ 1571.39057393  1571.40016587  1015.12209811]]
[[  470.33449516  1092.08219864  1015.28374128]]
[[ 1573.90246274  1571.20683611  1015.28651399]]
[[ 1575.85060688  1556.57559105  1015.54612414]]
[[ 1890.91501873  1144.34468857  1015.54848638   356.62694722
[[  471.91633725  1092.50482068  1015.80079658]]
[[ 1889.29206749  1145.61284101  1016.10080552   356.67897558
[[  473.49941758  1092.92755446  1016.31842077]]
[[ 1887.68071074  1146.89968613  1016.62029477   356.73228363
[[  475.0837392   1093.35040248  1016.83661548]]
[[ 1886.07505961  1148.20661406  1017.11138824   356.78656649
[[  476.66930582  1093.7733674   1017.35538254]]
[[ 1574.2627893   1581.28962156  1017.43002853]]
[[ 1884.46977216  1149.53490797  1017.57785586   356.84149986
[[ 1576.4870964   1580.99122915  1017.59982508]]
[[ 1577.94512137  1565.49961121  1017.72478741]]
[[  478.25612186  1094.19645211  1017.874724  ]]
[[ 1882.86096793  1150.88673612  1018.02460656   356.89698409
[[  479.84419239  1094.6196597   1018.39464217]]
[[ 1881.24759376  1152.26652939  1018.46043527   356.95348988
[[ 1879.62661358  1153.67571508  1018.88835295   357.01077023
[[  481.43352324  1095.04299344  1018.91513956]]
[[ 1877.99559243  1155.11572861  1019.31070342   357.06858692
[[  483.02412094  1095.46645684  1019.43621894]]
[[ 1577.04749914  1591.06474339  1019.71688308]]
[[ 1876.35267947  1156.58802967  1019.72908208   357.12671715
[[ 1579.97333891  1574.32443541  1019.87535849]]
[[ 1578.98583019  1590.65589667  1019.89240843]]
[[  484.61599276  1095.89005359  1019.95788334]]
[[ 1874.69656528  1158.09411591  1020.14426938   357.18495921
[[  486.20914677  1096.31378764  1020.48013603]]
[[ 1873.02640728  1159.63553282  1020.55619056   357.2431358    362.51172138
[[ 1827.17855687  1217.87030536  1020.74229656   358.1025859    363.05559906
[[ 1871.34157721  1161.21440677  1020.96628003   357.30098615
[[  487.80359177  1096.73766312  1021.00298052]]
[[ 1869.64241803  1162.83282899  1021.3738766    357.3583502    362.55640178
[[ 1825.28741711  1219.10912124  1021.41635602   358.18445402
[[  489.39933739  1097.16168441  1021.52642063]]
[[ 1829.19497089  1214.8609634   1021.56039415   358.08718406
[[ 1867.92944056  1164.49293535  1021.77755989   357.4150809    362.57844693
[[ 1579.74246481  1600.71790924  1021.98777706]]
[[ 1581.93415856  1583.04596428  1021.9984204 ]]
[[  490.99639408  1097.58585612  1022.05046041]]
[[ 1823.36590266  1220.36198017  1022.1035961    358.26764953
[[ 1581.39683514  1600.1934096   1022.17141648]]
[[ 1866.20318284  1166.19702447  1022.1756758    357.47101678
[[ 1864.46420382  1167.94756866  1022.56629793   357.52598126
[[  492.59477311  1098.01018309  1022.57510423]]
[[ 1831.2161639   1211.47920436  1022.60620294   358.08836195
[[ 1821.41358854  1221.62893763  1022.80427309   358.3521866    363.16990731
[[ 1862.71307469  1169.74722497  1022.94718255   357.57978206
[[  494.19448659  1098.43467041  1023.1003567 ]]
[[ 1860.95036745  1171.59884606  1023.31571582   357.63221078
[[ 1833.20246712  1208.22903212  1023.44773576   358.08716384
[[ 1819.43004822  1222.91004561  1023.51864621   358.43807894
[[  495.79554754  1098.85932341  1023.62622277]]
[[ 1859.17664008  1173.50549092  1023.66885251   357.68304294
[[ 1857.39241776  1175.47043477  1024.00304488   357.73203836   362.7054366
[[ 1583.82660965  1591.6601343   1024.09550112]]
[[ 1835.15893966  1205.1050264   1024.1069971    358.08278791
[[  497.39796983  1099.28414766  1024.15270765]]
[[ 1817.41485395  1224.20535249  1024.24697744   358.52533983
[[ 1582.34564245  1610.24076621  1024.25292735]]
[[ 1855.59816943  1177.49717816  1024.31416053   357.77894223
[[ 1583.71842708  1609.59527732  1024.4504631 ]]
[[ 1853.79427896  1179.58945453  1024.59738841   357.82348698
[[ 1837.09016799  1202.1016136   1024.60530626   358.07469423
[[  499.00176826  1099.70914902  1024.67981688]]
[[ 1851.98101027  1181.75123586  1024.84713204   357.86539522
[[ 1839.00013705  1199.21314541  1024.96270307   358.06255968
[[ 1815.36757698  1225.51490296  1024.98953141   358.61398203
[[ 1850.15846579  1183.98673567  1025.05688977   357.90438413
[[ 1840.8921842   1196.43397174  1025.19761178   358.04623535
[[  500.60695857  1100.13433358  1025.2075563 ]]
[[ 1848.32653784  1186.30040879  1025.21912272   357.94017156   362.8041146
[[ 1846.48485285  1188.69694684  1025.3251121    357.97248438   362.8234122
[[ 1842.76900771  1193.7585042   1025.32669079   358.0257085    362.86227354
[[ 1844.63270887  1191.18126861  1025.36481011   358.00106956   362.8427539
[[  502.21355743  1100.55970771  1025.73593208]]
[[ 1813.28778797  1226.83873785  1025.74657514   358.70401775
[[ 1585.64983764  1600.16276543  1026.16975126]]
[[  503.8215825   1100.98527805  1026.26495072]]
[[ 1811.1750573   1228.17689413  1026.51837791   358.79545857
[[ 1584.85512034  1619.62332995  1026.53171785]]
[[ 1585.94897935  1618.85080585  1026.75468838]]
[[  505.43105242  1101.41105152  1026.79461904]]
[[ 1809.02895542  1229.5294047   1027.30521105   358.8883154    363.41400261
[[  507.04198685  1101.83703533  1027.32494423]]
[[  508.65440648  1102.26323697  1027.8559338 ]]
[[ 1806.84905328  1230.89629839  1028.10734768   358.9825984    363.45673133
[[ 1587.40307792  1608.54928487  1028.22714337]]
[[  510.26833308  1102.68966424  1028.38759564]]
[[ 1587.26899819  1628.85233017  1028.86009568]]
[[  511.88378948  1103.11632522  1028.919938  ]]
[[ 1804.6349227   1232.2775998   1028.92506248   359.07831691
[[ 1588.08676097  1627.94502923  1029.12989507]]
[[  513.50079961  1103.54322833  1029.45296951]]
[[ 1802.38613685  1233.67332927  1029.75863147   359.17547939
[[  515.11938857  1103.97038228  1029.98669919]]
[[ 1589.08560832  1616.8142318   1030.27860001]]
[[  516.73958257  1104.39779612  1030.52113644]]
[[ 1800.1022707   1235.08350278  1030.60833173   359.27409332
[[  518.36140903  1104.82547922  1031.05629108]]
[[ 1589.5851598   1637.90818669  1031.30405532]]
[[ 1797.78290148  1236.50813185  1031.47444112   359.37416511
[[  519.98489656  1105.25344129  1031.59217333]]
[[ 1590.12963723  1636.85497289  1031.65905996]]
[[  521.610075    1105.68169238  1032.12879382]]
[[ 1590.69666481  1624.9503742   1032.34377806]]
[[ 1795.42760927  1237.94722357  1032.357238     359.47569998
[[  523.23697547  1106.11024291  1032.66616364]]
[[  524.86563035  1106.53910363  1033.20429431]]
[[ 1793.0359775   1239.40078046  1033.25700098   359.57870189
[[  526.49607335  1106.96828568  1033.74319778]]
[[ 1591.80084356  1646.75950013  1033.9842494 ]]
[[ 1790.60759355  1240.86880048  1034.17400863   359.68317336
[[  528.12833952  1107.39780056  1034.2828865 ]]
[[ 1592.23529144  1632.94713633  1034.45781068]]
[[ 1592.0745108   1645.54292327  1034.49219516]]
[[  529.7624653   1107.82766019  1034.82337336]]
[[ 1788.14204942  1242.35127698  1035.10853919   359.78911539
[[  531.3984885   1108.25787683  1035.36467176]]
[[  533.03644841  1108.68846318  1035.90679557]]
[[ 1785.63894238  1243.84819875  1036.06087039   359.8965272    363.86801507
[[  534.67638575  1109.11943235  1036.44975919]]
[[ 1593.70007154  1640.78780098  1036.68333339]]
[[  536.31834276  1109.55079785  1036.99357751]]
[[ 1783.09787568  1245.35954993  1037.03127916   360.00540612
[[ 1593.91181728  1655.35305617  1037.12088205]]
[[  537.96236323  1109.98257363  1037.53826599]]
[[ 1593.91625377  1653.94436595  1037.90027643]]
[[ 1780.51845939  1246.88531015  1038.02004158   360.11574734   363.9659283
[[  539.60849249  1110.41477411  1038.08384061]]
[[  541.2567775   1110.84741411  1038.63031791]]
[[ 1777.90031122  1248.42545452  1039.02743272   360.22754362
[[ 1595.08864118  1648.44453858  1039.13194455]]
[[  542.90726686  1111.28050896  1039.177715  ]]
[[  527.67152526  1180.16053374  1039.41206765]]
[[  528.65376494  1179.60244143  1039.61272001]]
[[  544.56001085  1111.71407443  1039.72604957]]
[[  529.70910131  1179.02189794  1039.82701634]]
[[ 1775.2430575   1249.97995371  1040.05372673   360.34078499
[[  530.84379139  1178.41892422  1040.05602489]]
[[  546.21506148  1112.14812681  1040.27533993]]
[[  532.06472197  1177.79371675  1040.30091906]]
[[  533.37948393  1177.14668146  1040.5629911 ]]
[[  547.8724725   1112.58268285  1040.82560498]]
[[  534.79645672  1176.47847306  1040.84366797]]
[[ 1772.54633501  1251.54877415  1041.09919578   360.45564915
[[ 1595.91073805  1663.59584055  1041.11525723]]
[[  536.32490474  1175.79004077  1041.14452996]]
[[  549.5322995   1113.01775984  1041.37686426]]
[[  537.97508735  1175.08268156  1041.46733264]]
[[  539.75838503  1174.35810212  1041.81403269]]
[[  551.1945999   1113.45337559  1041.92913795]]
[[ 1596.39679321  1655.86960624  1042.0024517 ]]
[[ 1769.80979073  1253.13187812  1042.16411246   360.571967     364.16869206
[[  541.68744418  1173.61849125  1042.18681858]]
[[ 1595.64558889  1661.94660538  1042.37202738]]
[[  552.85943299  1113.88954843  1042.48244689]]
[[  543.776344    1172.86660448  1042.58814723]]
[[  546.04078927  1172.10586329  1043.02078782]]
[[  554.52686005  1114.32629725  1043.03681261]]
[[ 1767.03308382  1254.72922404  1043.24874956   360.68972632
[[  548.49833385  1171.34047177  1043.48787473]]
[[  556.19694431  1114.76364153  1043.59225731]]
[[  551.16864054  1170.57555415  1043.99297152]]
[[  557.86975103  1115.20160129  1044.14880394]]
[[ 1764.21588721  1256.34076668  1044.35338105   360.80891209
[[  554.07378428  1169.81731752  1044.54014909]]
[[  559.54534759  1115.64019717  1044.70647614]]
[[  557.23860711  1169.07324518  1045.13408134]]
[[  561.22380347  1116.07945043  1045.26529832]]
[[ 1761.35788944  1257.96645759  1045.47828363   360.92950611
[[ 1597.61678365  1662.97989018  1045.64870543]]
[[  560.69113522  1168.35232707  1045.78016334]]
[[  562.90519038  1116.51938293  1045.82529566]]
[[  564.58958225  1116.96001721  1046.38649412]]
[[  564.46307044  1167.66533585  1046.48465806]]
[[ 1758.45879696  1259.6062456   1046.62373847   361.05148715   364.3805239
[[ 1597.7837146   1671.32326502  1046.69600466]]
[[  566.27705532  1117.40137646  1046.94892049]]
[[  568.59037162  1167.0251591   1047.25487994]]
[[  567.96768821  1117.84348455  1047.51260238]]
[[ 1755.51833647  1261.26007736  1047.790035     361.17482939
[[  569.66156197  1118.28636606  1048.07756825]]
[[  573.11394425  1166.44720085  1048.09942616]]
[[  571.35876012  1118.73004629  1048.64384745]]
[[ 1597.24463868  1669.35177776  1048.78447274]]
[[ 1752.53625826  1262.92789817  1048.97747486   361.2995022    364.4898943
[[  578.08046077  1165.94986947  1049.02847026]]
[[  573.05936877  1119.1745513   1049.21147023]]
[[  574.76347665  1119.61990791  1049.78046776]]
[[  583.54333834  1165.55517338  1050.0541377 ]]
[[ 1749.51234026  1264.60965297  1050.18637778   361.42546917
[[  576.47117516  1120.06614371  1050.35087218]]
[[ 1598.73400152  1669.63022727  1050.6983624 ]]
[[  578.18255853  1120.51328714  1050.9227166 ]]
[[  589.56390547  1165.2894518   1051.19099023]]
[[ 1746.44639311  1266.30528773  1051.41708968   361.55268694
[[  579.89772381  1120.96136746  1051.49603514]]
[[  581.61677098  1121.41041481  1052.07086298]]
[[  596.21279365  1165.1842752   1052.45665523]]
[[  583.33980304  1121.8604602   1052.64723633]]
[[ 1743.33826668  1268.01475114  1052.66999361   361.6811037    364.65770693
[[  585.06692612  1122.3115356   1053.22519254]]
[[  586.79824951  1122.76367391  1053.80477006]]
[[  603.57159292  1165.27755911  1053.87265012]]
[[ 1740.18785849  1269.7379969   1053.94552482   361.81065712
[[  588.5338858   1123.21690902  1054.38600855]]
[[  590.27395097  1123.67127583  1054.96894883]]
[[ 1599.5025554   1678.24530258  1055.17194077]]
[[ 1736.99512472  1271.47498674  1055.24419108   361.94127167
[[  611.7348095   1165.61494554  1055.46547004]]
[[  592.01856447  1124.1268103   1055.55363299]]
[[  593.76784935  1124.58354949  1056.14010439]]
[[ 1733.7600948   1273.22569441  1056.56660045   362.07285504
[[  595.52193236  1125.04153157  1056.7284077 ]]
[[  620.81215367  1166.25151778  1057.26803214]]
[[  597.28094407  1125.50079587  1057.31858898]]
[[  599.04501899  1125.96138296  1057.91069565]]
[[ 1730.48289083  1274.99011108  1057.91349913   362.20529337
[[ 1599.72004671  1675.56907769  1058.25400629]]
[[  600.81429566  1126.42333462  1058.50477662]]
[[ 1598.67685588  1675.81633648  1058.68844369]]
[[  602.58891684  1126.88669395  1059.10088229]]
[[ 1727.16287255  1276.7667189   1059.28236652   362.33878745
[[  630.93115797  1167.25392513  1059.32160291]]
[[  604.36902959  1127.3515054   1059.69906459]]
[[  606.15478546  1127.8178148   1060.29937706]]
[[ 1600.31744439  1681.45980025  1060.33998747]]
[[ 1723.79978516  1278.55505075  1060.67263394   362.47335848   365.0050464
[[  607.94634059  1128.28566943  1060.90187489]]
[[  609.74385588  1128.75511809  1061.506615  ]]
[[  642.24006125  1168.70299845  1061.67837607]]
[[ 1720.39351784  1280.35495665  1062.08434082   362.60896668   365.0643426
[[  611.54749718  1129.22621113  1062.11365604]]
[[  613.35743542  1129.69900052  1062.72305852]]
[[ 1600.17476431  1678.32178711  1062.8310739 ]]
[[  615.17384679  1130.17353994  1063.33488484]]
[[ 1716.94397783  1282.16627944  1063.51749919   362.74557102
[[  616.99691295  1130.64988481  1063.94919935]]
[[  654.91076149  1170.69692466  1064.40491322]]
[[  618.8268212   1131.12809238  1064.56606844]]
[[ 1599.34344909  1678.76094545  1064.75394924]]
[[ 1713.45108974  1283.9888543   1064.97208968   362.88312978
[[  620.66376467  1131.60822184  1065.18556061]]
[[  622.50794257  1132.09033433  1065.80774653]]
[[  624.35956037  1132.57449309  1066.43269916]]
[[ 1709.91479408  1285.82250807  1066.44805623   363.02160125   365.2444117
[[ 1601.08007916  1684.37119768  1066.69771211]]
[[  626.21883005  1133.06076351  1067.06049379]]
[[  669.14138077  1173.35499521  1067.58669378]]
[[  628.08597034  1133.54921326  1067.69120816]]
[[ 1706.3350451   1287.66705834  1067.94529917   363.16094473   365.3050958
[[  629.96120698  1134.03991235  1068.32492254]]
[[ 1600.58408871  1680.80919268  1068.4237663 ]]
[[  631.84477297  1134.53293328  1068.96171983]]
[[ 1702.71180727  1289.52231216  1069.46366592   363.30112202
[[  633.73690886  1135.02835112  1069.60168568]]
[[  635.63786306  1135.52624366  1070.24490856]]
[[  637.5478921   1136.02669151  1070.89147993]]
[[ 1699.04505016  1291.38806418  1071.00293831   363.44209941
[[  685.15750127  1176.82180289  1071.33400095]]
[[  639.46726102  1136.52977824  1071.5414943 ]]
[[  641.39624366  1137.03559057  1072.19504941]]
[[ 1599.95040545  1681.3525585   1072.23208658]]
[[ 1695.3348692   1293.26438244  1072.56312471   363.58379844
[[  643.33512303  1137.54421845  1072.85224634]]
[[  645.28419172  1138.05575529  1073.51318962]]
[[ 1691.58163771  1295.15188459  1074.14478459   363.72603494
[[  647.24375223  1138.57029809  1074.17798745]]
[[ 1601.77924041  1686.90953757  1074.56600567]]
[[  649.21411747  1139.08794765  1074.8467518 ]]
[[ 1600.93811646  1682.97140199  1075.29919483]]
[[  651.19561114  1139.60880877  1075.51959857]]
[[ 1687.7855095   1297.05042835  1075.74775415   363.86873587
[[  703.21026441  1181.27144499  1075.78919921]]
[[  653.18856821  1140.13299045  1076.19664782]]
[[  655.19333545  1140.66060614  1076.8780239 ]]
[[ 1683.94666975  1298.95987381  1077.37184041   364.01182512
[[  657.21027189  1141.19177393  1077.56385565]]
[[  659.2397494   1141.72661688  1078.25427665]]
[[  661.28215326  1142.26526327  1078.94942538]]
[[ 1680.06533583  1300.8800845   1079.01682013   364.15522359
[[  663.33788279  1142.80784687  1079.6494455 ]]
[[  665.40735195  1143.3545073   1080.35448606]]
[[ 1676.14175809  1302.81092857  1080.68243878   364.29884921
[[  667.49099009  1143.90539038  1081.06470176]]
[[  723.56807127  1186.9106443   1081.13492004]]
[[ 1600.48303032  1683.5117057   1081.48488049]]
[[  669.58924264  1144.46064845  1081.78025326]]
[[ 1672.17622066  1304.75228012  1082.36840949   364.44261698
[[  671.70257184  1145.02044084  1082.50130742]]
[[  673.83145765  1145.58493423  1083.22803766]]
[[ 1601.22286364  1684.73564984  1083.78044589]]
[[  675.97639853  1146.15430319  1083.96062425]]
[[ 1668.16904222  1306.70402078  1084.074412     364.58643906
[[ 1602.39843194  1688.98978433  1084.33126703]]
[[  678.13791238  1146.72873059  1084.69925469]]
[[  680.31653755  1147.30840824  1085.44412405]]
[[ 1664.12057682  1308.66604148  1085.80009162   364.7302248    365.98500561
[[  682.51283382  1147.8935374   1086.19543541]]
[[  684.72738357  1148.48432945  1086.95340024]]
[[ 1660.03121467  1310.63824451  1087.54505806   364.87388087
[[  746.4964316   1193.97849509  1087.60136357]]
[[  686.96079287  1149.08100657  1087.71823888]]
[[  689.21369281  1149.68380248  1088.49018102]]
[[  691.48674079  1150.29296327  1089.26946618]]
[[ 1655.901383    1312.62054595  1089.30888442   365.01731131
[[  693.78062192  1150.90874825  1090.05634432]]
[[  696.09605061  1151.53143093  1090.85107639]]
[[ 1651.73154696  1314.61287845  1091.09110593   365.16041764
[[  698.43377212  1152.16130007  1091.65393497]]
[[  700.79456432  1152.79866079  1092.46520493]]
[[ 1647.52221051  1316.61519448  1092.89121878   365.30309897   366.2321694
[[ 1600.91981397  1685.14387348  1092.93443396]]
[[  703.17923953  1153.44383585  1093.28518422]]
[[  705.58864655  1154.09716698  1094.11418455]]
[[ 1601.4184336   1686.01532797  1094.24585856]]
[[ 1643.27391856  1318.62747045  1094.70867819   365.44525257
[[  708.02367271  1154.75901639  1094.95253232]]
[[  772.21790416  1202.73856671  1095.46823941]]
[[  710.48524624  1155.42976839  1095.8005695 ]]
[[ 1602.9132434   1690.5110973   1096.43916289]]
[[ 1638.98725632  1320.64971099  1096.54289801   365.58677338
[[  712.97433863  1156.10983118  1096.65865456]]
[[  715.49196735  1156.79963884  1097.52716357]]
[[ 1634.66285147  1322.68195458  1098.39324868   365.72755436   366.4149634
[[  718.0391986   1157.49965346  1098.40649132]]
[[  720.61715044  1158.21036753  1099.29705255]]
[[  723.22699599  1158.93230661  1100.19928325]]
[[ 1630.30137575  1324.72428003  1100.25905543   365.86748673
[[  725.86996706  1159.66603218  1101.11364214]]
[[  728.5473579   1160.41214487  1102.0406122 ]]
[[ 1625.90354681  1326.77681435  1102.13959625   366.00646006
[[  731.2605294   1161.17128801  1102.98070238]]
[[  734.01091354  1161.9441516   1103.93444943]]
[[ 1621.47013053  1328.83974219  1104.03409947   366.14436248
[[  736.80001825  1162.73147664  1104.90241992]]
[[  800.84290095  1213.45656711  1105.05240207]]
[[  739.62943267  1163.53406003  1105.88521244]]
[[ 1617.00194373  1330.91331731  1105.94174097   366.28108084
[[  742.50083288  1164.35275997  1106.88345995]]
[[ 1601.22927126  1686.14028634  1107.04283713]]
[[ 1601.49647439  1686.71033118  1107.11556277]]
[[ 1612.49985761  1332.99787649  1107.86164079   366.41650085
[[  745.41598813  1165.18850201  1107.89783247]]
[[  748.37676757  1166.04228581  1108.92903989]]
[[ 1607.96480204  1335.09385659  1109.79285911   366.55050725
[[  751.38514772  1166.9151927   1109.97783513]]
[[  754.44322046  1167.80839409  1111.04501765]]
[[ 1603.28768276  1691.3581255   1111.36711715]]
[[ 1603.39777082  1337.2018154   1111.73439131   366.6829839    366.8245164
[[  757.5532019   1168.72316103  1112.13143721]]
[[  760.71744204  1169.66087488  1113.23799811]]
[[ 1598.79982846  1339.32245736  1113.68516193   366.81381383
[[  763.93843537  1170.62303929  1114.36566385]]
[[  767.21883254  1171.61129381  1115.5154623 ]]
[[ 1594.17211863  1341.45666535  1115.64401736   366.94287919
[[  832.26750195  1226.35539161  1116.66734664]]
[[  770.56145318  1172.6274292   1116.68849139]]
[[ 1589.51587501  1343.60554023  1117.60971678   367.07006094
[[  773.96930003  1173.6734048   1117.88592556]]
[[  777.44557462  1174.75136819  1119.10902281]]
[[ 1584.83243507  1345.77045001  1119.58092116   367.19523828
[[  780.99369454  1175.86367758  1120.35913269]]
[[ 1580.12325788  1347.95309159  1121.55617999   367.31828729
[[  784.61731265  1177.01292729  1121.6377052 ]]
[[ 1601.41695367  1686.70976144  1122.81501949]]
[[  788.3203384   1178.20197678  1122.94630084]]
[[ 1575.38994704  1350.15556819  1123.53391538   367.43907832
[[ 1601.36593871  1686.38164438  1124.26143969]]
[[  792.1069616   1179.43398395  1124.2866019 ]]
[[ 1570.63428068  1352.38048732  1125.51240385   367.55747086
[[  795.98167898  1180.71244313  1125.66042522]]
[[  799.94932386  1182.04122887  1127.06973667]]
[[ 1565.85825373  1354.63108536  1127.48975556   367.67356282
[[  804.0150995   1183.42464624  1128.51666763]]
[[ 1561.06412805  1356.91138561  1129.46389678   367.78708553
[[ 1603.46970453  1691.40576622  1129.56056004]]
[[  808.18461661  1184.86748888  1130.00353382]]
[[  866.05476113  1241.54383105  1130.54181741]]
[[ 1556.25450776  1359.22640169  1131.43255729   367.89792303
[[  812.4639356   1186.37510614  1131.53285679]]
[[  816.8596145   1187.95348087  1133.10738872]]
[[ 1551.43244434  1361.5824001   1133.3932794    368.00595561
[[  821.37876322  1189.60931991  1134.73014101]]
[[ 1546.60159249  1363.98724274  1135.34347798   368.11105421
[[  826.02910542  1191.3501594   1136.40441743]]
[[ 1541.76645348  1366.45083927  1137.28061684   368.21306809
[[  830.81904913  1193.18448795  1138.13385272]]
[[ 1536.93277851  1368.98575644  1139.20264275   368.31179843
[[  835.75776765  1195.12189081  1139.92245785]]
[[ 1532.10828152  1371.6080622   1141.10898432   368.40694201
[[ 1601.12479185  1685.89823709  1141.70370177]]
[[  840.85529271  1197.17321932  1141.77467306]]
[[ 1527.30397841  1374.33854492  1143.00279504   368.4979718    367.51563223
[[  846.12262187  1199.35079055  1143.69543087]]
[[ 1522.53684569  1377.20458043  1144.89596094   368.58388692
[[ 1601.26638488  1685.74625696  1144.93560619]]
[[  851.57184312  1201.66862311  1145.69023074]]
[[  901.35378534  1258.93185125  1146.70437913]]
[[ 1517.83534103  1380.24320973  1146.82033442   368.66269928
[[  857.21627971  1204.14271668  1147.7652287 ]]
[[ 1513.25124008  1383.50663292  1148.85317591   368.73042254
[[  863.07065943  1206.79138416  1149.92734516]]
[[ 1508.8853305   1387.07265462  1151.17523727   368.77924966
[[ 1603.38722018  1690.52891296  1151.31995414]]
[[  869.15131296  1209.63564757  1152.18439591]]
[[ 1504.94139263  1391.06452041  1154.20217273   368.79494948
[[  875.47640745  1212.69971121  1154.54525223]]
[[  882.06622249  1216.0115286   1157.02003851]]
[[ 1501.82067944  1395.6808321   1158.85858372   368.75596613
[[  888.94347723  1219.60348341  1159.62037812]]
[[ 1500.52086312  1398.17730159  1161.73719151   368.71897133
[[  896.13371924  1223.51320865  1162.3597027 ]]
[[ 1600.54792807  1684.1668084   1163.96334973]]
[[  936.93999043  1278.17181108  1164.88348092]]
[[  903.66578781  1227.78457346  1165.25364521]]
[[ 1499.53488912  1400.92121246  1165.26099753   368.65381092
[[  911.57236582  1232.46887168  1168.32054585]]
[[ 1600.84758729  1684.1235122   1169.16357938]]
[[ 1498.92522423  1403.95313261  1169.63092545   368.55670492
[[  919.89063628  1237.62625144  1171.5821121 ]]
[[  928.66305857  1243.32742749  1175.06429338]]
[[ 1498.7437104   1407.30935991  1175.07519196   368.42173634
[[ 1602.94768735  1688.6179427   1176.64482298]]
[[  937.93827545  1249.65571631  1178.79846135]]
[[ 1499.02224405  1411.08043239  1181.74385142   368.23797637
[[  947.77214773  1256.70941995  1182.82303701]]
[[  971.42307169  1298.67580153  1184.50379957]]
[[  958.22887938  1264.60454774  1187.1857942 ]]
[[ 1499.7727503   1415.33739075  1189.79831644   368.01354364
[[  969.38211563  1273.47777778  1191.94723909]]
[[ 1600.01164019  1681.43192951  1196.64289858]]
[[  981.31569521  1283.48936898  1197.1858573 ]]
[[ 1500.94680967  1420.09263438  1199.4461629    367.75566193
[[  994.12314347  1294.82529526  1203.00723164]]
[[ 1003.55431122  1319.72319608  1204.81729264]]
[[ 1602.04581403  1685.59851312  1205.08426904]]
[[ 1007.90279684  1307.69670789  1209.56388879]]
[[ 1502.44360659  1425.37703986  1210.73595083   367.48671243
[[ 1022.7366811   1322.3310396   1217.11280045]]
[[ 1597.62552868  1676.35299447  1220.90170255]]
[[ 1032.47901865  1340.6087758   1225.10204612]]
[[ 1038.61212866  1338.93599972  1226.20128514]]
[[ 1505.70984643  1436.64524718  1237.85797988   366.70550425
[[ 1055.19577772  1357.5821928   1238.14818681]]
[[ 1057.82925185  1360.75792272  1244.80770831]]
[[ 1313.28507281  1461.42407531  1253.0919435    371.57389001
[[ 1313.65747636  1461.12923541  1253.16294584   371.83452589
[[ 1316.83952348  1458.72805892  1253.49507658   371.10239059
[[ 1320.08615686  1456.24325868  1253.93768496   371.4154991    369.28614394
[[ 1323.44327224  1453.69139416  1254.35696839   371.31739266
[[ 1326.88986479  1451.06771368  1254.80589853   371.38841893
[[ 1330.43203763  1448.37589145  1255.26110785   371.38306472
[[ 1071.47670828  1377.91279656  1255.55754225]]
[[ 1334.06466525  1445.61612178  1255.73234508   371.41126886
[[ 1337.7879745   1442.79031524  1256.21399518   371.42032433
[[ 1341.60016135  1439.90001055  1256.70796628   371.436821     369.62309534
[[ 1345.50136985  1436.94787567  1257.21221217   371.44611587
[[ 1349.49228682  1433.93782195  1257.72696865   371.45654913
[[ 1353.5760611   1430.87645916  1258.25122646   371.46282597
[[ 1357.75902676  1427.77473443  1258.78497127   371.4685132    369.87971488
[[ 1596.09354302  1671.62208854  1259.16549649]]
[[ 1362.05318614  1424.65083264  1259.32767266   371.471279     369.94362745
[[ 1366.47891705  1421.53414245  1259.8792004    371.47355024
[[ 1371.06919911  1418.47087504  1260.43873048   371.47446827
[[ 1375.87430572  1415.53114913  1261.00536857   371.476837     370.10900177
[[ 1380.96689695  1412.81738483  1261.57879336   371.48068885
[[ 1386.4451059   1410.47277706  1262.16612162   371.48890226
[[ 1392.43113878  1408.68792874  1262.80030525   371.49757916
[[ 1079.67486412  1379.77355787  1263.58344847]]
[[ 1399.06059568  1407.70195352  1263.58823414   371.49984211
[[ 1406.45946318  1407.79292035  1264.80217325   371.46222384
[[ 1414.70533521  1409.24910671  1267.01302648   371.33822039
[[ 1597.84324952  1675.09645245  1268.07325957]]
[[ 1507.85326438  1446.8993834   1268.25165704   365.46115033
[[ 1423.77549886  1412.30828298  1271.13244338   371.01678012
[[ 1433.49348914  1417.05995362  1278.19504054   370.55595452
[[ 1041.84509197  1807.70734319  1278.70224692   364.42265789
[[ 1039.86244894  1808.03588752  1278.70662994   364.47173417
[[ 1042.96598897  1807.60400986  1278.75453663   364.38541401
[[ 1038.31361214  1808.57781756  1278.8400788    364.48073388
[[ 1044.24161407  1807.56927513  1278.89912617   364.33344391
[[ 1037.05834846  1809.27288733  1278.99183559   364.46970331   363.122206
[[ 1036.00420864  1810.07313426  1279.14303769   364.45123914
[[ 1045.70201686  1807.60958072  1279.19861512   364.26751972
[[ 1035.08862418  1810.94408743  1279.290264     364.4297087    363.1352691
[[ 1047.38269545  1807.72814516  1279.75452215   364.19570336
[[ 1049.32445981  1807.92145842  1280.72555264   364.14198626
[[ 1085.89150212  1398.74291923  1281.00768684]]
[[ 1098.41498202  1397.42899909  1281.21752956]]
[[ 1050.3653331   1808.03521055  1281.33623903   364.12395425
[[ 1592.43213664  1664.49208993  1281.76271944]]
[[ 1051.48130943  1808.16405399  1282.09818314   364.12069563
[[ 1092.55944197  1814.53824121  1284.4074181    363.83601144
[[ 1099.7673915   1815.34899213  1284.51692417   363.83165735
[[ 1106.78177357  1815.8188427   1284.65278296   363.80490674
[[ 1055.84290187  1808.47157698  1284.66771684   364.21339011
[[ 1085.26317371  1813.38210564  1284.78920944   363.89853578
[[ 1113.8275057   1816.03714228  1284.8572447    363.72489929
[[ 1059.85926909  1808.69625054  1285.16621825   364.12252004
   122100  778.990    0.006 1285.192    0.011 simulationPoissonProcess.py:18(PoissonProcess)
[[ 1121.18699808  1816.06943964  1285.33189498   363.53881457
[[ 1077.87980634  1811.90107225  1285.45101365   363.95045609
[[ 1064.78223321  1809.29962878  1285.68939429   364.03937379
[[ 1070.81885512  1810.38948331  1285.89027251   363.98725771
[[ 1129.19289864  1815.92846796  1286.57026684   363.18740481
[[ 1443.42676231  1423.30086087  1288.70780121   369.87114853
[[ 1138.06693176  1815.52263118  1289.29042204   362.62803082
[[ 1147.76540447  1814.64991996  1294.1513477    361.83388955
 45086251  983.390    0.000 1295.834    0.000 {sorted}
[[ 1114.67242184  1413.63748527  1297.55920125]]
[[ 1507.91484087  1456.13139168  1301.11126706   363.76691049
[[ 1158.0707281   1813.06557929  1301.52107428   360.81792007
[[ 1453.15027032  1430.82149689  1303.0443163    368.94036141
[[ 1168.93943658  1810.69802989  1311.28789913   359.73427174
[[ 1129.21203679  1428.41782781  1312.47500552]]
[[ 1097.47486072  1418.12452093  1313.38940257]]
[[ 1589.800319    1658.27186675  1318.6074225 ]]
[[ 1462.25817795  1439.37403252  1321.4056198    367.77265345
[[ 1179.92836591  1807.41311407  1322.6614461    358.7160836    358.09087124
[[ 1142.88377899  1441.86057573  1325.8507872 ]]
[[ 1591.21506673  1661.13210454  1326.53676862]]
[[ 1506.91210618  1466.38953455  1333.12987138   361.38172178
[[ 1190.58086038  1803.14307311  1334.52591562   357.83450128
[[ 1585.08931676  1649.62940105  1337.25165426]]
[[ 1156.59053097  1454.09233815  1337.6228737 ]]
[[ 1470.3468084   1448.6246311   1343.91562011   366.16621324
[[ 1200.48731995  1797.81467889  1345.81415209   357.04424407
[[ 1106.65012711  1434.31267951  1347.64567039]]
[[ 1171.28361694  1465.23555485  1347.81982714]]
[[ 1210.36260502  1791.89504281  1355.74276995   356.34028534
[[ 1187.98894013  1475.36119738  1356.61352248]]
297631718 1361.599    0.000 1361.599    0.000 {method 'reduce' of 'numpy.ufunc' objects}
[[ 1220.39862557  1785.52384029  1364.1752914    355.68594003
[[ 1207.86772688  1484.42967871  1364.4061648 ]]
[[ 1504.33810754  1474.81499102  1364.97095123   357.5603164    358.27351014
[[ 1581.64273541  1642.65992186  1368.1730906 ]]
[[ 1477.2903878   1458.04305059  1370.04803893   363.91311178
[[ 1230.64530792  1778.73997573  1371.34308177   355.04714517
[[ 1232.327039    1492.21180664  1372.02390716]]
[[ 1582.75503609  1645.02119284  1374.47698874]]
[[ 1241.11085543  1771.55776369  1377.61949456   354.40225912
[[ 1114.67779776  1446.63773676  1379.03634385]]
[[ 1263.23902132  1498.1856677   1381.17565869]]
[[ 1576.1877756   1632.9730916   1382.56239642]]
[[ 1257.59790984  1453.92946244  1382.97350049]]
[[ 1269.3822215   1456.66292841  1383.20421995]]
[[ 1247.37044442  1451.41456498  1383.36605335]]
[[ 1251.76891789  1763.97618364  1383.37449706   353.74182815
[[ 1238.47471813  1449.09632352  1384.22495818]]
[[ 1282.99727482  1459.64285276  1384.30160171]]
[[ 1230.7218628   1446.95587042  1385.4483218 ]]
[[ 1280.62694126  1500.65356871  1386.57329752]]
[[ 1298.78663489  1462.90899632  1386.64707201]]
[[ 1223.95116528  1444.97597371  1386.96997107]]
[[ 1262.57433488  1755.99495225  1388.90168466   353.06812712
[[ 1265.40964783  1448.11093447  1388.96038548]]
[[ 1253.49568157  1444.91060682  1389.36274052]]
[[ 1279.21133475  1451.64193375  1389.46127511]]
[[ 1243.17957843  1441.99746322  1390.43522228]]
[[ 1212.09780331  1441.30480855  1390.52493447]]
[[ 1317.20028282  1466.52446659  1390.84399889]]
[[ 1295.26146817  1455.56042453  1391.2343066 ]]
[[ 1234.22177342  1439.33550873  1392.03004014]]
[[ 1264.71166812  1447.05206522  1392.45541533]]
[[ 1278.64450369  1450.72424358  1392.85871017]]
[[ 1252.68327131  1443.722236    1392.98330257]]
[[ 1300.30671587  1502.50676639  1393.27341583]]
[[ 1226.42035694  1436.89323727  1394.05404065]]
[[ 1242.26486621  1440.68946834  1394.21527545]]
[[ 1273.4891864   1747.63012053  1394.35114684   352.3901314    354.09282942
[[ 1294.8469532   1454.79674675  1394.5521245 ]]
[[ 1501.08879265  1481.05505615  1394.56688512   349.29124097
[[ 1314.02718107  1459.94770591  1394.86636075]]
[[ 1203.14460288  1438.16213206  1395.03881286]]
[[ 1233.21253607  1437.91571248  1396.00803134]]
[[ 1483.29038211  1466.94732464  1397.84276543   360.08075922
[[ 1338.8607677   1470.59708558  1397.8479108 ]]
[[ 1313.78905502  1459.35052287  1398.10376086]]
[[ 1212.78511591  1432.39093866  1398.84585152]]
[[ 1284.47450008  1738.90281596  1399.76715983   351.71396597
[[ 1196.24284035  1435.41397323  1400.4116521 ]]
[[ 1217.42799602  1432.81892713  1400.5371216 ]]
[[ 1336.14491817  1464.92991002  1401.29001754]]
[[ 1282.36340553  1449.40212366  1401.91978032]]
[[ 1322.73866123  1503.64633216  1401.92672429]]
[[ 1267.02302527  1445.28073683  1402.0399654 ]]
[[ 1281.32135577  1450.38178453  1403.02111246]]
[[ 1265.92561265  1446.25804142  1403.04609052]]
[[ 1253.79859663  1441.57306872  1403.26614724]]
[[ 1300.24141518  1454.00991666  1403.31694952]]
[[ 1252.6660772   1442.5397524   1404.20598535]]
[[ 1336.10449368  1464.50797672  1404.40889568]]
[[ 1299.2839442   1454.98093088  1404.53696468]]
[[ 1202.49171122  1428.56596312  1405.05884475]]
[[ 1295.50377461  1729.83844425  1405.13357652   351.04096212
[[ 1242.34970772  1438.22123758  1405.34446752]]
[[ 1122.89996274  1455.39301248  1405.50906062]]
[[ 1268.67825933  1452.69694463  1406.11565749]]
[[ 1284.02945473  1456.55862759  1406.21190137]]
[[ 1241.19519801  1439.17067915  1406.24938025]]
[[ 1572.34038459  1625.90210078  1406.35622815]]
[[ 1269.64282412  1455.08204302  1406.42848357]]
[[ 1190.747706    1432.9410374   1406.65865554]]
[[ 1284.99870657  1458.87049496  1406.80081813]]
[[ 1205.58482235  1428.52486513  1406.80374929]]
[[ 1321.19993314  1459.20374058  1406.89348576]]
[[ 1255.38698795  1449.15402106  1407.13521441]]
[[ 1256.34431649  1451.5843675   1407.18559572]]
[[ 1268.33222985  1454.17119751  1407.49224236]]
[[ 1283.74273541  1457.96213062  1407.55139573]]
[[ 1301.83931373  1460.78448293  1407.78500651]]
[[ 1320.36647982  1460.15021993  1408.24224463]]
[[ 1254.98643297  1450.68573412  1408.56047731]]
[[ 1302.81002135  1462.98862623  1408.65925851]]
[[ 1244.77872879  1448.34578395  1408.84719987]]
[[ 1243.83031218  1445.89280167  1409.04498827]]
[[ 1301.61886353  1462.10037574  1409.09274709]]
[[ 1364.67604459  1475.31545297  1409.13729773]]
[[ 1306.55434619  1720.46936613  1410.43682961   350.37773981
[[ 1243.37772546  1447.47135348  1410.53475334]]
[[ 1282.38197208  1456.7710249   1410.82531366]]
[[ 1222.43730328  1432.13039481  1410.8968474 ]]
[[ 1573.2071909   1627.86115538  1411.03128251]]
[[ 1266.80971277  1452.85652365  1411.15356522]]
[[ 1322.61217478  1465.43669236  1411.40258098]]
[[ 1282.48330962  1457.08391924  1411.57930085]]
[[ 1221.2538866   1433.03416097  1411.79798543]]
[[ 1266.87990557  1453.15116711  1411.90077182]]
[[ 1362.5256035   1470.71120263  1411.95137754]]
[[ 1300.44129975  1461.05029343  1411.99907713]]
[[ 1323.57960237  1467.49025488  1412.55803471]]
[[ 1194.47236889  1425.19780177  1412.5956269 ]]
[[ 1253.31763652  1449.26275571  1412.64204195]]
[[ 1322.46632175  1466.64318438  1412.6734287 ]]
[[ 1300.57556738  1461.37520669  1412.76804015]]
[[ 1348.52104231  1503.99613297  1413.36625333]]
[[ 1253.35793349  1449.53425822  1413.39435451]]
[[ 1345.97026237  1465.13179256  1413.70043156]]
[[ 1224.57115759  1442.32976552  1413.70535012]]
[[ 1186.15133627  1430.63504357  1413.87196436]]
[[ 1223.64145979  1439.86761991  1414.3722832 ]]
[[ 1196.42771435  1424.77735457  1414.63575959]]
[[ 1362.68512479  1470.46232073  1414.84037865]]
[[ 1241.5709944   1445.9524191   1415.08076447]]
[[ 1345.30851476  1466.02854531  1415.15596466]]
[[ 1321.49691185  1465.75248056  1415.2156679 ]]
[[ 1317.61049657  1710.83876313  1415.69230001   349.82181525
[[ 1241.58183285  1446.1967818   1415.85249208]]
[[ 1321.66560882  1466.08109441  1416.00102652]]
[[ 1223.08533866  1441.52266806  1416.02954435]]
[[ 1378.76617861  1477.86583478  1416.11036921]]
[[ 1566.38930473  1615.48216206  1417.22053899]]
[[ 1347.00767364  1470.6090181   1417.93812794]]
[[ 1376.9211744   1473.83027848  1418.59400867]]
[[ 1207.54944473  1427.12624718  1418.9674255 ]]
[[ 1346.94343919  1471.6772746   1419.14836451]]
[[ 1347.96136333  1472.4573928   1419.33782669]]
[[ 1498.42146246  1485.32655418  1419.908852     335.25362133
[[ 1488.12943278  1474.10961676  1419.94819335   357.62842884
[[ 1206.34947024  1427.96464421  1420.0032541 ]]
[[ 1328.41352282  1701.11971782  1420.76575857   349.60157825
[[ 1346.20547175  1470.96297095  1421.30819009]]
[[ 1377.17500427  1473.66456596  1421.32630943]]
[[ 1209.30208641  1437.16534396  1421.39282313]]
[[ 1187.90605649  1422.09606435  1421.53839086]]
[[ 1221.00390095  1439.82987815  1421.61448716]]
[[ 1346.4075027   1471.28352942  1422.09800886]]
[[ 1182.03412457  1428.39472451  1422.21292598]]
[[ 1220.95483728  1440.01312148  1422.45779375]]
[[ 1208.38614386  1434.75082555  1422.48963976]]
[[ 1188.99877913  1421.3556492   1424.10628952]]
[[ 1207.71857723  1436.45447422  1424.40803876]]
[[ 1394.20246084  1480.64582788  1424.66558629]]
[[ 1338.33439187  1691.6627135   1425.0303665    349.15289017
[[ 1375.57038947  1472.02275449  1425.33230357]]
[[ 1392.68144828  1477.21579502  1426.79796342]]
[[ 1375.12397558  1472.82632922  1426.8018696 ]]
[[ 1132.49511015  1461.2916177   1427.0398123 ]]
[[ 1378.41353289  1503.55423538  1428.5329564 ]]
[[ 1375.90491495  1476.44829129  1428.67173766]]
[[ 1347.92185975  1682.32351071  1429.02834978   348.68620417
[[ 1195.97367238  1422.83992039  1429.26599384]]
[[ 1393.01613617  1477.12667113  1429.31582411]]
[[ 1375.92119307  1477.33927752  1429.76536431]]
[[ 1376.8156392   1478.01878899  1430.20808177]]
[[ 1194.7388577   1423.59547316  1430.60130124]]
[[ 1205.33052958  1434.61159888  1431.31893351]]
[[ 1375.42634915  1476.81344323  1431.4955287 ]]
[[ 1197.31416048  1432.59515884  1431.73844724]]
[[ 1178.02561734  1426.12079121  1431.92028866]]
[[ 1182.12485058  1419.0886927   1432.09850655]]
[[ 1375.65230501  1477.10825894  1432.25206385]]
[[ 1205.21560685  1434.72178958  1432.30909589]]
[[ 1391.72033592  1475.73694495  1432.61786162]]
[[ 1357.26534712  1673.06185054  1432.86734609   348.05678778
[[ 1196.38946731  1430.25661546  1433.22218145]]
[[ 1391.38871027  1476.47949772  1434.0567701 ]]
[[ 1562.5028491   1608.76231762  1434.54586828]]
[[ 1411.17004787  1483.70069467  1435.06558299]]
[[ 1182.5201016   1418.0592462   1435.45276453]]
[[ 1195.58226593  1431.98967589  1435.52384554]]
[[ 1366.41254508  1663.85949256  1436.7354018    347.92254577   351.6269976
[[ 1409.98476475  1480.91108202  1436.82189737]]
[[ 1563.17487273  1610.38537231  1437.85985946]]
[[ 1410.37579037  1480.88772578  1439.0493094 ]]
[[ 1492.28677829  1480.26169239  1439.28750117   355.16479929
[[ 1497.07896948  1488.30727462  1440.31088366   321.96085103
[[ 1375.34568939  1654.64707783  1440.38547212   346.45248394
[[ 1409.37946799  1479.75729799  1441.61935027]]
[[ 1186.40328104  1418.95818076  1441.89560364]]
[[ 1556.21445394  1597.78456534  1442.81128561]]
[[ 1409.1641423   1480.42013598  1442.97301671]]
[[ 1173.76942102  1423.70953016  1443.32853752]]
[[ 1185.08716601  1419.61024368  1443.73470564]]
[[ 1192.77139856  1429.98517282  1444.13480348]]
[[ 1384.21873809  1645.37978261  1444.4177854    347.51380531
[[ 1144.55556007  1465.10684405  1444.42530354]]
[[ 1176.54445289  1416.01117411  1444.61106172]]
[[ 1187.30475293  1428.36594235  1444.98968169]]
[[ 1410.42575283  1483.16914493  1445.25186071]]
[[ 1192.57352708  1430.01059406  1445.36858793]]
[[ 1505.55435249  1537.07512531  1445.59455206   350.87404096
[[ 1410.50011169  1483.82997622  1446.1241825 ]]
[[ 1505.62254685  1536.51202974  1446.59382896   350.45104076
[[ 1411.21613032  1484.36075912  1446.68879642]]
[[ 1186.33449623  1426.112996    1446.80324908]]
[[ 1410.23298985  1483.49473784  1447.34588082]]
[[ 1429.86328729  1487.0795115   1447.54377666]]
[[ 1392.9192356   1635.96566103  1447.81209801   344.69676692
[[ 1505.71249325  1535.92895062  1447.81737391   350.48936193
[[ 1410.45371248  1483.73612801  1447.98734756]]
[[ 1413.27769714  1502.47084627  1448.20428368]]
[[ 1517.73903144  1497.58975996  1448.77136347   337.84869186
[[ 1429.0156488   1484.96113065  1448.89677523]]
[[ 1505.771942    1535.30470939  1448.93426488   349.96552651
[[ 1511.45827695  1497.14766386  1448.9357769    340.51679827
[[ 1176.30923688  1414.69497497  1449.06029393]]
[[ 1508.09046998  1496.88957734  1449.35608749   342.29289542
[[ 1185.33504485  1427.85880846  1449.64468456]]
[[ 1529.10606194  1498.17910845  1450.10966171   335.11358353
[[ 1505.86016213  1534.65682056  1450.32952799   350.02453171
[[ 1504.58112096  1496.68590575  1450.36860718   344.74750271
[[ 1429.42424582  1484.98758702  1450.73993165]]
[[ 1505.91552113  1533.95962791  1451.62030546   349.48043701
[[ 1401.61610488  1626.4967202   1451.90518386   346.54184503
[[ 1501.12089683  1496.58311026  1452.29147786   348.19906406
[[ 1428.71021499  1484.12251066  1452.56545841]]
[[ 1288.32296879   980.2578765   1452.73983427   332.64981624
[[ 1286.44938511   977.79889721  1452.80758039   332.74757711
[[ 1290.48712832   982.99156694  1452.81716908   332.74002205
[[ 1292.97711009   986.01000639  1452.87830748   332.74559191   404.3660592
[[ 1284.84733725   975.5798081   1452.90275626   332.4219899    404.79833717
[[ 1284.16296608   974.5592903   1453.06723498   332.7351325    404.90625232
[[ 1505.99858048  1533.22909682  1453.19146966   349.46626499
[[ 1295.73842786   989.34949064  1453.28140523   332.75501566
[[ 1282.89539498   972.58138381  1453.30773457   332.26111263
[[ 1282.62455284   972.11632844  1453.42063864   332.50604558
[[ 1499.39797827  1496.55528691  1453.55509865   350.2178928    354.82484395
[[ 1539.22653416  1498.10019121  1453.67719504   334.77731572
[[ 1298.72355932   993.09516461  1453.75558494   332.7658312    404.11149522
[[ 1428.60393367  1484.68171515  1453.75981424]]
[[ 1301.89332852   997.2358576   1454.28181844   332.77774994   403.9520214
[[ 1506.05733009  1532.44063923  1454.72758109   348.98816935
[[ 1305.20681987  1001.74770365  1454.85400424   332.79082861
[[ 1552.55361036  1591.70416302  1454.92980479]]
[[ 1497.67481756  1496.54976129  1455.2136671    352.57728705   354.9844865
[[ 1410.13822391  1616.85457432  1455.23484757   343.84764596
[[ 1308.62377181  1006.60109409  1455.46529577   332.80509545
[[ 1496.7349902   1490.48837432  1455.55206151   312.8161534    340.91462748
[[ 1495.80651047  1485.62078221  1455.64764761   353.34522485
[[ 1543.08508257  1497.8442719   1455.70191613   334.52927301
[[ 1312.10689777  1011.76321074  1456.10876833   332.82052403
[[ 1315.62329313  1017.200142    1456.77793958   332.83703122
[[ 1168.88812186  1421.04464529  1456.89231412]]
[[ 1177.7617044   1415.19755968  1457.19250749]]
[[ 1553.0691674  1593.0340807  1457.1980309]]
[[ 1495.94060104  1496.56552984  1457.40822862   355.32205996
[[ 1319.14508344  1022.87844913  1457.46711584   332.8544617    402.80648096
[[ 1322.64954076  1028.76618725  1458.17157048   332.87259706
[[ 1506.15423511  1530.49422895  1458.48979455   348.58490942
[[ 1160.24696874  1467.56050675  1458.58923429]]
[[ 1326.11887147  1034.83348139  1458.8875398    332.89116652
[[ 1418.66002636  1607.08148358  1458.98386977   344.6495554    351.24342645
[[ 1170.60615674  1412.69493552  1459.54723929]]
[[ 1329.5398118   1041.0527957   1459.61207674   332.90988737
[[ 1176.28354532  1415.71661666  1459.79296099]]
[[ 1420.80936263  1604.63335129  1460.089274     345.73542735
[[ 1332.90310927  1047.39902625  1460.34281206   332.92848763
[[ 1494.20569693  1496.58856803  1460.34913274   358.4788558    355.47673815
[[ 1181.88856283  1425.643013    1460.42425626]]
[[ 1506.17187471  1529.37102321  1460.49058425   348.33162696
[[ 1336.20293687  1053.84950387  1461.07772656   332.94675514   401.1396891
[[ 1546.01553015  1580.25409141  1461.3766208 ]]
[[ 1178.14670043  1424.21198175  1461.67452672]]
[[ 1339.4362802   1060.38395501  1461.81495352   332.9645123    400.75599979
[[ 1181.57460577  1425.56829513  1462.02539808]]
[[ 1450.45708057  1490.82779936  1462.23973584]]
[[ 1477.12460509  1518.30147247  1462.41564036   341.8755639    353.64604924
[[ 1342.6023372   1066.98442464  1462.55272693   332.98170754
[[ 1506.12321762  1527.99016937  1462.65142508   348.21001012
[[ 1429.19647449  1594.52086592  1463.0998639    342.45239474
[[ 1449.93643266  1489.40462113  1463.16302318]]
[[ 1345.70197086  1073.63518455  1463.2892799    332.99829425
[[ 1177.08593163  1422.04376287  1463.73078252]]
[[ 1348.73722365  1080.32258468  1464.02292039   333.01429243
[[ 1465.5588642   1540.4553084   1464.38150722   341.26242385
[[ 1484.05724193  1507.58345698  1464.44405074   340.84533268
[[ 1450.30813406  1489.45951257  1464.51652421]]
[[ 1497.67281194  1488.33198301  1464.71679767   355.56858237
[[ 1351.71092842  1087.03489236  1464.75206271   333.02975678   399.0853888
[[ 1505.87795457  1526.08197819  1464.90525209   348.25979579
[[ 1433.4527      1589.39924471  1465.0200934    343.88728535
[[ 1169.71047576  1411.06344466  1465.46681894]]
[[ 1354.62640366  1093.76210658  1465.47527827   333.0447625    398.63711699
[[ 1434.52835918  1588.11442004  1465.58054726   344.64362061
[[ 1449.85375087  1488.86578881  1465.61341505]]
[[ 1505.68010994  1524.93667052  1466.0601348    348.35892526
[[ 1357.48722844  1100.49576187  1466.19134525   333.05938942
[[ 1496.86026978  1492.12437071  1466.40603563   307.19644545
[[ 1449.83762327  1489.29162133  1466.55564345]]
[[ 1360.29708531  1107.22873041  1466.89930423   333.07370047
[[ 1460.57658076  1549.72324688  1467.10516274   340.85992633
[[ 1505.36812856  1523.52106117  1467.24068626   348.53912006
[[ 1175.80928321  1423.78230754  1467.306745  ]]
[[ 1488.00480796  1502.49769473  1467.32728909   340.33887061
[[ 1363.05965891  1113.95502788  1467.59854152   333.08770377
[[ 1365.77858418  1120.66963061  1468.28893083   333.10129463   396.73767
[[ 1504.8905293   1521.72620002  1468.47804618   348.8419123    348.2957859
[[ 1368.45742888  1127.36827416  1468.97113325   333.11412631
[[ 1442.88155045  1577.48213264  1469.06083902   341.12172986
[[ 1451.69913587  1491.005623    1469.12263597]]
[[ 1455.91810831  1557.93202292  1469.2968636    340.5322825    353.11962465
[[ 1542.76227539  1574.99389547  1469.54586143]]
[[ 1451.77452072  1491.36956894  1469.62318151]]
[[ 1371.09972733  1134.04724749  1469.64714055   333.12539072
[[ 1490.117907    1499.99879004  1469.69324404   340.24907877
[[ 1504.1821415   1519.41300029  1469.84839416   349.25139061   346.8430935
[[ 1498.67417264  1489.71216461  1469.85053414   358.17907668
[[ 1452.20667846  1491.68057372  1470.06164573]]
[[ 1451.49640975  1565.02279746  1470.16581884   340.94512066
[[ 1451.68019617  1491.21311829  1470.24799701]]
[[ 1180.96542653  1469.34101767  1470.31923315]]
[[ 1373.70907049  1140.70313903  1470.32126125   333.13343039   395.2152311
[[ 1503.76397432  1518.10863404  1470.5951871    349.47856582
[[ 1451.83356094  1491.35952301  1470.64003309]]
[[ 1569.40196639  1495.01114326  1470.65349866   332.60712671
[[ 1376.28928329  1147.33249483  1471.00183043   333.13510151   394.6911928
[[ 1543.14960807  1576.0593998   1471.0450957 ]]
[[ 1491.2177049   1498.77461948  1471.21129154   340.28355601
[[ 1503.27640128  1516.64033624  1471.43559262   349.71980719
[[ 1378.8447478   1153.93131549  1471.70414318   333.12500835
[[ 1570.29825494  1494.31714674  1471.72897742   332.72472445
[[ 1502.71677689  1514.99512019  1472.416407     349.96010251
[[ 1453.8074887  1501.1119127  1472.4464537]]
[[ 1381.38108103  1160.49419025  1472.45636743   333.09751511
[[ 1492.37368477  1497.59990024  1473.20598133   340.46057392
[[ 1162.94610598  1417.98704871  1473.20844288]]
[[ 1383.90657994  1167.01265912  1473.31360918   333.07390287
[[ 1502.08730086  1513.16670273  1473.60535968   350.17365658
[[ 1497.14368829  1493.41862233  1474.13848637   303.76051069
[[ 1386.39935283  1173.49616889  1474.16297914   333.05082915
[[ 1536.01542042  1563.10393523  1474.74397076]]
[[ 1388.86144057  1179.94383587  1475.0024877    333.02887712
[[ 1501.39775203  1511.15835389  1475.0996458    350.31473522
[[ 1169.0863869   1411.28527591  1475.6617664 ]]
[[ 1391.29478057  1186.35503602  1475.83015376   333.00864431
[[ 1493.60474809  1496.52901022  1475.92153909   340.88843137   356.3561648
    29282  955.374    0.033 1476.117    0.050 AffineBreakPoints.py:8(AffineBreakPointsPrep)
[[ 1393.70120791  1192.72937489  1476.64401328   332.99073762
[[ 1500.6691953   1508.98465709  1477.03740466   350.28619553
[[ 1396.08245566  1199.0666626   1477.44212059   332.97575439
[[ 1163.7249576   1408.95468533  1477.52268583]]
[[ 1398.44010784  1205.36689815  1478.22266694   332.96426895   389.6076913
[[ 1400.77554186  1211.6302482   1478.98419641   332.95691316
[[ 1167.319597    1411.62616923  1479.34029235]]
[[ 1499.93175993  1506.65643276  1479.60117303   349.81800281
[[ 1403.09022032  1217.85698853  1479.72490246   332.9543006    388.36189892
[[ 1494.91659528  1495.72023448  1479.72949978   341.75940568
[[ 1497.4842164   1494.50210221  1479.82489642   301.5385105    335.7190851
[[ 1533.2930871   1558.78034853  1480.01544321]]
[[ 1208.4712051   1471.16371681  1480.19162122]]
[[ 1405.38549437  1224.0475354   1480.44296563   332.95692297
[[ 1500.36607427  1492.25715275  1480.74132342   365.84626472
[[ 1171.39997     1421.26164244  1480.80181328]]
[[ 1533.57366555  1559.60242015  1480.96412732]]
[[ 1407.6624877   1230.20243715  1481.13724617   332.96555223
[[ 1409.92236611  1236.32232279  1481.80593146   332.98077343
[[ 1495.58286581  1495.43330276  1481.94592478   342.3202052    357.78103023
[[ 1412.1661441   1242.40795346  1482.44691886   333.00250393
[[ 1168.76167006  1419.83754199  1482.52829888]]
[[ 1170.91391012  1421.06354803  1482.92158329]]
[[ 1414.39573651  1248.45911638  1483.06279558   333.0320752    385.05690642
[[ 1499.27788931  1504.23244072  1483.12596547   348.59595393
[[ 1416.61188895  1254.47707801  1483.65024182   333.07055734
[[ 1497.83350904  1495.44426525  1484.16867274   300.01724757
[[ 1418.81499025  1260.4633053   1484.20541652   333.11884926
[[ 1526.35020809  1546.45318404  1484.35508653]]
[[ 1167.56854425  1417.75114339  1484.68828937]]
[[ 1421.00533585  1266.41916658  1484.72512543   333.17780502
[[ 1224.1586244   1472.18598348  1484.73488992]]
[[ 1423.18292116  1272.34607423  1485.20558897   333.24618559
[[ 1162.03671273  1406.94488732  1485.35471084]]
[[ 1425.34813264  1278.2459545   1485.64744313   333.31755133
[[ 1583.46014701  1483.88582181  1485.81721864   333.50934891
[[ 1427.50546232  1284.12165609  1486.07718583   333.39528374
[[ 1583.33196436  1484.33947019  1486.28713631   333.7469641    356.40176766
[[ 1429.6555354   1289.97326719  1486.4942165    333.47964957
[[ 1431.79888347  1295.80095393  1486.8980017    333.57089048
[[ 1433.9359362   1301.604965    1487.28807051   333.66916869
[[ 1524.24233542  1543.14431064  1487.54548382]]
[[ 1498.17482954  1496.28167296  1487.607021     298.92193945   334.433958
[[ 1436.06702566  1307.38563986  1487.66407253   333.77470995
[[ 1438.19237068  1313.14340954  1488.02574501   333.8876655    376.90835226
[[ 1524.43327094  1543.73985265  1488.10785743]]
[[ 1440.31207385  1318.8788089   1488.37293411   334.00814981
[[ 1498.96331693  1501.90015437  1488.4018922    347.14141997
[[ 1442.42611699  1324.59249187  1488.70560527   334.13624965   375.3229665
[[ 1242.0378515   1473.41131458  1488.91707235]]
[[ 1444.53434821  1330.28524167  1489.0238423    334.2720046    374.52094426
[[ 1165.88834349  1419.45266783  1489.22153047]]
[[ 1446.63647831  1335.95799318  1489.32787652   334.41548888
[[ 1500.78495442  1495.04574001  1489.37446416   370.4043188    353.56449533
[[ 1448.73203717  1341.61186331  1489.61793725   334.5663569    372.89994525
[[ 1450.82048226  1347.24817577  1489.89486671   334.72573544
[[ 1452.90070791  1352.86855096  1490.15784161   334.88927989
[[ 1498.50326476  1497.0337255   1490.4116998    298.1016537    334.0260544
[[ 1454.97260066  1358.47479463  1490.41207373   335.07078237
[[ 1457.03220021  1364.06948186  1490.6456699    335.23132006
[[ 1459.08424512  1369.65479049  1490.89014665   335.46493866
[[ 1461.11302157  1375.23546267  1491.08158592   335.57240394
[[ 1517.10014794  1530.36670227  1491.28536534]]
[[ 1463.14114482  1380.81351615  1491.3409857    335.92300294
[[ 1465.1238096   1386.39796922  1491.47359809   335.91420474
[[ 1467.11601639  1391.99069986  1491.76164672   336.4134308    365.44818315
[[ 1469.03582906  1397.60670537  1491.84845292   336.31792198
[[ 1470.95992772  1403.25095658  1492.13629835   336.86932173
[[ 1472.77833616  1408.94764659  1492.24430272   336.83176068
[[ 1475.35820135  1417.63785927  1492.4610469    336.80487842
[[ 1473.73777386  1411.81248874  1492.64340665   337.84276785
[[ 1262.38168382  1474.93373454  1492.74842717]]
[[ 1498.81769348  1497.71184042  1492.75520482   297.46934902
[[ 1476.97858177  1423.57910029  1492.98727102   337.84335447
[[ 1515.66293124  1528.12673385  1493.00595346]]
[[ 1155.41293099  1414.36322926  1493.01177635]]
[[ 1478.33977654  1429.71317074  1493.15493777   337.64572475
[[  937.35487754  1311.45923377  1493.19767363   340.43753697
[[  942.50349425  1313.39450571  1493.21204506   340.44886131
[[  932.33971275  1309.64211025  1493.2318305    340.42670605
[[  947.78929107  1315.44705156  1493.27898483   340.4606897    369.96660214
[[ 1515.77846759  1528.51048932  1493.30237755]]
[[  927.45389651  1307.94320255  1493.31058473   340.41641713
[[ 1497.92555819  1496.33020385  1493.34512064   344.13393951
[[  953.21557615  1317.61517654  1493.40285361   340.4731966    369.65304327
[[  922.69295954  1306.36177234  1493.42979422   340.40669646
[[  918.05224123  1304.89644632  1493.58552443   340.39760072
[[  958.78499415  1319.89615122  1493.58776765   340.48669512
[[ 1479.48315858  1436.13653147  1493.60320762   338.06215563
[[ 1500.46045351  1497.03283855  1493.76514815   372.19734289
[[  913.5269661   1303.54530374  1493.77406481   340.38919956
[[  964.49941493  1322.28615465  1493.83755905   340.50173076
[[  909.11230147  1302.30595511  1493.99190342   340.38156421   371.8252196
[[ 1480.23436076  1443.03913323  1494.12270985   338.14364799
[[  970.35982455  1324.78022863  1494.1557471    340.51922868
[[  904.80341698  1301.17561085  1494.2358146    340.37476329
[[  900.59551452  1300.15114901  1494.50276506   340.36885655
[[  976.36469159  1327.36923685  1494.54401478   340.53870096
[[ 1499.11804903  1498.32403547  1494.75063067   296.97176885
[[  896.48385707  1299.22916636  1494.78991157   340.36389226
[[  982.50911809  1330.03844817  1495.0029733    340.55640249
[[  892.46375066  1298.40597967  1495.09441235   340.35989284
[[  888.53066017  1297.67777723  1495.41381716   340.35688686
[[ 1480.3949938   1450.88522695  1495.42780133   338.11885875
[[  988.79097302  1332.77971791  1495.53756935   340.57171373
[[ 1499.32966049  1500.1318335   1495.58366035   346.77127128   329.4069498
[[  884.68018825  1297.0406298   1495.7458799    340.35489466
[[  880.90809371  1296.49053856  1496.08856068   340.3539288    372.62880551
[[  995.20718489  1335.58391261  1496.15375712   340.58378462
[[ 1285.46795952  1476.84556954  1496.21247999]]
[[ 1508.30968179  1514.87763973  1496.31470336]]
[[ 1499.38262545  1498.84809392  1496.41326049   296.60661409   333.2810531
[[  877.21030648  1296.02347903  1496.44002554   340.35399456
[[ 1480.30453933  1455.23733851  1496.51743566   337.95185367
296318052  141.486    0.000 1496.695    0.000 _methods.py:31(_sum)
[[  873.58293898  1295.6354401   1496.79864273   340.3550904    372.74822896
[[ 1001.75376574  1338.44091781  1496.85909859   340.59141088
[[ 1507.5798717   1513.74459939  1497.01329741]]
[[ 1507.632258    1513.93009788  1497.13057986]]
[[  870.02229363  1295.32245768  1497.1629753    340.35720838
[[ 1480.2273826   1457.56855656  1497.2370257    337.82701468
[[ 1500.19164259  1498.68515656  1497.27280636   373.31732507
[[ 1499.82656551  1499.80007031  1497.31508583   360.08599171
[[  866.52486668  1295.08064269  1497.53177018   340.36033469
[[ 1008.42586834  1341.33963283  1497.66362438   340.59284513
[[ 1510.35099701  1548.68951817  1497.77091212   343.88820719
[[ 1499.61513247  1499.29500729  1497.80978812   296.33869428   333.1518917
[[ 1498.83122009  1493.00713944  1497.81380071   335.24356888
[[ 1159.45160077  1406.94347426  1497.90393473]]
[[  863.08734886  1294.90620367  1497.9039447    340.3644502    372.85390361
[[ 1480.13996856  1460.11902724  1498.20230144   337.57428138   353.2322709
[[  859.70662308  1294.79546422  1498.27857126   340.36953109
[[ 1497.8442817   1488.89816885  1498.47313852   333.61197969
[[ 1015.21787544  1344.26793196  1498.58103759   340.58550347
[[ 1510.29140787  1547.88852363  1498.61470168   343.92815338
[[  856.37976003  1294.74487592  1498.65486122   340.37554941
[[ 1499.81965903  1499.67570422  1498.99200641   296.14256496
[[  853.10401188  1294.75102729  1499.03214871   340.38247383
[[ 1496.73987384  1485.11979456  1499.25285082   333.1289384    371.74253784
[[ 1311.56176379  1479.23053953  1499.25868302]]
[[ 1155.24773467  1404.57654379  1499.26280653]]
[[  849.87680492  1294.81064934  1499.40987503   340.39027023
[[ 1480.11728291  1462.99264281  1499.58442477   337.28017362
[[ 1022.12806738  1347.22019058  1499.63483686   340.5723237    365.07688592
[[ 1499.91217912  1499.91015573  1499.78296997   331.0078114    370.00535853
[[  846.69573123  1294.92061845  1499.78757404   340.39890237
[[ 1499.9984442   1499.99961768  1499.99680407   339.99960638
[[ 1499.99627529  1499.99311642  1499.9987022    352.00015314
[[ 1499.99948054  1499.99912585  1499.99890138   344.99995546
[[ 1499.99990758  1499.99991361  1499.99913901   327.00005261
[[ 1499.99986671  1499.99983246  1499.99965864   303.00008956
[[ 1499.99992131  1499.99985812  1499.99983303   356.99997822
[[ 1499.99999094  1499.99998397  1499.99997971   338.99999934
[[ 1500.00000025  1500.00000122  1500.00000044   337.0000001    369.00000003
[[ 1500.00916743  1499.98662532  1500.10273326   330.00148085
[[ 1500.02209427  1500.01086724  1500.1632116    353.00252405
[[  843.55853997  1295.07795694  1500.16485877   340.40833244
[[ 1500.28239168  1501.24925304  1500.23903942   350.09175867
[[ 1480.14626733  1464.53116018  1500.42238      337.18779411
[[  840.46312842  1295.27983184  1500.54140946   340.41852162
[[ 1494.27806237  1478.31818179  1500.57665447   333.70990737
[[ 1499.00889099  1498.81826242  1500.60613102   341.96911116   344.5981246
[[ 1029.14986414  1350.1752802   1500.84195865   340.55514055
[[  837.40753306  1295.52355236  1500.91696297   340.42943059
[[  834.38992079  1295.80656631  1501.29130361   340.4410199    372.77149793
[[ 1491.06737134  1472.91706424  1501.42153155   335.82747503
[[ 1480.25455655  1466.19176689  1501.49857558   337.37593376
[[  831.40858042  1296.12645572  1501.6642552    340.45325036
[[ 1340.88873711  1482.1525953   1501.79321695]]
[[  828.46191456  1296.48093198  1502.03567434   340.46608333
[[ 1036.27316942  1353.10177181  1502.21895901   340.53644166
[[  825.54843185  1296.86783061  1502.40544472   340.47948099   372.6488037
[[ 1495.52588271  1494.64226479  1502.53225264   338.08656405
[[  822.66673967  1297.28510588  1502.77347234   340.49340651
[[ 1157.21252707  1407.03803574  1503.01477429]]
[[  819.81553721  1297.73082528  1503.13968148   340.50782421
[[ 1509.60209755  1543.46868128  1503.31804277   345.28229431
[[ 1486.6183956   1468.65010193  1503.32176136   337.64946554
[[  816.99360911  1298.20316404  1503.50401144   340.52269969
[[ 1413.95217877  1490.40320919  1503.6210477 ]]
[[ 1043.48232583  1355.97608556  1503.80034545   340.51982628
[[ 1499.94737682  1499.81745004  1503.81707367   365.99718028
[[  814.19981935  1298.7003997   1503.8664138    340.53799989
[[ 1491.82005382  1490.04270344  1504.20375468   333.87292858
[[  811.43310572  1299.22090686  1504.22685015   340.55369315
[[  808.69247456  1299.76315197  1504.58529026   340.56974924
[[ 1479.91215827  1465.26884212  1504.75854225   339.75966768
[[  805.97699593  1300.32568844  1504.94171061   340.58613936
[[ 1509.10078448  1540.87387647  1505.27798723   346.99208745
[[  803.28579913  1300.90715184  1505.29609312   340.60283614
[[  800.61806852  1301.50625537  1505.64842423   340.6198136    372.10943606
[[ 1050.77185115  1358.77628869  1505.64896068   340.51473387
[[ 1160.06654299  1416.48310089  1505.96540663]]
[[  797.97303969  1302.12178555  1505.99869403   340.63704715
[[ 1508.79051948  1539.46322691  1506.04118429   348.23523911
[[ 1488.49243789  1485.60776943  1506.15533641   331.91000621
[[  795.34999601  1302.75259709  1506.3468941    340.65451039
[[ 1508.4067138   1537.86999055  1506.60343756   350.0278699    347.83983427
[[  792.74826508  1303.39761108  1506.69302065   340.67218237
[[ 1484.9452694   1479.32579874  1506.76401847   332.51369527
[[ 1508.19524229  1537.01484018  1506.82982608   351.06925978
[[  790.16721574  1304.05581018  1507.03707184   340.69004312
[[ 1458.0313032   1461.94350119  1507.07449224   342.37533275
[[ 1470.47617284  1463.10700222  1507.09494223   340.83896597
[[  787.60625526  1304.7262351   1507.3790475    340.70807366
[[  785.0648267   1305.40798136  1507.71894888   340.726256     371.6619169
[[ 1058.13732902  1361.47556723  1507.85308567   340.54190513
[[  782.54240648  1306.10019611  1508.05677851   340.74457311
[[ 1158.03812754  1414.89862793  1508.35399122]]
[[  780.03850216  1306.80207523  1508.39253998   340.76300893
[[  777.5526503   1307.51286054  1508.72623788   340.7815483    371.42288956
[[ 1159.32396197  1416.12611774  1508.76405968]]
[[  775.08441455  1308.2318372   1509.05787768   340.80017696
[[ 1454.84557391  1461.84621559  1509.17092164   342.02723642   351.0387132
[[  772.63338386  1308.95833126  1509.38746566   340.81888148
[[ 1152.53158511  1402.08809051  1509.46700674]]
[[  770.19917078  1309.69170735  1509.71500883   340.83764925
[[ 1065.50393172  1364.07882451  1509.86425372   340.5901853    362.09488863
[[ 1440.86807891  1461.05083313  1509.89332919   342.4217308    348.56870773
[[  767.78140994  1310.43136648  1510.04051491   340.85646842
[[  765.3797566   1311.17674399  1510.36399227   340.87532788
[[ 1156.69338644  1412.89984273  1510.40029862]]
[[  762.99388529  1311.92730765  1510.68544992   340.89421719   370.9274328
[[  760.6234886   1312.68255582  1511.00489746   340.9131266    370.84347028
[[ 1072.8402995   1366.62579343  1511.21761258   340.63472408
[[  758.26827601  1313.44201574  1511.32234507   340.93204694
[[ 1437.57089665  1460.68187845  1511.54348047   342.50640166
[[  755.92797278  1314.20524191  1511.63780351   340.95096965
[[  753.60231899  1314.97181459  1511.95128407   340.9698867    370.59040829
[[ 1080.21205221  1369.15151257  1512.10911053   340.67630794
[[  751.29106859  1315.74133834  1512.26279858   340.98879059   370.5058293
[[  748.99562835  1316.51337158  1512.58758725   341.00786079
[[ 1502.98233926  1500.41624459  1512.72333144   327.15117      350.40301108
[[ 1087.68277449  1371.68508419  1512.72570763   340.7165359    360.58400387
[[ 1423.65010415  1458.78933767  1512.8276304    342.64902833
[[ 1499.59300658  1499.30978919  1512.84690653   367.0634516    322.74739467
[[  746.71602696  1317.28779326  1512.92800247   341.02705997
[[ 1095.31438114  1374.24523365  1513.23792991   340.75514346
[[  744.45221984  1318.06452225  1513.28570131   341.04634705
[[  742.20417191  1318.84349456  1513.66246542   341.06568928
[[ 1103.14141052  1376.84072454  1513.74550427   340.7952141    359.48346863
[[  739.97184587  1319.62465724  1514.06014799   341.08506012
[[ 1111.1781827   1379.47146187  1514.27950567   340.83858467
[[  737.75518667  1320.40796006  1514.48059734   341.10443741   369.9982735
[[ 1119.42880924  1382.13334046  1514.83476339   340.88596676
[[  735.55541     1321.19229705  1514.91826412   341.12373182
[[  733.37355848  1321.97643556  1515.36700141   341.14287313
[[ 1127.89610376  1384.8218691   1515.40044161   340.9380717    357.74846562
[[ 1503.63101207  1500.48217102  1515.71733581   328.49659812
[[  731.20922415  1322.76008942  1515.82675217   341.16192663
[[ 1136.58303141  1387.53278885  1515.96446577   340.99605364   357.1531717
[[ 1154.43987041  1414.5188398   1516.09075651]]
[[ 1406.60333009  1455.38387114  1516.12300178   342.90992873
[[  729.06201863  1323.5429164   1516.29720232   341.18091054
[[ 1145.49290943  1390.26222886  1516.51328595   341.06228801
[[  726.93154949  1324.32452307  1516.77772817   341.19981288
[[ 1154.62266822  1393.0033573   1517.04213661   341.13649915
[[ 1410.23557227  1456.21299896  1517.07935922   343.08500148
[[ 1145.64290128  1409.9562345   1517.08430973]]
[[ 1392.79622555  1452.24733206  1517.21297605   342.96971475
[[  724.81736977  1325.10449103  1517.26734717   341.21862156
[[ 1163.96545638  1395.74897885  1517.56238105   341.21281176
[[  722.71897896  1325.88237688  1517.76471706   341.23732465
[[ 1504.182053    1500.53717124  1517.98012704   329.81884199   351.326581
[[ 1173.53585706  1398.50027587  1518.06700809   341.29175585
[[ 1323.59827354  1435.83867914  1518.07696853   343.06203509
[[ 1337.3353898   1439.08168347  1518.14200345   342.7472405    345.73854703
[[  720.6358287   1326.65771498  1518.26816128   341.25591092
[[ 1183.35066541  1401.25829109  1518.53574147   341.37681302   354.0645335
[[ 1310.15902906  1432.72426659  1518.59264191   342.59703399
[[  718.56733354  1327.43002332  1518.77572274   341.27437037
[[ 1193.41771845  1404.0218976   1518.95798364   341.46831536
[[ 1412.92221406  1491.27582327  1518.96023352]]
[[ 1415.3532569   1500.53393225  1519.0502345 ]]
[[ 1297.04244801  1429.67084569  1519.10610636   342.65169449
[[  716.51288638  1328.19881214  1519.28524489   341.29269479
[[ 1379.02126071  1449.17953755  1519.30746985   343.14829495
[[ 1203.74587778  1406.79115418  1519.32333385   341.56651219
[[ 1284.25227621  1426.67354949  1519.4966934    342.40668338
[[ 1214.34504645  1409.56757861  1519.62168473   341.67154915
[[ 1504.6480296   1500.57639508  1519.68747677   331.01470579
[[  778.19049157  2332.71468431  1519.78305929]]
[[ 1271.79816902  1423.73087958  1519.78541157   342.30326078
[[  714.47187739  1328.96359483  1519.79447404   341.3108784    369.04142379
[[ 1225.2260754   1412.35438496  1519.84328229   341.78344632
[[  778.62681275  2331.71475922  1519.84569798]]
[[  779.08136849  2330.67283799  1519.91106366]]
[[ 1351.30624156  1442.67220028  1519.93541803   343.19257845
[[ 1412.4710039   1491.30451453  1519.93923295]]
[[ 1259.67612573  1420.83620198  1519.95647736   342.15659174
[[ 1236.40051027  1415.1566236   1519.97876854   341.90207262
[[  779.55495333  2329.58707307  1519.97928449]]
[[ 1502.75576322  1501.31923005  1520.00111443   348.0560401    354.84123679
[[ 1247.88012225  1417.98113473  1520.0192814    342.02733277
[[  780.04839907  2328.45552877  1520.05049545]]
[[  780.56257673  2327.27617655  1520.12483877]]
[[ 1365.1807651   1446.03563528  1520.15866323   342.91015501
[[  781.09839858  2326.04688994  1520.20246437]]
[[  781.65682039  2324.76543921  1520.28353037]]
[[  712.44371475  1329.72390011  1520.30117319   341.32891827
[[  782.23884372  2323.42948564  1520.36820361]]
[[  782.84551841  2322.03657544  1520.45666023]]
[[  783.47794522  2320.58413331  1520.5490863 ]]
[[  784.13727862  2319.06945554  1520.64567846]]
[[  784.82472975  2317.48970266  1520.74664468]]
[[  710.4278447   1330.47928409  1520.80323483   341.34681456
[[  785.54156962  2315.84189158  1520.85220498]]
[[  786.28913242  2314.12288729  1520.96259236]]
[[ 1505.04762923  1500.60043542  1520.99615838   332.0567085    352.02330018
[[  787.06881914  2312.32939387  1521.07805361]]
[[  787.88210139  2310.457945    1521.19885041]]
[[  708.42376892  1331.22934107  1521.29878021   341.36457052
[[  788.73052544  2308.50489371  1521.32526031]]
[[  789.6157166   2306.46640154  1521.45757798]]
[[  790.53938378  2304.33842683  1521.59611643]]
[[  791.5033245   2302.11671224  1521.74120841]]
[[  706.43105724  1331.97371181  1521.78623479   341.38219221   368.6865124
[[  792.50943009  2299.79677141  1521.89320795]]
[[ 1505.39794825  1500.61295312  1522.02206733   332.95042398   352.2722633
[[  793.55969135  2297.37387459  1522.05249196]]
[[  794.65620452  2294.8430333   1522.21946205]]
[[  704.44935482  1332.71208873  1522.26437375   341.39968798
[[  795.80117773  2292.19898389  1522.39454655]]
[[  796.99693783  2289.43616984  1522.57820256]]
[[  702.47838353  1333.44421768  1522.73233681   341.41706776
[[  798.24593768  2286.54872289  1522.77091844]]
[[ 1505.71184652  1500.61695117  1522.84450582   333.71247878
[[  799.55076403  2283.53044261  1522.9732163 ]]
[[  800.91414579  2280.37477471  1523.18565491]]
[[  700.51793834  1334.16989666  1523.18961539   341.43434236
[[  802.33896306  2277.07478753  1523.40883281]]
[[  698.56787985  1334.88897202  1523.63601885   341.45152268
[[  803.82825657  2273.623147    1523.64339177]]
[[ 1503.07895118  1499.88414489  1523.83759454   345.92553228
[[  805.38523793  2270.01208963  1523.89002061]]
[[  696.62812435  1335.60133296  1524.07162722   341.46861906
[[  807.01330048  2266.23339361  1524.14945939]]
[[  808.71603093  2262.27834781  1524.42250406]]
[[ 1147.943587    1401.88292934  1524.42900795]]
[[  694.69863294  1336.30690501  1524.49673792   341.48564081
[[  810.4972217   2258.13771855  1524.7100116 ]]
[[  692.77940056  1337.00564334  1524.91181234   341.50259582
[[  812.36088417  2253.80171399  1525.01290576]]
[[  690.87044603  1337.6975262   1525.31742663   341.51949041
[[  814.31126269  2249.25994604  1525.33218334]]
[[ 1144.44479611  1399.31430238  1525.44098366]]
[[  816.35284959  2244.50138974  1525.66892126]]
[[  688.97180328  1338.38254909  1525.71422911   341.53632924
[[  581.54982482  2058.4686477   1525.78918294]]
[[  581.04433435  2056.83624273  1525.82593032]]
[[  582.12014157  2057.4964853   1525.84805032]]
[[  581.62156979  2055.85681209  1525.88548214]]
[[  582.73496513  2056.4475405   1525.91167011]]
[[  582.24372812  2054.80023554  1525.94982996]]
[[  583.39782315  2055.31562398  1525.98044118]]
[[  582.91436054  2053.66030981  1526.01937554]]
[[  818.49040106  2239.51433978  1526.02428441]]
[[  584.11253374  2054.09402931  1526.05479807]]
[[  583.63730984  2052.43031433  1526.09455656]]
[[  687.08351418  1339.06071957  1526.10290541   341.55311539
[[  584.88323152  2052.77548718  1526.13521459]]
[[  584.41673657  2051.10296556  1526.17585017]]
[[  585.71439649  2051.35211536  1526.22220761]]
[[  585.25714783  2049.67036703  1526.26377691]]
[[  586.6108859   2049.81536386  1526.31634149]]
[[  586.1634293   2048.12395452  1526.35890504]]
[[  820.72895396  2234.28636433  1526.39953439]]
[[  587.57796984  2048.15595478  1526.41823283]]
[[  587.1408807   2046.45443606  1526.46185542]]
[[  685.20522611  1339.73214618  1526.48028096   341.56980953
[[  588.62137079  2046.36381648  1526.52855583]]
[[  588.19525543  2044.65172605  1526.57330689]]
[[  589.74730787  2044.42801126  1526.64804829]]
[[ 1503.16087309  1498.14390639  1526.66239432   344.1705649    352.938582
[[  589.33280478  2042.70487317  1526.69400229]]
[[  590.96254648  2042.33665613  1526.77751828]]
[[  823.07384377  2228.804256    1526.79603923]]
[[  590.56032749  2040.60198119  1526.82475513]]
[[  683.33666272  1340.39710355  1526.84291075   341.58637457
[[  592.27445413  2040.0768359   1526.91785153]]
[[  591.88522558  2038.33012217  1526.96645716]]
[[  593.69106354  2037.63450789  1527.07001976]]
[[  593.3155673   2035.87524139  1527.12008662]]
[[  681.47821267  1341.05582691  1527.19315009   341.60283957
[[  825.53072339  2223.05397986  1527.21528439]]
[[  595.22114413  2034.99439755  1527.23508999]]
[[  594.86015849  2033.22205304  1527.28671769]]
[[  596.87428341  2032.13988412  1527.41423488]]
[[  596.52862377  2030.35392616  1527.4675309 ]]
[[  679.6301814   1341.70851144  1527.53291187   341.61922294
[[  598.66098003  2029.05287562  1527.6087444 ]]
[[  828.10558305  2217.02061869  1527.65888494]]
[[  598.33149932  2027.2527598   1527.66382486]]
[[  600.59275056  2025.71367238  1527.82003878]]
[[  677.79278489  1342.35548487  1527.86384722   341.6355429    367.4032761
[[  600.28033929  2023.89884683  1527.87702931]]
[[  602.68225264  2022.10081837  1528.04968313]]
[[  602.38783852  2020.27072562  1528.10871984]]
[[  830.80477129  2210.68831553  1528.12859937]]
[[  675.96609045  1342.99774836  1528.18771073   341.65184261
[[  604.94342764  2018.19093976  1528.29940365]]
[[  604.6679746   2016.34501892  1528.36063425]]
[[  674.15021937  1343.63536337  1528.50542568   341.66811598
[[  607.39166681  2013.95857032  1528.57110587]]
[[  833.63501681  2204.04021372  1528.62634501]]
[[  607.1361732   2012.09625976  1528.63469085]]
[[ 1503.09240808  1496.29238075  1528.81662712   342.75823529
[[  672.34526133  1344.26837823  1528.81774626   341.68435583
[[  610.0440055   2009.37596356  1528.866895  ]]
[[  609.80950139  2007.49670414  1528.93300899]]
[[  670.5512805   1344.89683094  1529.12528933   341.70055444
[[  836.60345152  2197.05839495  1529.15421554]]
[[  612.91935167  2004.41289214  1529.18909854]]
[[  612.70689491  2002.5161311   1529.25793182]]
[[  668.76832038  1345.52075149  1529.42856013   341.71670404
[[  616.03875582  1999.03643561  1529.54029158]]
[[  615.8494265   1997.12163133  1529.6120517 ]]
[[  839.71763432  2189.72381566  1529.71450071]]
[[  666.99640779  1346.14016375  1529.72797305   341.73279704
[[  619.42573166  1993.21075872  1529.92332474]]
[[  619.26062472  1991.27738649  1529.99823834]]
[[  665.23555606  1346.75508689  1530.02386841   341.74882627
[[  842.98557596  2182.01624286  1530.30970868]]
[[  663.48576764  1347.36553669  1530.31652614   341.76478506
[[  623.10663896  1986.89688407  1530.34135517]]
[[  622.96685431  1984.94444321  1530.4196699 ]]
[[ 1502.95989638  1494.52350876  1530.52904884   341.61431052
[[  661.74703617  1347.97152645  1530.60617683   341.78066732
[[  627.11114306  1980.05246481  1530.79788065]]
[[  626.99777269  1978.0804874   1530.87986723]]
[[  660.01934824  1348.5730678   1530.89301075   341.79646753
[[  846.41576465  2173.9141903   1530.9425915 ]]
[[  658.30268474  1349.1701713   1531.17718517   341.81218082
[[ 1144.99578713  1401.63544761  1531.27122357]]
[[  631.47276913  1972.63156619  1531.29677686]]
[[  631.38688049  1970.63962794  1531.38273122]]
[[  656.59702198  1349.76284694  1531.45883036   341.82780283   366.4991485
[[  850.01719255  2165.39485661  1531.61617409]]
[[  654.90233261  1350.35110454  1531.73805439   341.84332979
[[  636.22957426  1964.5844686   1531.84233802]]
[[  636.17218891  1962.57220237  1531.93258342]]
[[ 1502.78924037  1492.85446847  1531.94260574   340.68173376
[[  653.21858637  1350.93495403  1532.0149472    341.85875842   366.3597758
[[  651.54575065  1351.51440569  1532.28958378   341.87408591
[[  853.79938295  2156.43406743  1532.33378749]]
[[  641.42496644  1955.85751041  1532.4393206 ]]
[[  641.3970329   1953.82462313  1532.53420963]]
[[  649.88379099  1352.08947031  1532.56202685   341.88930987
[[  648.23267145  1352.66015933  1532.83232905   341.90442828
[[  647.1087073   1946.39299613  1533.09299012]]
[[  857.77241838  2147.00622424  1533.09910702]]
[[  646.59235497  1353.22648495  1533.10053473   341.9194395    366.08980517
[[  647.1110668   1944.33929008  1533.19290639]]
[[  644.96280355  1353.78846015  1533.36668137   341.93434217
[[  643.34397852  1354.34609874  1533.63080085   341.9491352    365.95901451
[[  653.33814592  1936.12920567  1533.80917065]]
[[  641.73584063  1354.89941542  1533.8929204    341.96381776
[[  653.37148912  1934.05460542  1533.91452978]]
[[  861.94696963  2137.0842634   1533.9161964 ]]
[[  640.13835025  1355.4484257   1534.1530634    341.97838921   365.8309026
[[ 1502.40472304  1489.74075665  1534.35606668   339.15231198
[[  638.5514673   1355.99314578  1534.41124965   341.99284907
[[  660.17974352  1925.0005538   1534.59429688]]
[[  636.97515124  1356.53359212  1534.66749527   342.00719684
[[  660.2445564   1922.90514017  1534.7055465 ]]
[[  866.3343262   2126.63963007  1534.78955897]]
[[  635.40919345  1357.07028583  1534.92317036   342.02143906
[[ 1344.60031087  1505.49054513  1534.95134883]]
[[  633.8534175   1357.603491    1535.17881282   342.03557663
[[  632.30772231  1358.13318536  1535.43414282   342.04960644
[[  667.7109659   1912.93796666  1535.45546887]]
[[  667.80746216  1910.82201995  1535.57308668]]
[[  630.77201721  1358.65935402  1535.68892802   342.06352642
[[  870.94642864  2115.64227275  1535.72419755]]
[[  629.24622013  1359.1819884   1535.94297561   342.07733526
[[  627.73025624  1359.70108527  1536.19612562   342.09103229
[[ 1501.96981354  1487.01066704  1536.22137624   338.14364382
[[ 1146.67644443  1410.90911542  1536.33229512]]
[[  676.02264179  1899.86956587  1536.40051068]]
[[  626.22405667  1360.21664599  1536.44824543   342.10461729
[[  676.15067866  1897.73362063  1536.52499973]]
[[  624.72755756  1360.72867577  1536.69922521   342.1180904    365.22817689
[[  875.79590429  2104.06066613  1536.7256848 ]]
[[  623.24069917  1361.2371832   1536.94897408   342.13145202
[[ 1501.45708315  1496.21577326  1536.98518158   359.1925095    321.17714137
[[  621.76342523  1361.7421797   1537.19741703   342.14470274
[[  685.22191244  1885.72178137  1537.43803658]]
[[  620.29396275  1362.24738417  1537.45163629   342.15777584
[[  685.38088645  1883.56669583  1537.56991606]]
[[  618.82768231  1362.76211052  1537.72881631   342.17050364
[[ 1501.51477377  1484.57772627  1537.78044566   337.46284268
[[  880.89610808  2091.86187168  1537.80024657]]
[[  617.36353134  1363.28639023  1538.02666024   342.18288761
[[ 1140.39089635  1396.21502041  1538.32635698]]
[[  615.90054968  1363.82031925  1538.34328348   342.19493359
[[  695.43593331  1870.42105387  1538.57753432]]
[[  614.43785194  1364.36405512  1538.67715912   342.20665053
[[  695.6246515   1868.24809781  1538.71732352]]
[[  886.26117186  2079.01164817  1538.95486144]]
[[ 1418.92249808  1502.87746376  1538.98981112]]
[[  612.97461208  1364.91781518  1539.0270722    342.21804932
[[ 1338.9287582   1484.69217022  1539.07580827]]
[[  611.51004987  1365.4818758   1539.39208168   342.22914201
[[ 1144.83899583  1408.99906263  1539.63344322]]
[[ 1411.92950384  1500.66406213  1539.7419015 ]]
[[  610.04341886  1366.05657267  1539.77148915   342.23994114
[[  706.8165325   1853.89633901  1539.82948694]]
[[ 1145.57042909  1410.34328332  1539.91330491]]
[[  707.03305435  1851.70730431  1539.97767869]]
[[  608.5739955   1366.64230207  1540.16481347   342.25045921
[[  891.90606712  2065.47462709  1540.19738049]]
[[ 1500.59058535  1480.19133941  1540.52225559   336.53503075
[[  607.1010693   1367.23952325  1540.57177077   342.26070832
[[  605.62393362  1367.84876185  1540.99225906   342.27069982
[[ 1338.22371281  1484.83031986  1541.03037   ]]
[[  719.54608693  1836.08269055  1541.20557979]]
[[ 1143.37507655  1407.1175339   1541.25273586]]
[[  719.78753156  1833.88002952  1541.36259779]]
[[  604.14187695  1368.47061453  1541.4263473    342.28044412
[[  897.84668879  2051.21457185  1541.5366726 ]]
[[  602.65417445  1369.10575488  1541.87426848   342.28995049
[[  601.16007954  1369.75494077  1542.33641656   342.29922691
[[  733.84494506  1816.9262834   1542.71909277]]
[[  599.6588154   1370.41902338  1542.81334733   342.30827994   364.3656375
[[ 1499.66621979  1476.56483502  1542.83175297   336.17515174
[[  734.10725857  1814.71328016  1542.88522396]]
[[ 1418.4606221   1502.41671828  1542.92722714]]
[[  904.09997155  2036.19474393  1542.98280221]]
[[  598.14956601  1371.09895817  1543.30578307   342.31711464
[[ 1414.15712453  1498.88840243  1543.79533311]]
[[  596.63146668  1371.79581808  1543.81462151   342.32573443
[[ 1503.37951822  1526.81215992  1544.16191624   345.50515714
[[  595.10359371  1372.51080938  1544.34094883   342.33414009
[[  749.98080478  1796.39134484  1544.38569006]]
[[  910.6840556   2020.37840435  1544.54724815]]
[[  750.25848394  1794.17232543  1544.5609775 ]]
[[ 1397.68817785  1508.81817231  1544.57848757]]
[[ 1397.8001583   1509.28338767  1544.66204446]]
[[  593.56495285  1373.24529117  1544.88605909   342.34233163
[[ 1500.0724262   1493.88026523  1544.9373673    352.18515145
[[  592.01446631  1374.00079853  1545.45147831   342.35030699
[[ 1132.91654447  1404.51273289  1545.95082263]]
[[  590.45095783  1374.77907073  1546.03899601   342.35806191
[[  768.28053571  1774.46960435  1546.22506103]]
[[  917.6185265   2003.72948478  1546.24317444]]
[[  768.56630865  1772.25019084  1546.40913278]]
[[  588.87313538  1375.58208553  1546.65070544   342.36558966
[[ 1497.81641027  1470.19785601  1546.97585908   335.97109858
[[  587.27957075  1376.41210129  1547.28905423   342.37288075
[[  585.66867532  1377.27170864  1547.95690831   342.37992259
[[  924.92476441  1986.2134694   1548.08576632]]
[[ 1140.36074644  1408.59205893  1548.14003216]]
[[  789.14498346  1751.19306753  1548.26438863]]
[[  789.42945893  1748.98048095  1548.45617936]]
[[  584.0386709   1378.16389453  1548.65763229   342.38669899
[[ 1405.35096351  1506.05919316  1549.11546721]]
[[  582.38755456  1379.09212185  1549.39519089   342.39318961
[[ 1502.22161941  1535.21330896  1549.63561254   338.27602615
[[ 1287.82114187  1515.01515268  1549.96925319]]
[[  932.62645281  1967.79853599  1550.09264664]]
[[  580.71305554  1380.06042917  1550.17427718   342.39936915
[[  813.06720896  1726.65119584  1550.54572991]]
[[ 1496.07108128  1465.23273524  1550.74169118   336.23817492
[[  813.3385298   1724.454613    1550.74301751]]
[[  579.01258242  1381.07355614  1551.00047501   342.40520645
[[  577.28315777  1382.13710188  1551.88046483   342.41066325
[[  940.7503165   1948.45701214  1552.28438836]]
[[  575.52133716  1383.25772507  1552.82228408   342.41569272
[[  840.65411442  1701.01395058  1553.14156422]]
[[  840.89770427  1698.8449238   1553.34018601]]
[[ 1500.60298965  1543.20192233  1553.51169515   333.33977404
[[  573.72310867  1384.44339608  1553.83565351   342.42023756
[[  949.32718492  1928.16720984  1554.68513626]]
[[  571.88392152  1385.70405287  1554.9332704    342.42422003
[[ 1133.74044341  1395.82516179  1555.22038406]]
[[  569.99820779  1387.05136676  1556.12955881   342.42755361
[[  872.64971616  1674.56250156  1556.18604684]]
[[ 1130.59541467  1392.91391372  1556.24146715]]
[[  872.8483219   1672.43546813  1556.37859836]]
[[  958.39351044  1906.91570765  1557.32334077]]
[[  568.05937378  1388.49944507  1557.44198274   342.43013429
[[ 1492.71039558  1456.98559901  1558.03699938   336.90257852
[[ 1494.32507096  1487.88841129  1558.55962514   342.0834431    324.10662046
[[  566.05962469  1390.06525867  1558.89147895   342.43183869
[[ 1496.79465733  1558.26361307  1559.5894621    327.53956274
[[  909.95346859  1647.72879135  1559.93012201]]
[[  910.08793459  1645.66175731  1560.10401913]]
[[  967.99351335  1884.7001521   1560.2325828 ]]
[[  563.99630227  1391.75098158  1560.44721919   342.43264108
[[ 1279.28581487  1481.7321721   1561.55485573]]
[[  561.90488933  1393.45389289  1561.7660745    342.43325665
[[  559.79112665  1395.17561993  1562.89516188   342.43396054
[[  978.18217596  1861.53264759  1563.45241768]]
[[ 1129.8467167   1395.12096691  1563.81101508]]
[[  557.65950399  1396.91766658  1563.87212697   342.43492564
[[ 1278.47980583  1482.03638204  1564.36109356]]
[[  555.51350515  1398.68148117  1564.72718064   342.43625322
[[  953.6148251   1621.13983999  1564.80708678]]
[[  953.66646082  1619.15547751  1564.94259651]]
[[  553.35580109  1400.46851068  1565.48468032   342.43799476
[[  551.18839906  1402.28024167  1566.16435875   342.44016583   363.2780827
[[ 1243.15068766  1528.72075148  1566.26746263]]
[[  549.0127606   1404.11823999  1566.78229638   342.44275728
[[  989.02936631  1837.44379164  1567.02906578]]
[[  546.82989243  1405.98418746  1567.35169037   342.44574284   363.1830919
[[  544.64041581  1407.8799191   1567.88346903   342.44908442
[[  542.44601914  1409.80371615  1568.38217375   342.45279829   363.087336
[[  540.2530637   1411.74050043  1568.83504304   342.45711196
[[ 1487.83496943  1585.18325835  1569.22744748   326.46725087
[[  538.06237952  1413.69051473  1569.25031352   342.46197586
[[  535.87459707  1415.65394458  1569.63467      342.46734003
[[  533.69018589  1417.63091654  1569.99354415   342.47315572
[[ 1365.39516913  1511.68174765  1570.17298848]]
[[  531.50948574  1419.62149522  1570.33135424   342.47937645
[[  529.33273171  1421.62567916  1570.65169778   342.48595878   362.7988665
[[  527.16007467  1423.64339586  1570.95750669   342.49286272
[[ 1000.62543502  1812.48738452  1571.01558806]]
[[  524.99159786  1425.67449607  1571.2511725    342.50005203
[[ 1130.22081912  1404.14513453  1571.2753292 ]]
[[ 1004.76158275  1595.6421954   1571.39289364]]
[[ 1004.71747925  1593.76988053  1571.46403854]]
[[ 1484.00340979  1480.31615655  1571.47249691   341.79706627
[[  522.82733051  1427.71874732  1571.53464736   342.50749433
[[ 1124.92933293  1389.0717911   1571.58599786]]
[[  520.66725899  1429.77582703  1571.80952572   342.51516109
[[ 1352.37203673  1512.69119138  1572.05297212]]
[[  518.51133612  1431.84531516  1572.0771104    342.52302765
[[  516.35948886  1433.9266867   1572.33846599   342.5310731    362.52177591
[[ 1486.28780609  1444.64863842  1572.55871252   338.16687112
[[  514.21162488  1436.01930408  1572.59446222   342.53928014   362.4770939
[[  512.06763812  1438.12240981  1572.84580888   342.54763495   362.4328204
[[  509.92741362  1440.23511962  1573.0930843    342.55612702
[[  507.79083181  1442.35641634  1573.33675833   342.56474894
[[  505.65777225  1444.48514491  1573.57721096   342.57349626
[[  503.52811718  1446.62000895  1573.81474756   342.58236718
[[  501.40174439  1448.7597462   1574.04958695   342.59136872
[[  499.27852766  1450.90338454  1574.28186561   342.60052421   362.1743995
[[  497.1583898   1453.04918617  1574.51178421   342.60983425
[[  495.0412663   1455.19527935  1574.73949414   342.61930156   362.0903776
[[  492.92710819  1457.33966854  1574.9651055    342.62893061
[[  490.81588489  1459.48024828  1575.18869396   342.63872725   362.006909
[[  488.7075867   1461.61482108  1575.41030668   342.64869829
[[ 1013.08869452  1786.745789    1575.47083352]]
[[ 1128.6596718   1403.31363173  1575.54223244]]
[[  486.60222732  1463.74111914  1575.62996745   342.65885108
[[ 1128.21473269  1401.74427093  1575.66472262]]
[[  484.49984604  1465.85682977  1575.8476814    342.66919309
[[  482.40050966  1467.95962397  1576.06343915   342.67973147
[[  480.30431419  1470.04718752  1576.27722076   342.69047262
[[ 1126.74433263  1400.05202995  1576.48891176]]
[[  478.21138607  1472.1172537   1576.48899921   342.70142184
[[  476.12188299  1474.16763641  1576.69874372   342.7125829    361.71405049
[[  474.03599418  1476.19626266  1576.90642268   342.72395778
[[  471.95394021  1478.20120302  1577.1120062    342.73554641
[[  469.87597211  1480.18069882  1577.31546835   342.74734647
[[  467.80237     1482.13318508  1577.51678892   342.75935332
[[ 1477.17542945  1607.65070209  1577.54247792   327.25271951
[[  465.73344105  1484.05730806  1577.71595469   342.77155995
[[  463.66951697  1485.95193701  1577.91296026   342.78395709
[[  461.61095101  1487.81616977  1578.10780842   342.79653328
[[  459.55811738  1489.6493145   1578.30051849   342.80927402
[[ 1299.68660465  1519.79847794  1578.42029323]]
[[  457.51140636  1491.45088555  1578.49112251   342.82216218
[[ 1299.87909765  1520.68708617  1578.5624267 ]]
[[  455.47121919  1493.22067951  1578.67962815   342.83518881
[[ 1344.7139816   1506.21988227  1578.73396749]]
[[  453.43796156  1494.95867274  1578.866055     342.84834034
[[  451.41203735  1496.66499258  1579.05043648   342.86159708
[[ 1116.63697127  1397.79880858  1579.189482  ]]
[[ 1352.10662154  1512.57938109  1579.20146884]]
[[  449.39385027  1498.33992033  1579.23281014   342.87493914
[[  447.38381696  1499.98393306  1579.41332459   342.88834663
[[  445.38233399  1501.59756982  1579.59203278   342.90180017
[[  443.38978244  1503.18143337  1579.76894688   342.91528112
[[ 1064.26799511  1570.51286785  1579.87075366]]
[[ 1064.40593645  1572.23348933  1579.88635562]]
[[  441.40653249  1504.73619334  1579.94408317   342.92877163
[[  439.43280294  1506.26189243  1580.11537231   342.9421848    360.92535772
[[  437.4688015   1507.75846792  1580.28054583   342.95542478
[[  435.514954    1509.22681065  1580.44048948   342.96849776
[[ 1026.57526046  1760.33582226  1580.45580556]]
[[  433.57165221  1510.66780646  1580.59593182   342.98140848
[[  431.63925648  1512.0823277   1580.74747173   342.99416052
[[  429.71809824  1513.4712268   1580.89560115   343.00675666
[[  427.80848217  1514.83533167  1581.04072382   343.0191991    360.66440065
[[  425.91068813  1516.17544262  1581.18317086   343.0314896    360.62188887
[[  424.02497304  1517.49233052  1581.32321357   343.04362967
[[  422.15157244  1518.786736    1581.4610741    343.05562058
[[  420.29070202  1520.0593693   1581.59693419   343.06746353
[[  418.44255896  1521.3109107   1581.73094248   343.07915962
[[  416.60732319  1522.54201131  1581.86322047   343.09070994
[[  414.78515844  1523.75329397  1581.99386745   343.10211555
[[  412.97621335  1524.94535446  1582.12296464   343.11337755
[[  411.18062233  1526.11876263  1582.2505784    343.12449702
[[  409.39851559  1527.27409756  1582.37682723   343.13547447
[[  407.63000145  1528.41188357  1582.5017522    343.146311     360.21878061
[[  405.87517458  1529.53261587  1582.62537508   343.15700789
[[  404.13411881  1530.63676849  1582.74771376   343.16756645
[[  402.40690762  1531.72479531  1582.86878358   343.17798801
[[  400.69360467  1532.797131    1582.98859765   343.18827393
[[  398.99426428  1533.85419186  1583.10716731   343.19842561
[[  397.30893192  1534.89637667  1583.22450255   343.20844444
[[  395.63764462  1535.92406751  1583.34061226   343.21833187
[[  393.98043143  1536.93763054  1583.45550451   343.22808932   359.9287459
[[ 1400.34908898  1505.87064599  1583.56114074]]
[[  392.33731376  1537.93741671  1583.56918678   343.23771826
[[  390.70830583  1538.92376251  1583.68166606   343.24722016
[[  389.09341495  1539.89699059  1583.79294907   343.25659649
[[  387.49264312  1540.85741341  1583.90304854   343.26584874   359.7948264
[[  385.90598513  1541.80532851  1584.01197134   343.27497839
[[  384.33342942  1542.74102033  1584.11972181   343.28398693
[[ 1471.03213473  1472.92040556  1584.17270936   337.02829256
[[ 1122.85043628  1401.32145548  1584.20305301]]
[[  382.77495893  1543.66476192  1584.22630472   343.29287585
[[  381.23055138  1544.57681554  1584.33172527   343.30164674
[[ 1335.98942888  1509.70447969  1584.34453494]]
[[  379.70017948  1545.47743311  1584.43598898   343.31030107
[[  378.18381122  1546.3668567   1584.53910176   343.31884031
[[  376.68141013  1547.245319    1584.64106979   343.32726591
[[  375.19293549  1548.11304374  1584.74189957   343.33557934
[[  373.71834232  1548.97024488  1584.8415982    343.34378175
[[  372.25758206  1549.81712926  1584.94017278   343.35187455
[[  370.81060265  1550.65389638  1585.03763051   343.35985922
[[  369.37734868  1551.48073834  1585.13397882   343.36773724
[[  367.95776152  1552.2978402   1585.22922538   343.37551006
[[ 1208.14197778  1546.21246137  1585.31223211]]
[[  366.55177954  1553.10538028  1585.32337805   343.38317912
[[  365.15933829  1553.90353046  1585.4164449    343.39074584
[[  363.78037063  1554.69245654  1585.50843418   343.39821164
[[  362.41480693  1555.47231849  1585.5993543    343.40557788
[[  361.06257521  1556.24327072  1585.68921384   343.41284595
[[  359.7236013   1557.00546233  1585.77802154   343.4200172    359.25184867
[[  358.39780895  1557.7590374   1585.86578627   343.42709297
[[  357.08511999  1558.5041352   1585.95251702   343.43407456
[[ 1041.291839    1733.41490476  1586.02494322]]
[[  355.78545498  1559.24090567  1586.03822702   343.4409632    359.17875387
[[  354.49873538  1559.9695604   1586.12294781   343.44775974
[[ 1466.10580741  1627.36704562  1586.15555452   327.50718442
[[  353.22487688  1560.69021768  1586.2066838    343.4544655    359.13174477
[[  351.96379388  1561.40299242  1586.28944035   343.46108183
[[  350.71539958  1562.10799628  1586.37122361   343.46761002
[[  349.47960607  1562.80533779  1586.45204042   343.47405135
[[ 1232.38482635  1482.29104311  1586.48918492]]
[[  348.25632441  1563.4951225   1586.53189813   343.48040707
[[  347.04546472  1564.17745309  1586.61080458   343.48667841
[[  345.84693622  1564.85242953  1586.68876795   343.49286659
[[  344.66064738  1565.52014913  1586.76579678   343.4989728    358.97742043
[[  343.4865059   1566.1807067   1586.84189983   343.5049982    358.95660051
[[  342.32441667  1566.83415933  1586.91706728   343.51094433
[[  341.17428671  1567.48059939  1586.9913115    343.51681229
[[  340.03602255  1568.12011814  1587.06464515   343.52260314
[[  338.90953016  1568.75280449  1587.13708038   343.52831794
[[  337.79471503  1569.37874502  1587.2086289    343.53395771
[[  336.69148227  1569.99802414  1587.27930211   343.5395235    358.83761101
[[  335.59973661  1570.61072417  1587.34911109   343.54501629
[[ 1329.60746791  1518.49657446  1587.41178673]]
[[  334.51938255  1571.21692546  1587.41806668   343.55043709
[[  333.45032587  1571.81670801  1587.48620056   343.55578789
[[  332.39247281  1572.41015071  1587.55355437   343.56107121
[[ 1480.02091888  1436.35382276  1587.57546485   339.01385686
[[  331.34572627  1572.99732752  1587.62012728   343.56628769
[[  330.30998932  1573.5783109   1587.68592028   343.57143807
[[  329.2851652   1574.15317188  1587.7509361    343.57652301
[[  328.27115728  1574.72198015  1587.81517872   343.58154318
[[  327.26786914  1575.28480402  1587.87865316   343.58649929
[[  326.27520456  1575.84171047  1587.94136527   343.59139202
[[ 1132.98377798  1550.28038223  1588.43701888]]
[[ 1133.18992249  1551.79528477  1588.5379308 ]]
[[ 1116.37804604  1388.58848116  1588.98376805]]
[[ 1231.55461574  1482.74248347  1589.79040422]]
[[ 1113.26660227  1385.20541305  1590.53146594]]
[[ 1211.25448584  1533.45540969  1591.24451355]]
[[ 1211.48107426  1534.69579362  1591.39398901]]
[[ 1057.51228153  1706.18694173  1592.20778461]]
[[ 1418.80650565  1500.91721767  1594.63038701]]
[[ 1455.05773305  1645.19241609  1595.42403564   328.09434112
[[ 1458.03364868  1466.23682943  1597.27785253   335.55909835
[[ 1111.43784558  1387.33430368  1598.70789894]]
[[ 1075.59940358  1678.9070609   1598.97301868]]
[[ 1297.79598553  1526.37004212  1600.52650313]]
[[ 1299.34548454  1528.6160982   1600.80635634]]
[[ 1305.1587956   1518.26345918  1602.91537626]]
[[ 1473.7099345   1429.96214377  1603.00513817   339.65499138
[[ 1443.94115133  1661.68371997  1605.06833294   328.41753933
[[ 1096.03546283  1651.88396267  1606.16132802]]
[[ 1290.23175119  1520.5091973   1606.43198048]]
[[ 1105.98927311  1380.57290788  1607.04842005]]
[[ 1180.48042642  1567.18906892  1607.48996141]]
[[ 1110.3647614   1395.95986812  1608.06392443]]
[[ 1445.03487479  1460.13336907  1609.77540467   333.40744817
[[ 1269.5404829   1535.16099745  1609.81370491]]
[[ 1299.64012113  1529.33179321  1609.98340723]]
[[ 1400.08267538  1509.72958888  1610.33999187]]
[[ 1195.45948993  1485.26431999  1612.1750047 ]]
[[ 1108.3559381   1394.828355    1612.55436336]]
[[ 1106.65031666  1391.54818116  1613.15446684]]
[[ 1119.46963443  1625.47868629  1613.36495994]]
[[ 1107.9427204   1392.92787886  1613.36896243]]
[[ 1407.40157045  1513.42213618  1613.58780932]]
[[ 1096.77422023  1389.75310605  1614.43196305]]
[[ 1432.6482847   1677.08804331  1614.95886947   328.70111546
[[ 1194.63113868  1485.76678607  1615.34554786]]
[[ 1402.95305786  1505.00135151  1615.67134922]]
[[ 1406.7758163   1514.22547738  1615.95275752]]
[[ 1277.48572993  1528.20185802  1618.42306668]]
[[ 1467.50144246  1425.25714985  1619.60620797   340.12747661   345.5069347
[[ 1146.80245274  1600.10033758  1619.72001569]]
[[ 1101.9768733   1392.6046749   1620.72226166]]
[[ 1431.96960054  1454.43290737  1621.7943825    332.22079062
[[ 1219.16806739  1554.3249696   1621.89283856]]
[[ 1096.19648858  1380.26232668  1622.50700023]]
[[  602.56002095  1944.4346573   1623.54394084]]
[[ 1179.35072715  1576.20566103  1623.56196621]]
[[  603.11668723  1943.4645869   1623.72376598]]
[[  603.70865925  1942.4324549   1623.91537364]]
[[  604.33818079  1941.33426507  1624.11955926]]
[[  605.00763943  1940.1657618   1624.33717476]]
[[  605.71957609  1938.92241326  1624.5691329 ]]
[[  606.47669521  1937.59939353  1624.81641198]]
[[ 1421.12939144  1691.54053361  1624.97411955   328.93303894
[[ 1092.81185586  1376.29433223  1625.02529016]]
[[  607.28187564  1936.19156365  1625.08006089]]
[[  608.13818248  1934.69345151  1625.36120466]]
[[  609.04887968  1933.09923061  1625.66105041]]
[[  610.01744373  1931.40269762  1625.98089386]]
[[ 1257.3612035   1549.15308837  1626.08764635]]
[[  611.04757838  1929.59724871  1626.32212632]]
[[  612.14323061  1927.67585466  1626.68624237]]
[[  613.30860796  1925.63103482  1627.07484812]]
[[  614.54819736  1923.45482979  1627.48967019]]
[[  615.86678563  1921.13877311  1627.9325654 ]]
[[  617.26948196  1918.67386184  1628.40553139]]
[[ 1247.54438533  1539.55383099  1628.41632838]]
[[  618.76174254  1916.05052643  1628.91071797]]
[[  620.34939762  1913.25859979  1629.45043948]]
[[  622.03868154  1910.2872862   1630.0271881 ]]
[[  623.83626587  1907.12513018  1630.64364827]]
[[ 1252.67060126  1539.16717519  1630.79869787]]
[[  625.74929645  1903.75998598  1631.30271209]]
[[ 1158.23054978  1591.27530472  1631.84614393]]
[[ 1090.43362338  1378.46460399  1631.97512102]]
[[  627.78543481  1900.17898831  1632.00749596]]
[[  629.9529047   1896.36852521  1632.76135836]]
[[ 1419.15722908  1449.2280905   1633.56314406   331.36581203
[[  632.26054463  1892.31421405  1633.56791874]]
[[ 1388.27336803  1509.69971434  1633.98868471]]
[[  634.71786757  1888.00088215  1634.43107772]]
[[ 1409.37059514  1705.13082878  1634.97825718   329.13480413
[[  637.33512897  1883.4125536   1635.35503831]]
[[ 1165.84985778  1489.21413225  1635.45264904]]
[[ 1258.26643143  1550.77634564  1635.82703173]]
[[  640.1234048   1878.53244458  1636.34432824]]
[[ 1461.22412892  1421.68319852  1636.96110074   340.50735407
[[  643.09468138  1873.34296951  1637.40382333]]
[[ 1165.04368556  1489.66158218  1637.82737995]]
[[  646.26195941  1867.82576157  1638.53877149]]
[[  649.63937491  1861.96171135  1639.75481746]]
[[ 1084.47759621  1371.03413717  1640.28879993]]
[[  653.2423405   1855.73102846  1641.0580278 ]]
[[ 1088.03781437  1386.57178196  1641.71753762]]
[[  657.08771097  1849.11333189  1642.45491586]]
[[  661.1939783   1842.08777618  1643.95246641]]
[[ 1153.711672    1491.12651921  1644.50019227]]
[[  640.05375415  1923.2655152   1644.52108622]]
[[  640.62661039  1922.31222263  1644.70222732]]
[[ 1397.33240502  1717.91985635  1644.87631871   329.30894553
[[  641.23719022  1921.29589559  1644.89556817]]
[[  641.88798671  1920.21235259  1645.10194892]]
[[ 1406.73611405  1444.56339714  1645.23372768   330.84462009
[[  642.58165964  1919.05713433  1645.32226992]]
[[  643.32104707  1917.82548547  1645.55749622]]
[[  665.58150177  1834.63322173  1645.55815964]]
[[ 1085.7662668   1385.17465146  1645.68572991]]
[[  644.10917782  1916.51233533  1645.80866261]]
[[ 1213.62798884  1561.4831053   1645.86412395]]
[[  644.94928489  1915.11227742  1646.0768789 ]]
[[ 1084.22645033  1381.93180197  1646.13937721]]
[[ 1152.93745521  1491.5336433   1646.31854576]]
[[  645.84481996  1913.61954782  1646.36333576]]
[[  646.79946908  1912.02800232  1646.66931098]]
[[  647.81716968  1910.33109243  1646.99617631]]
[[ 1074.40515793  1380.72566656  1647.10014844]]
[[ 1085.17177138  1382.85395015  1647.2488958 ]]
[[  670.27278048  1826.72845912  1647.27999428]]
[[  648.90212904  1908.52184008  1647.34540479]]
[[  650.05884433  1906.59281121  1647.71857872]]
[[ 1223.81747085  1572.79348233  1648.02220519]]
[[  651.29212456  1904.53608821  1648.11739833]]
[[  652.60711454  1902.34324127  1648.54369112]]
[[  654.00932113  1900.00529887  1648.999422  ]]
[[  675.29277672  1818.35249943  1649.12650997]]
[[ 1374.68764526  1514.8618643   1649.43685526]]
[[  655.50464217  1897.51271749  1649.48670418]]
[[ 1208.09012831  1562.57447981  1649.90920757]]
[[  657.09939836  1894.85535081  1650.00781111]]
[[  658.80036865  1892.02241884  1650.56518916]]
[[  680.66930023  1809.4849441   1651.10680944]]
[[  660.61482953  1889.00247727  1651.16147151]]
[[ 1074.62647286  1371.37976626  1651.40108702]]
[[  662.55059891  1885.78338777  1651.79949293]]
[[ 1142.61159881  1492.931836    1652.18572311]]
[[ 1079.17787881  1382.88154902  1652.33077678]]
[[  664.61608535  1882.35228992  1652.48230582]]
[[  666.82034346  1878.69557569  1653.21319736]]
[[  686.4334654   1800.10645083  1653.23058229]]
[[ 1141.88204144  1493.31144166  1653.46424682]]
[[  669.17313658  1874.7988678   1653.9957079 ]]
[[ 1454.75239886  1418.58876474  1654.16448484   340.83645205
[[  639.00543021  1940.39397283  1654.56460273]]
[[ 1384.95144589  1729.94043809  1654.62118682   329.44474517
[[  644.85776974  1940.16344655  1654.73919426]]
[[  639.60987249  1939.41886516  1654.77083731]]
[[  671.68500804  1870.64700339  1654.83365055]]
[[ 1070.74823055  1366.76240476  1654.89590101]]
[[  645.47743592  1939.17209431  1654.94988693]]
[[  640.25046701  1938.38535392  1654.98965826]]
[[  646.13499922  1938.12004036  1655.17372217]]
[[  640.92938725  1937.28993832  1655.22184978]]
[[  646.83278941  1937.00356562  1655.41153664]]
[[  641.64893939  1936.12890879  1655.46824669]]
[[  692.62023514  1790.19931397  1655.5081334 ]]
[[  647.57328178  1935.81872436  1655.66422215]]
[[  642.4115708   1934.89833483  1655.72973792]]
[[  674.36736249  1866.22402487  1655.73113215]]
[[  648.35910659  1934.5613308   1655.93272953]]
[[  643.21987913  1933.59405237  1656.00727013]]
[[  649.19305929  1933.22694506  1656.21807271]]
[[ 1139.88432169  1617.82405395  1656.24309261]]
[[  644.07662206  1932.21165047  1656.30185175]]
[[  650.0781115   1931.81085843  1656.52133314]]
[[  644.9847277  1930.7464574  1656.6145572]]
[[  677.23255912  1861.51318046  1656.69257538]]
[[  651.01742275  1930.30807788  1656.84366453]]
[[ 1394.72024083  1440.38181011  1656.84777877   330.56332281
[[  645.94730593  1929.19352611  1656.94653147]]
[[ 1225.20841735  1575.12716768  1656.95489903]]
[[  652.01435321  1928.71331     1657.18629797]]
[[  646.96766046  1927.54761915  1657.29899496]]
[[  653.07247738  1927.02094417  1657.55054738]]
[[  648.04930195  1925.80319295  1657.6732488 ]]
[[  680.29401916  1856.49693715  1657.72274227]]
[[  654.19559893  1925.22503514  1657.93781539]]
[[  699.26906768  1779.74818129  1657.95042215]]
[[  649.19596212  1923.95438161  1658.07068043]]
[[ 1074.47064696  1380.21794245  1658.0877474 ]]
[[  655.38776671  1923.31928506  1658.34959962]]
[[  650.41160905  1921.99498018  1658.49276963]]
[[ 1072.98495741  1377.02346289  1658.57196753]]
[[ 1132.44338999  1494.62857246  1658.57897374]]
[[  656.65329219  1921.29702488  1658.78749949]]
[[  683.56635021  1851.1570098   1658.82675883]]
[[  651.70046383  1919.91842755  1658.94109501]]
[[ 1068.62621669  1369.20030396  1659.09119668]]
[[  657.99676832  1919.15119546  1659.25322343]]
[[ 1131.77010914  1494.99794445  1659.36640542]]
[[ 1172.33064512  1587.95247374  1659.36724399]]
[[  653.06701858  1917.71778905  1659.41734089]]
[[ 1186.14508769  1584.95641676  1659.68849368]]
[[  659.42309023  1916.87432829  1659.74859671]]
[[ 1073.73606222  1377.66822357  1659.87962625]]
[[  654.51605616  1915.38573887  1659.92330476]]
[[  687.06549065  1845.47441065  1660.0101409 ]]
[[  660.93747772  1914.45852612  1660.27556969]]
[[  656.05267165  1912.91454247  1660.46090512]]
[[  706.42468429  1768.7409321   1660.56912276]]
[[  662.54549989  1911.89544365  1660.83622681]]
[[  657.68229593  1910.29603926  1661.03219004]]
[[  690.80887821  1839.42952472  1661.27882118]]
[[  664.2531023   1909.17626865  1661.43279609]]
[[  659.41072152  1907.52162572  1661.63934611]]
[[  666.06663675  1906.2917037   1662.06765929]]
[[ 1064.18718651  1367.10562317  1662.072289  ]]
[[ 1362.08465668  1520.36653552  1662.15923826]]
[[  661.24413109  1904.58223941  1662.2847081 ]]
[[  694.81564712  1833.00221734  1662.63917726]]
[[  667.99289423  1903.2319491   1662.74336276]]
[[  663.18912895  1901.46834424  1662.97076921]]
[[  714.13797819  1757.16974535  1663.37672269]]
[[  670.03914142  1899.98668746  1663.46262899]]
[[  665.25277588  1898.16991755  1663.7001919 ]]
[[ 1068.01875144  1378.01898484  1663.7878158 ]]
[[ 1143.1046241   1614.1067944   1663.80372497]]
[[ 1123.11955869  1496.23199587  1663.81614826]]
[[  699.10685974  1826.17198181  1664.09806084]]
[[ 1372.5505313   1741.26172593  1664.10423715   329.62143718
[[ 1122.51219732  1496.60912303  1664.17726813]]
[[  672.21316126  1896.54507062  1664.22836884]]
[[  667.44262795  1894.67643961  1664.47581948]]
[[  674.52329813  1892.89570967  1665.04369452]]
[[  669.76677968  1890.97688632  1665.30068821]]
[[  703.70577918  1818.91813629  1665.66282813]]
[[ 1060.04202779  1362.17440289  1665.82575581]]
[[  676.97850843  1889.02666911  1665.91193325]]
[[ 1118.86068754  1640.37531334  1666.05630347]]
[[  672.23391239  1887.05972616  1666.17804021]]
[[  722.46708564  1745.03239105  1666.38668622]]
[[ 1196.54209553  1598.25981387  1666.47899891]]
[[ 1062.42789738  1361.28688905  1666.61469603]]
[[  679.58841736  1884.92546634  1666.83664175]]
[[  674.85334844  1882.91292237  1667.1113369 ]]
[[  708.63819095  1811.22008125  1667.34137187]]
[[ 1098.50022538  1666.34594806  1667.52560248]]
[[ 1065.40036067  1376.8115575   1667.56190236]]
[[ 1354.71502267  1513.53646576  1667.77713247]]
[[  682.36338273  1880.57907787  1667.82162124]]
[[ 1114.56575956  1497.76417172  1668.0628489 ]]
[[ 1114.03155443  1498.16516281  1668.06607601]]
[[  677.63511227  1878.52394186  1668.10427314]]
[[ 1383.05808828  1436.60294446  1668.39425633   330.47032455
[[ 1063.71648169  1375.46441066  1668.52886631]]
[[ 1058.40601825  1364.85935794  1668.57907506]]
[[ 1081.19845957  1691.74611287  1668.79161486]]
[[  685.31456713  1875.973954    1668.87093335]]
[[ 1062.26886511  1372.32747118  1669.06186276]]
[[  713.93278294  1803.05763022  1669.14215564]]
[[  680.58999926  1873.87977242  1669.16079195]]
[[  731.47864036  1732.33378351  1669.61372522]]
[[  688.45401964  1871.09604412  1669.98891641]]
[[ 1066.31877121  1716.39430654  1670.04218676]]
[[  683.72965377  1868.96695031  1670.2850998 ]]
[[ 1062.84714806  1372.69127372  1670.47077744]]
[[ 1163.41866518  1609.07495211  1670.65239372]]
[[ 1448.1482438   1415.66494434  1670.69916      341.12703118
[[  719.62159476  1794.41142962  1671.07425189]]
[[ 1054.33833066  1363.11489723  1671.09373888]]
[[  691.79476858  1865.93083501  1671.18020252]]
[[ 1053.36745265  1740.1733155   1671.30913809]]
[[  687.06665766  1863.77160035  1671.48168236]]
[[  695.35092724  1860.46340515  1672.44973494]]
[[ 1350.34376131  1526.12233679  1672.45240145]]
[[ 1041.96288487  1763.01275846  1672.57729251]]
[[ 1051.69815299  1371.57502066  1672.60261687]]
[[  690.61463108  1858.27949149  1672.75532082]]
[[  741.24922861  1719.08784145  1673.07423968]]
[[  725.74054888  1785.26348525  1673.14738617]]
[[ 1360.59313928  1752.01298468  1673.17772229   329.92477238
[[ 1057.48409615  1373.41162479  1673.3596355 ]]
[[ 1198.25063125  1600.99922766  1673.68271432]]
[[  699.13781454  1854.67849849  1673.80278606]]
[[ 1031.81097521  1784.87672372  1673.82575546]]
[[  694.38834735  1852.47611088  1674.1111085 ]]
[[ 1098.48945199  1501.20472522  1674.3271637 ]]
[[ 1098.86778433  1500.73020809  1674.91113776]]
[[ 1049.95464279  1357.89247501  1675.00087654]]
[[ 1022.68507896  1805.75460029  1675.03931575]]
[[  703.17209304  1848.56062176  1675.24497561]]
[[  732.33007799  1775.59781638  1675.37199162]]
[[ 1365.789192    1518.99735888  1675.45765277]]
[[ 1052.25836346  1356.82875453  1675.52778821]]
[[  698.40386432  1846.34676044  1675.55446791]]
[[ 1055.06633829  1372.29337323  1676.10907776]]
[[ 1014.40996404  1825.65410764  1676.2092359 ]]
[[ 1048.89034254  1360.84958887  1676.49345579]]
[[  707.4719271   1842.09417012  1676.78228925]]
[[  751.86705411  1705.31970779  1676.78701803]]
[[  702.67867465  1839.87668006  1677.09116808]]
[[ 1053.64223361  1370.99549687  1677.14059992]]
[[ 1006.84934823  1844.59595157  1677.33143403]]
[[ 1052.21930542  1367.92343621  1677.72686924]]
[[  739.43586411  1765.40126099  1677.75928071]]
[[ 1085.52118243  1504.15251161  1678.11652049]]
[[ 1124.34018368  1645.91294694  1678.24526615]]
[[ 1305.89243753  1510.95204318  1678.33611437]]
[[ 1365.11300182  1520.09133258  1678.36651311]]
[[  999.89640023  1862.60973732  1678.40468334]]
[[  712.05716439  1835.26358665  1678.42109749]]
[[ 1045.1672265   1359.45369864  1678.59780092]]
[[  707.23187795  1833.05120276  1678.72734242]]
[[ 1085.73191284  1503.56573083  1679.05414262]]
[[ 1052.65170475  1368.00956882  1679.16384536]]
[[ 1144.27165182  1633.25446291  1679.410502  ]]
[[  993.46658317  1879.7308718   1679.42937614]]
[[ 1371.68304126  1433.16036033  1679.85229203   330.5328965    346.93618059
[[  716.94954418  1828.05356212  1680.16817511]]
[[  747.10970629  1754.66445934  1680.3213449 ]]
[[  987.49229469  1895.99824425  1680.40678007]]
[[  712.08437813  1825.85594742  1680.46950707]]
[[ 1074.70594959  1507.10443131  1680.48506751]]
[[  763.43380309  1691.06839022  1680.77431999]]
[[ 1041.30565951  1367.45091521  1681.13960714]]
[[ 1047.68169384  1369.12590368  1681.22118745]]
[[  981.91886094  1911.4525145   1681.33861486]]
[[ 1173.8969152   1624.5729309   1681.48506607]]
[[ 1074.75498418  1506.39705241  1681.63287689]]
[[ 1349.02746982  1762.23367822  1681.77043391   330.30279798
[[  722.17293651  1820.44928225  1682.03072131]]
[[ 1065.67159073  1510.06246866  1682.03210271]]
[[  976.70154168  1926.13487058  1682.2268159 ]]
[[  717.25910953  1818.27705587  1682.32458031]]
[[ 1040.58056126  1353.96625506  1682.57050215]]
[[ 1042.85451177  1352.75059003  1682.89245699]]
[[ 1040.12702937  1357.20152778  1683.02159413]]
[[  755.41053359  1743.38304604  1683.07129926]]
[[  971.80328679  1940.08614464  1683.07340179]]
[[ 1058.09963456  1512.98858844  1683.08107006]]
[[ 1045.54050946  1368.1386169   1683.15392281]]
[[ 1065.5736808   1509.24324991  1683.31060969]]
[[ 1051.72592383  1515.83760051  1683.80864181]]
[[  967.19305014  1953.34619999  1683.88039923]]
[[  727.75361657  1812.43673075  1684.01638135]]
[[ 1044.32971599  1366.86673853  1684.16078318]]
[[  722.78129587  1810.30148162  1684.29990358]]
[[ 1046.33556643  1518.57124163  1684.31687466]]
[[ 1057.87226458  1512.07308667  1684.44695761]]
[[  962.84451693  1965.95352086  1684.64979977]]
[[ 1041.75532106  1521.16205801  1684.66938081]]
[[ 1036.71897801  1356.14792713  1684.78326316]]
[[ 1042.92102869  1363.8652645   1684.79577126]]
[[ 1037.84580603  1523.59294186  1684.90878347]]
[[ 1018.71430256  1539.27225271  1685.05938494]]
[[  776.06666555  1676.38988957  1685.06349355]]
[[ 1034.49463959  1525.8552579   1685.06523457]]
[[ 1019.67801474  1538.29766894  1685.10127651]]
[[ 1020.77458656  1537.21653564  1685.14152185]]
[[ 1031.61081156  1527.94679728  1685.16080311]]
[[ 1022.02458004  1536.01918668  1685.17803379]]
[[ 1023.45231157  1534.69568336  1685.2079428 ]]
[[ 1029.12021811  1529.86999148  1685.21194234]]
[[ 1025.08667406  1533.23602969  1685.2273523 ]]
[[ 1026.96217015  1531.63048307  1685.23102015]]
[[ 1051.38613225  1514.84261628  1685.23727321]]
[[  958.73513794  1977.94495253  1685.38353485]]
[[ 1045.89865438  1517.51238507  1685.79306286]]
[[  764.40557791  1731.55908463  1686.02349793]]
[[  954.84539232  1989.35555158  1686.08346162]]
[[  733.72057898  1804.00305748  1686.13327056]]
[[ 1041.23452827  1520.05291801  1686.18287414]]
[[ 1043.23572445  1363.68151722  1686.21383293]]
[[  728.67874622  1801.91733871  1686.40326523]]
[[ 1037.25240487  1522.44497153  1686.45211029]]
[[ 1127.87547283  1657.12254418  1686.5095293 ]]
[[ 1441.50501033  1412.89345084  1686.50955436   341.37947185
[[ 1175.78471377  1627.43053359  1686.58601178]]
[[ 1033.83817309  1524.67793992  1686.63265535]]
[[ 1017.74210556  1538.04693409  1686.71448825]]
[[ 1030.89935565  1526.74789516  1686.7477691 ]]
[[  951.15822077  2000.21851595  1686.75135521]]
[[ 1018.72679075  1537.0682687   1686.75281213]]
[[ 1019.84676057  1535.98414611  1686.78860745]]
[[ 1028.36062242  1528.65580727  1686.81478746]]
[[ 1021.12292816  1534.78528129  1686.81958707]]
[[ 1022.58002569  1533.46220362  1686.84263762]]
[[ 1026.16026444  1530.40609297  1686.84676472]]
[[ 1024.24744032  1532.00548943  1686.85356521]]
[[  947.65858667  2010.56517186  1687.3889053 ]]
[[ 1038.66683168  1365.20271672  1687.62288521]]
[[  944.33313317  2020.42500056  1687.99771522]]
[[ 1031.71241789  1363.71193696  1688.18543621]]
[[ 1032.1273877   1353.92679156  1688.38228932]]
[[  740.10589673  1795.13702179  1688.39000261]]
[[  941.16991317  2029.82569204  1688.57930287]]
[[  734.98219239  1793.11431982  1688.6429288 ]]
[[ 1031.96700367  1350.42245498  1688.75735369]]
[[ 1328.35525149  1538.00313646  1688.87597074]]
[[ 1034.24524158  1349.07182497  1688.92239662]]
[[ 1036.83864     1364.36835696  1688.9253319 ]]
[[  938.15817463  2038.79321652  1689.1351028 ]]
[[  774.17171608  1719.20278211  1689.19385938]]
[[  935.2881882   2047.35190668  1689.66646902]]
[[  789.90040567  1661.36087876  1689.68928206]]
[[ 1337.82363451  1771.9621235   1689.84008092   330.73045063
[[ 1035.81080121  1363.1077955   1689.86155641]]
[[ 1029.00267115  1353.2050353   1689.86699779]]
[[  932.5511076   2055.52454575  1690.17467829]]
[[ 1334.68993027  1514.94309857  1690.3904132 ]]
[[ 1034.40859551  1360.18122814  1690.5362791 ]]
[[  929.93885532  2063.33245783  1690.66093369]]
[[  746.94512955  1785.82952228  1690.79572471]]
[[  741.72567193  1783.88419357  1691.02766859]]
[[  927.44402822  2070.79559794  1691.12636836]]
[[ 1360.5110812   1429.98900207  1691.17753295   330.72756175   347.3206864
[[  925.05981879  2077.93264015  1691.57204921]]
[[ 1034.63217175  1359.73783055  1691.91048208]]
[[  922.77994884  2084.76106245  1691.99898065]]
[[ 1113.63761475  1680.44678545  1692.38413366]]
[[  920.59861323  2091.29722781  1692.40810824]]
[[  784.79697938  1706.33452363  1692.6003582 ]]
[[ 1024.87430929  1351.02128177  1692.7882343 ]]
[[  918.51043173  2097.55646094  1692.80032218]]
[[ 1030.45112012  1361.65939789  1692.82865983]]
[[  916.51040741  2103.55312044  1693.17646071]]
[[ 1154.70929579  1651.04287453  1693.35607684]]
[[  754.27778571  1776.07422505  1693.36016385]]
[[  914.59389053  2109.30066653  1693.53731329]]
[[  748.94696039  1774.22139167  1693.56681647]]
[[ 1028.94529044  1360.98547403  1693.65424098]]
[[ 1024.12155307  1347.2673725   1693.80145001]]
[[ 1026.4254178   1345.79364537  1693.84803463]]
[[  912.75654699  2114.81172416  1693.88362368]]
[[ 1022.937269    1360.37193932  1693.95482967]]
[[ 1022.00032004  1350.61784397  1694.05305983]]
[[  910.99433049  2120.09814179  1694.21609282]]
[[ 1028.07913522  1359.72656942  1694.5017769 ]]
[[  909.30345794  2125.17104607  1694.53538155]]
[[  805.08926839  1646.08296181  1694.6969027 ]]
[[  907.68038762  2130.04089242  1694.84211313]]
[[ 1101.88427901  1791.22811683  1695.02761647]]
[[ 1091.53709973  1811.17720913  1695.05945379]]
[[  906.12179959  2134.717512    1695.13687569]]
[[ 1113.37210218  1770.34822601  1695.14844731]]
[[ 1082.17097813  1830.20007175  1695.20043931]]
[[ 1026.67784513  1356.87806238  1695.20616463]]
[[ 1073.6512202   1848.31224296  1695.4186852 ]]
[[  904.62457823  2139.21015513  1695.42022443]]
[[ 1126.18768274  1748.54719251  1695.48145483]]
[[ 1065.8647866   1865.53741405  1695.69075196]]
[[  903.18579641  2143.52753147  1695.69268375]]
[[  901.80270124  2147.67784717  1695.95474915]]
[[ 1058.71702646  1881.90507707  1695.99935393]]
[[  762.1478402   1765.86830265  1696.09369023]]
[[ 1140.54666209  1725.85249109  1696.10781587]]
[[  900.47270122  2151.66883921  1696.20688914]]
[[ 1110.83821535  1674.57398305  1696.26201915]]
[[  796.38220774  1692.98727016  1696.26376445]]
[[  756.68805538  1764.12369714  1696.27032598]]
[[ 1052.12866712  1897.44861483  1696.33170972]]
[[ 1156.68907586  1653.79973899  1696.40699068]]
[[ 1018.3311223   1348.46940797  1696.42636319]]
[[  899.19335445  2155.50780714  1696.44954688]]
[[ 1026.83383402  1356.1862097   1696.52704086]]
[[ 1046.03317595  1912.2037868   1696.67835311]]
[[  897.96235796  2159.20164247  1696.68314178]]
[[  896.777538    2162.75685576  1696.90807102]]
[[ 1040.37451802  1926.20755475  1697.03227173]]
[[ 1023.01422625  1358.49455069  1697.07906276]]
[[  895.63684109  2166.17960178  1697.12471087]]
[[ 1156.69092492  1702.31315846  1697.13660848]]
[[  894.53832584  2169.47570271  1697.33341803]]
[[ 1101.12510225  1703.08706136  1697.36275976]]
[[ 1326.96541013  1781.23773654  1697.36943933   331.19110962
[[ 1035.1052872   1939.49719125  1697.38827945]]
[[ 1015.6757507   1348.36885969  1697.51773501]]
[[  893.48015548  2172.65066965  1697.53453081]]
[[ 1021.82296021  1357.97887825  1697.54691957]]
[[  892.46059097  2175.70972256  1697.72837021]]
[[ 1030.18516781  1952.10961809  1697.74255612]]
[[ 1019.36487287  1342.90311321  1697.88302553]]
[[  891.47798459  2178.65780868  1697.91524103]]
[[ 1017.02260703  1344.4915252   1697.92531187]]
[[ 1025.57967851  1964.0809285   1698.09230783]]
[[  890.53077415  2181.49961967  1698.09543277]]
[[  889.61747756  2184.23960748  1698.26922062]]
[[ 1308.93969858  1550.40575706  1698.29188088]]
[[ 1021.10227194  1356.71482328  1698.30378673]]
[[ 1021.25915128  1975.44605346  1698.43551452]]
[[  888.7366878   2186.88199907  1698.43686619]]
[[  887.88706836  2189.43081009  1698.5986184 ]]
[[ 1014.96720855  1357.42770585  1698.67304698]]
[[ 1174.88094633  1678.00347391  1698.70674551]]
[[  887.06734889  2191.8898576   1698.75471418]]
[[ 1017.19790347  1986.23853982  1698.77074141]]
[[  886.27632123  2194.26277192  1698.90537913]]
[[  770.6043096   1755.21329674  1699.00740669]]
[[ 1019.69798467  1353.9465475   1699.02858604]]
[[  885.51283578  2196.55300759  1699.05082819]]
[[ 1013.37356654  1996.49041379  1699.09699722]]
[[  764.99571261  1753.59304491  1699.14886205]]
[[  884.77579798  2198.76385367  1699.19126625]]
[[  884.06416517  2200.89844323  1699.32688869]]
[[ 1009.76654159  2006.23210857  1699.4136271 ]]
[[ 1012.44935675  1346.24815813  1699.45128426]]
[[  883.37694361  2202.9597623   1699.45788189]]
[[  882.7131857   2204.95065814  1699.58442377]]
[[  882.07198739  2206.87384702  1699.7066842 ]]
[[ 1006.35955649  2015.49243978  1699.72023138]]
[[  881.4524858   2208.73192146  1699.82482547]]
[[  880.8538569   2210.52735699  1699.93900265]]
[[ 1003.13730496  2024.2986155   1700.01660353]]
[[  880.27531348  2212.26251852  1700.04936404]]
[[ 1347.63636761  1521.11527759  1700.11424457]]
[[  821.80833844  1630.68744216  1700.14571394]]
[[  879.71610313  2213.93966622  1700.15605143]]
[[  809.0427888   1679.20936011  1700.20873999]]
[[  879.1755064   2215.56096111  1700.25920053]]
[[ 1019.80639148  1353.01750068  1700.29603666]]
[[ 1000.08615111  2032.67627101  1700.30268286]]
[[  878.65283507  2217.12847027  1700.3589412 ]]
[[ 1009.9820587   1346.43417697  1700.4055532 ]]
[[  878.14743055  2218.64417172  1700.45539783]]
[[  877.65866231  2220.10995898  1700.54868953]]
[[ 1016.31499444  1355.69354869  1700.57568081]]
[[  997.19388674  2040.64952062  1700.57851809]]
[[  877.18592651  2221.52764543  1700.63893045]]
[[  876.72864461  2222.89896828  1700.72623002]]
[[ 1015.42052678  1355.3279949   1700.77487739]]
[[  876.28626211  2224.22559245  1700.81069316]]
[[  994.44953094  2048.24102056  1700.84423935]]
[[  875.8582474   2225.50911409  1700.89242052]]
[[ 1195.38220743  1653.02672876  1700.96448259]]
[[  875.44409059  2226.75106399  1700.97150864]]
[[  875.04330251  2227.95291071  1701.04805023]]
[[  991.84316393  2055.47203886  1701.10003663]]
[[  874.65541366  2229.11606362  1701.12213426]]
[[  874.27997333  2230.24187569  1701.1938462 ]]
[[ 1013.01727425  1340.37768842  1701.20913343]]
[[  873.91654865  2231.33164615  1701.26326816]]
[[ 1010.62945047  1342.07463141  1701.31815123]]
[[  873.56472384  2232.38662302  1701.33047903]]
[[  989.36578852  2062.3625287   1701.34614312]]
[[  873.22409934  2233.40800547  1701.39555465]]
[[ 1014.83196364  1354.05361511  1701.44719869]]
[[  872.89429112  2234.39694605  1701.45856793]]
[[ 1434.90412398  1410.33509544  1701.50715491   341.59943822
[[  987.00921398  2068.93120303  1701.58282234]]
[[ 1090.01423237  1724.96427769  1701.68287125]]
[[  984.76595824  2075.19560867  1701.81035823]]
[[ 1007.17476485  1344.33045525  1701.98626911]]
[[  982.62916496  2081.17219867  1702.0290475 ]]
[[  779.70188012  1744.11611658  1702.11327644]]
[[ 1013.42194135  1351.36690903  1702.18477723]]
[[  773.92203074  1742.63644567  1702.21392806]]
[[  980.59253299  2086.87640222  1702.2391937 ]]
[[ 1349.48390726  1427.05084272  1702.35077729   331.03783405
[[  978.65025591  2092.32269141  1702.44110282]]
[[ 1007.76635516  1354.8631253   1702.54566236]]
[[ 1138.15857522  1677.21607461  1702.60663493]]
[[  976.79697002  2097.5246446   1702.63507977]]
[[  975.02770932  2102.49500631  1702.82142586]]
[[ 1004.86724871  1344.78658147  1702.83134022]]
[[ 1347.00684779  1522.30755355  1702.85343327]]
[[  973.33786642  2107.24574346  1703.00043685]]
[[  971.72315836  2111.78809801  1703.17240156]]
[[  970.17959661  2116.13263625  1703.33760088]]
[[ 1013.49934474  1350.21152623  1703.4035272 ]]
[[ 1009.67995804  1353.00665065  1703.47472074]]
[[ 1010.30043785  1353.23345939  1703.47908844]]
[[  968.70346068  2120.28929458  1703.49630707]]
[[  967.29127473  2124.2674223   1703.6487833 ]]
[[  965.93978681  2128.07582122  1703.79528347]]
[[ 1140.1879888   1679.72329216  1703.89547824]]
[[  964.64595036  2131.72278253  1703.93605204]]
[[ 1218.45530837  1627.52085724  1703.94656234]]
[[ 1007.32744716  1338.18920665  1703.97315892]]
[[  963.40690761  2135.216121    1704.07132408]]
[[ 1009.2119369   1351.71776215  1704.07191138]]
[[ 1002.45159224  1342.68765456  1704.12763285]]
[[ 1004.89050276  1339.98995714  1704.13262576]]
[[  962.21997476  2138.56320668  1704.20132535]]
[[  961.08262858  2141.77099432  1704.3262725 ]]
[[ 1316.45838317  1790.09974621  1704.38396424   331.67392656
[[  959.9924943   2144.84605063  1704.44637325]]
[[  822.91035932  1665.06774768  1704.46542861]]
[[  958.9473347   2147.79457957  1704.56182664]]
[[  957.94504018  2150.62244579  1704.67282333]]
[[  956.98361969  2153.33519635  1704.77954584]]
[[ 1007.79423879  1349.11325768  1704.81640055]]
[[  956.06119253  2155.93808093  1704.88216889]]
[[ 1000.27817238  1343.3978024   1704.88479416]]
[[  955.17598077  2158.43607052  1704.9808597 ]]
[[  954.32630242  2160.83387478  1705.07577824]]
[[  953.51056506  2163.13595825  1705.16707759]]
[[  952.72726001  2165.34655527  1705.2549042 ]]
[[  951.97495703  2167.46968398  1705.33939817]]
[[  951.25229936  2169.50915927  1705.42069356]]
[[  789.5015786   1732.59018459  1705.42430612]]
[[  783.52507581  1731.26704332  1705.47804625]]
[[  950.55799916  2171.46860486  1705.49891863]]
[[ 1080.0578474   1746.03978891  1705.5104533 ]]
[[  949.8908333   2173.35146455  1705.57419611]]
[[  949.24963947  2175.16101268  1705.64664344]]
[[  948.63331256  2176.90036393  1705.71637305]]
[[ 1001.28449496  1352.65357405  1705.74581895]]
[[ 1004.5411466   1350.98605705  1705.75266175]]
[[  948.04080129  2178.57248242  1705.78349253]]
[[  947.47110513  2180.18019022  1705.84810488]]
[[  946.92327133  2181.72617532  1705.91030874]]
[[ 1004.91231309  1351.08690528  1705.9134902 ]]
[[  998.22537979  1341.29125368  1705.94999444]]
[[  946.3963923   2183.21299904  1705.97019857]]
[[ 1007.85416861  1347.74180163  1705.99307855]]
[[  945.88960302  2184.64310299  1706.02786482]]
[[  945.40207874  2186.01881558  1706.08339414]]
[[  840.25371949  1615.34028925  1706.11262685]]
[[  944.93303275  2187.34235812  1706.13686958]]
[[  944.48171434  2188.61585053  1706.18837069]]
[[  944.04740689  2189.84131668  1706.23797373]]
[[ 1004.18329946  1349.67914786  1706.28480319]]
[[  943.62942604  2191.02068944  1706.2857518 ]]
[[ 1002.23679414  1336.30695779  1706.2901099 ]]
[[  943.22711803  2192.15581537  1706.33177496]]
[[  942.8398581   2193.24845919  1706.37611044]]
[[  942.46704904  2194.30030791  1706.41882269]]
[[  942.10811973  2195.31297478  1706.45997352]]
[[  999.74940838  1338.20767096  1706.48814761]]
[[  941.7625239   2196.28800295  1706.49962226]]
[[  996.16308131  1342.24002443  1706.63554392]]
[[ 1002.75650516  1347.15687919  1707.0319168 ]]
[[ 1244.39993267  1601.67275331  1707.15592833]]
[[  994.4446477   1340.11397235  1707.51117121]]
[[  999.94511378  1349.23690577  1707.69040286]]
[[ 1000.09156389  1349.22482613  1707.97359936]]
[[  992.47314591  1341.28682252  1708.13771637]]
[[  999.68803193  1347.90898421  1708.16697082]]
[[ 1002.80991259  1345.57897903  1708.17340055]]
[[ 1273.84012315  1575.76581455  1708.20825369]]
[[  997.68697573  1334.69985542  1708.24870811]]
[[  995.46399157  1350.76967325  1708.41247432]]
[[  995.14918612  1336.69720955  1708.47665522]]
[[  991.06178736  1339.13036799  1708.85623981]]
[[  998.25105096  1345.46848393  1708.91370955]]
[[  800.0714664   1720.65673763  1708.95480661]]
[[  793.86952716  1719.50531362  1708.95501226]]
[[ 1071.06382738  1766.30169458  1708.95915763]]
[[  838.13424331  1650.65168391  1709.07168376]]
[[  995.83595346  1347.73072725  1709.35073745]]
[[  989.16324876  1340.5136791   1709.43367542]]
[[ 1315.92321626  1516.16006857  1709.68428024]]
[[ 1125.73791983  1704.97169883  1709.70164959]]
[[  995.78110352  1347.61830938  1709.73141552]]
[[  995.6710649   1346.37924883  1709.7800974 ]]
[[ 1123.67068337  1702.80952671  1709.80630912]]
[[  993.62220708  1333.33784193  1709.91708968]]
[[ 1098.86819081  1703.04015968  1709.98683949]]
[[  988.03342319  1338.31713077  1710.02070045]]
[[  998.30677041  1343.69317109  1710.02631332]]
[[  991.03484322  1335.4288166   1710.16859455]]
[[  994.22301196  1344.01963359  1710.52444857]]
[[  986.19229617  1339.89821664  1710.55691955]]
[[  990.24481387  1349.1801398   1710.65410086]]
[[ 1267.49338944  1512.52192906  1710.657334  ]]
[[  992.16187498  1346.44069612  1710.78222225]]
[[  985.32043912  1337.65316923  1711.03285507]]
[[  992.08137621  1345.06352286  1711.17152282]]
[[  991.92740033  1346.23971137  1711.24194654]]
[[  989.99054366  1332.19271492  1711.34775991]]
[[  983.52322649  1339.42024605  1711.53425704]]
[[  994.28816891  1342.05540497  1711.61361063]]
[[  987.35487161  1334.3744577   1711.61811745]]
[[ 1306.67829083  1798.7029368   1711.66508752   332.16618389
[[  990.62149403  1342.78356941  1711.91220165]]
[[  982.88780668  1337.1195667   1711.91555999]]
[[  988.8756405   1345.34204879  1712.02281021]]
[[ 1062.88063624  1785.75563579  1712.10641047]]
[[  988.87244603  1343.93741922  1712.37806039]]
[[  981.12283946  1339.06170311  1712.38741175]]
[[  988.48125146  1345.06327687  1712.54766595]]
[[  985.56789195  1347.8537585   1712.55425506]]
[[  986.74447555  1331.23854682  1712.5815377 ]]
[[  805.0273131   1707.38040849  1712.66025036]]
[[  980.70430616  1336.69946367  1712.68750702]]
[[  860.64059734  1600.24649753  1712.69300754]]
[[  811.4873204   1708.34628813  1712.72076028]]
[[  984.06197894  1333.50829657  1712.86721725]]
[[  990.70184407  1340.63845361  1712.98243803]]
[[  985.93461834  1344.41224457  1713.10256342]]
[[  987.40006027  1341.7356313   1713.11430511]]
[[  978.96152981  1338.80652156  1713.1342007 ]]
[[ 1338.54571118  1424.31087809  1713.34808668   331.44831362
[[  978.74219964  1336.37790234  1713.3641601 ]]
[[  986.00231305  1342.97874529  1713.4287787 ]]
[[  983.84107601  1330.45183509  1713.65054346]]
[[  985.39803492  1344.0654234   1713.68182911]]
[[  977.01297801  1338.64047507  1713.78939887]]
[[  981.11332452  1332.80688077  1713.94885763]]
[[  976.97689205  1336.14165625  1713.95844442]]
[[  983.30060876  1343.63096601  1714.04563456]]
[[  854.88223875  1636.07678238  1714.07601583]]
[[  984.51680805  1340.85341189  1714.16019604]]
[[  987.50026134  1339.41724732  1714.16928723]]
[[  981.37716588  1346.76063231  1714.17711935]]
[[ 1112.94796165  1729.41289291  1714.33503599]]
[[  983.43339852  1342.16750217  1714.34699526]]
[[  975.38660132  1335.97905899  1714.48125907]]
[[  981.24188023  1329.81148445  1714.58039982]]
[[  982.63764559  1343.22481289  1714.67087698]]
[[  980.93954676  1342.98002486  1714.87170023]]
[[  978.47045306  1332.24914544  1714.88927348]]
[[  973.49468434  1338.46154132  1714.9413585 ]]
[[  973.95204906  1335.8798399   1714.94186364]]
[[ 1055.38731402  1804.41858581  1715.005594  ]]
[[  981.93420581  1340.11674758  1715.07344739]]
[[  981.13220725  1341.48578949  1715.15169719]]
[[  984.64063452  1338.3690171   1715.20287301]]
[[  978.91261394  1329.29869135  1715.39182985]]
[[ 1110.83765303  1727.65438748  1715.47676494]]
[[  980.16425318  1342.52229597  1715.53615708]]
[[ 1428.43649943  1408.12541437  1715.55477031   341.79450707
[[  977.62069312  1345.87289547  1715.57222592]]
[[  978.82114915  1342.44321756  1715.59699708]]
[[  976.09905738  1331.81631051  1715.70963876]]
[[  971.3603049   1335.79010188  1715.75448506]]
[[  970.64981166  1338.54440853  1715.81688964]]
[[  979.06897439  1340.91766053  1715.85855619]]
[[  979.61880145  1339.50761588  1715.87322051]]
[[  976.8228496   1328.89677741  1716.10181348]]
[[  982.08471514  1337.4732752   1716.10617334]]
[[  976.9185471   1342.00615818  1716.23507564]]
[[  977.94597159  1341.94078544  1716.29515267]]
[[  969.26212967  1335.88589442  1716.37652513]]
[[  973.96865532  1331.49172117  1716.42727061]]
[[  977.21729912  1340.44895594  1716.48066051]]
[[  968.33341688  1338.81196829  1716.48979008]]
[[  977.54087288  1339.00998384  1716.57530367]]
[[  817.07818447  1694.93164341  1716.61130054]]
[[  974.94563842  1328.59100126  1716.72442731]]
[[  823.83324256  1695.70024165  1716.74032882]]
[[  974.25112058  1345.16505444  1716.77817406]]
[[  975.20792805  1341.65610606  1716.79735504]]
[[  967.55155797  1336.11192071  1716.85623353]]
[[  979.79846374  1336.71170369  1716.89786934]]
[[  975.95449475  1341.46509526  1716.96236525]]
[[  966.43252931  1339.20554515  1717.00976227]]
[[  975.55378906  1340.06713276  1717.02905007]]
[[  972.05223415  1331.26066343  1717.05650178]]
[[  975.67406355  1338.60963577  1717.19286089]]
[[  966.1462895   1336.42633462  1717.22761446]]
[[  973.2571466   1328.36836686  1717.27146034]]
[[  973.66819981  1341.38179792  1717.29353727]]
[[  964.85990315  1339.68124874  1717.41334708]]
[[  974.05772771  1339.76109853  1717.51311433]]
[[  964.98265965  1336.79784971  1717.51609623]]
[[  974.16473158  1341.0817672   1717.54995513]]
[[  977.75167189  1336.06799614  1717.59336578]]
[[  970.32589394  1331.11017415  1717.60931869]]
[[ 1048.48632887  1822.3146531   1717.69455221]]
[[  963.54804825  1340.20650183  1717.72792692]]
[[  972.28068284  1341.17329001  1717.73192169]]
[[  973.9950273   1338.29399716  1717.73697911]]
[[  964.01130333  1337.20323944  1717.7409227 ]]
[[  971.73631142  1328.21743857  1717.75287136]]
[[  971.22575286  1344.61408608  1717.82542588]]
[[  972.71077037  1339.52105573  1717.94089367]]
[[  962.44459148  1340.75732369  1717.97418384]]
[[  972.5544582   1340.77889858  1718.0682134 ]]
[[  968.76850767  1331.02885648  1718.09583435]]
[[  971.02883253  1341.02181275  1718.11964808]]
[[ 1101.52783057  1752.97678874  1718.16669051]]
[[  961.50874796  1341.31625146  1718.16782196]]
[[  970.36452487  1328.12816844  1718.17713417]]
[[  975.91757607  1335.52768031  1718.20552177]]
[[  972.48309549  1338.05196437  1718.21707453]]
[[  971.49667034  1339.33835883  1718.31931192]]
[[  971.10399628  1340.54597817  1718.52591584]]
[[  971.11997248  1337.87374526  1718.64120005]]
[[  970.40103446  1339.20538466  1718.65435904]]
[[  968.50638065  1344.1993869   1718.73835663]]
[[  974.27248628  1335.07793849  1718.74518193]]
[[  968.76714936  1340.81746492  1718.80612676]]
[[  967.88617008  1328.05530797  1718.92587098]]
[[  969.79592111  1340.37373406  1718.93059315]]
[[  965.95430599  1330.98455753  1718.95345442]]
[[  969.88946106  1337.75071309  1719.016282  ]]
[[  972.79544094  1334.7074348   1719.22156968]]
[[  968.42117804  1339.0254474   1719.24811469]]
[[  968.61479997  1340.25399498  1719.2887411 ]]
[[  966.93694249  1340.78298906  1719.33567911]]
[[  965.87943726  1328.1627219   1719.49946911]]
[[  966.05897936  1343.90263782  1719.53674068]]
[[  873.34012635  1621.48926881  1719.54110093]]
[[  963.67435988  1331.14165691  1719.60894063]]
[[  971.467893    1334.40615411  1719.64258409]]
[[  967.66497357  1337.59983534  1719.68032965]]
[[  966.81845126  1338.99377334  1719.7070343 ]]
[[  965.44671764  1340.87071166  1719.74642511]]
[[  966.4791183   1340.10513548  1719.92323237]]
[[  964.24241873  1328.39650759  1719.94214973]]
[[  883.19803494  1585.65214225  1719.99421587]]
[[ 1088.08594106  1730.82227143  1720.00098718]]
[[  970.27342829  1334.16525484  1720.01502852]]
[[ 1099.36188926  1751.65590921  1720.04461765]]
[[  965.51308034  1339.0688808   1720.06339394]]
[[  964.22517941  1341.04428618  1720.06589422]]
[[  961.81311078  1331.43908711  1720.1143265 ]]
[[  965.86215673  1337.61249186  1720.19254319]]
[[ 1042.09833042  1839.47224047  1720.20118097]]
[[  963.85334873  1343.70762656  1720.23682644]]
[[  962.89621182  1328.7159841   1720.2851853 ]]
[[  963.21687804  1341.27624399  1720.31494705]]
[[  964.44288015  1339.21914219  1720.34077055]]
[[  969.1975149   1333.97693599  1720.34478988]]
[[  964.74755096  1340.11207419  1720.41334906]]
[[  960.28106248  1331.83078765  1720.50582512]]
[[  962.37858026  1341.54593388  1720.50953379]]
[[  961.77990866  1329.09077065  1720.55198343]]
[[  963.55943208  1339.42063037  1720.55710825]]
[[  964.39153499  1337.74192457  1720.58986197]]
[[ 1298.26834309  1807.32152507  1720.62374064   332.65221674
[[  968.22728136  1333.83431791  1720.63698161]]
[[  960.84636848  1329.49832551  1720.76025618]]
[[  963.3346834   1340.23045146  1720.79391928]]
[[  959.00920943  1332.28244253  1720.81038508]]
[[  830.11014483  1682.21011442  1720.82847022]]
[[  963.18345686  1337.95257706  1720.89896721]]
[[  837.20210619  1682.77265425  1721.03453813]]
[[  957.94420648  1332.76866559  1721.04831956]]
[[  962.17395539  1340.42650167  1721.09023096]]
[[  962.18379498  1338.21764709  1721.14006425]]
[[ 1330.72366193  1522.95032736  1721.21093813]]
[[  957.04467532  1333.27083763  1721.23502916]]
[[  961.21357235  1340.67474006  1721.32148533]]
[[ 1091.25500637  1775.63329391  1721.45164846]]
[[  959.87212506  1343.49248149  1721.46740959]]
[[  956.65449787  1343.57639592  1722.4025924 ]]
[[ 1036.15821681  1855.92211854  1722.54694415]]
[[  954.0351353   1343.87168424  1723.12234618]]
[[ 1330.15019205  1524.22807697  1723.65799457]]
[[  951.88551491  1344.31168115  1723.67960707]]
[[ 1089.01955645  1774.76733056  1723.83298709]]
[[  950.10663862  1344.84653649  1724.11321935]]
[[ 1327.66312228  1421.73916896  1724.16581358   331.94475856
[[ 1081.95419579  1797.3783064   1724.3571646 ]]
[[  948.62206573  1345.43922339  1724.4522433 ]]
[[  947.37255928  1346.06244419  1724.71860134]]
[[ 1030.612142    1871.6961168   1724.74902646]]
[[  946.31203863  1346.69627367  1724.92892822]]
[[  945.4045151   1347.32636562  1725.09590417]]
[[  844.21961478  1669.28041242  1725.33567629]]
[[  893.70896133  1607.06992211  1725.54704563]]
[[  851.69569945  1669.63209151  1725.62816905]]
[[ 1298.31514852  1517.22864186  1725.83759642]]
[[ 1025.41521459  1886.82623479  1726.82164054]]
[[ 1073.48437768  1818.22451096  1726.98903206]]
[[ 1079.63715476  1796.97320003  1727.07308821]]
[[ 1078.25572655  1757.65205012  1727.18985651]]
[[  908.15964574  1571.84110176  1728.1128436 ]]
[[ 1422.10675258  1406.37856711  1728.7241499    341.97389703
[[ 1020.52971535  1901.34404151  1728.77683021]]
[[ 1065.73038261  1838.19521424  1729.41270736]]
[[ 1071.07665879  1818.2785442   1729.92328204]]
[[  859.51115164  1656.22237096  1730.16147541]]
[[  867.42436213  1656.36351421  1730.55085342]]
[[ 1015.92370794  1915.28027552  1730.62498016]]
[[ 1058.59715922  1857.32019762  1731.66860698]]
[[ 1291.48772729  1816.14020168  1731.96535221   333.12952506
[[  916.19890702  1593.03666345  1732.192118  ]]
[[ 1011.5699503   1928.6645858   1732.37515521]]
[[ 1069.21338528  1783.39990479  1732.38701002]]
[[ 1063.2260058   1838.70164431  1732.48855551]]
[[ 1052.00565872  1875.63293837  1733.78231331]]
[[ 1007.44503712  1941.52537258  1734.03533879]]
[[ 1233.20694717  1513.86897776  1734.12374301]]
[[ 1316.79954539  1419.30996203  1734.78940689   332.51350777
[[ 1055.99284454  1858.2691307   1734.83712018]]
[[  876.09647392  1643.13273121  1735.34021131]]
[[ 1003.52872046  1953.88969932  1735.61260963]]
[[ 1045.88973913  1893.16875851  1735.77092899]]
[[  884.50582983  1643.07005559  1735.83829752]]
[[ 1060.8419127   1808.01593085  1736.24676586]]
[[ 1049.30025212  1877.01263388  1737.01308052]]
[[  935.75105724  1559.12198302  1737.08177203]]
[[  999.80336858  1965.78325525  1737.11327838]]
[[ 1040.19375685  1909.96359679  1737.64680254]]
[[  996.25353233  1977.23035354  1738.54299662]]
[[ 1314.93826692  1524.54936374  1738.92853281]]
[[ 1043.08365303  1894.96650802  1739.04535542]]
[[ 1281.74122387  1518.18958359  1739.17084877]]
[[ 1053.05498899  1831.49563402  1739.23500229]]
[[ 1034.87065406  1926.05319645  1739.41960093]]
[[  941.01836808  1579.64381438  1739.58564757]]
[[  992.86559549  1988.25395446  1739.90684599]]
[[  894.0924596   1630.12652245  1740.91305484]]
[[ 1415.90649782  1405.00038875  1740.93867309   342.1364886    346.5427191
[[ 1037.28850004  1912.16629706  1740.95357279]]
[[ 1314.41997304  1525.90449708  1741.01541588]]
[[ 1029.88042342  1941.47257062  1741.09741225]]
[[  989.62749128  1998.87570535  1741.209412  ]]
[[  903.06290734  1629.87445599  1741.53338228]]
[[ 1045.78614238  1853.86083458  1741.66274515]]
[[  986.52847099  2009.11599171  1742.45484607]]
[[ 1025.18886923  1956.25565479  1742.68731264]]
[[ 1031.86846714  1928.64771186  1742.75176579]]
[[  983.558914    2018.99399508  1743.64691791]]
[[ 1038.98191414  1875.14860467  1743.72782439]]
[[ 1020.76660492  1970.4350874   1744.19565334]]
[[ 1285.61631052  1825.00533606  1744.25446173   333.62720872
[[ 1026.78400929  1944.44595609  1744.45059425]]
[[  980.71017094  2028.52775461  1744.78906023]]
[[ 1305.91603504  1417.00157286  1745.19444201   333.14144471
[[ 1032.59770665  1895.40448251  1745.55141589]]
[[ 1016.58824038  1984.04207948  1745.62820896]]
[[  977.97443331  2037.73423006  1745.884407  ]]
[[ 1022.00119963  1959.59528931  1746.05863641]]
[[  966.17989041  1547.80048218  1746.76989854]]
[[  913.61772034  1617.33782136  1746.92840218]]
[[  975.34462453  2046.6293647   1746.93582643]]
[[ 1012.63172155  1997.10634701  1746.99026038]]
[[ 1026.59530756  1914.67816269  1747.20577753]]
[[ 1017.49078441  1974.12875108  1747.58312353]]
[[  923.21952098  1616.91976495  1747.68653204]]
[[  968.35822425  1567.17471064  1747.8224588 ]]
[[  972.8143084   2055.22814685  1747.94594949]]
[[ 1008.87779246  2009.65608806  1748.2866481 ]]
[[ 1020.9413955   1933.02074766  1748.73345638]]
[[  970.3776117   2063.54466948  1748.91719474]]
[[ 1013.2274119   1988.07799545  1749.03035466]]
[[ 1005.30955547  2021.71799146  1749.52181271]]
[[  968.0291584   2071.59218728  1749.85178995]]
[[ 1015.60659341  1950.48302621  1750.15968936]]
[[ 1202.31646124  1515.1763455   1750.20884689]]
[[ 1009.18900191  2001.47320142  1750.40593348]]
[[ 1001.91211055  2033.31726782  1750.69982955]]
[[  965.7640135   2079.38317088  1750.75179107]]
[[ 1010.56482149  1967.11442981  1751.49995947]]
[[  963.57763477  2086.92935813  1751.61909896]]
[[ 1005.35622898  2014.34303616  1751.71490886]]
[[  998.67225812  2044.4776959   1751.82444006]]
[[ 1409.82997469  1403.92500954  1752.16339533   342.28271047
[[  961.46583114  2094.24180235  1752.45547406]]
[[ 1005.79281715  1982.96242929  1752.76437984]]
[[  995.57825326  2055.22167906  1752.89908101]]
[[ 1001.71209766  2026.71465488  1752.96186394]]
[[  959.4247266   2101.33091765  1753.26254942]]
[[  934.78736137  1604.91935064  1753.44050461]]
[[ 1300.14497806  1525.96134152  1753.62271101]]
[[  992.61960138  2065.57030809  1753.92691151]]
[[ 1001.269755    1998.07221245  1753.96013298]]
[[  957.45072884  2108.2065212   1754.04184232]]
[[  998.24159249  2038.61372605  1754.15097772]]
[[  945.09472063  1604.36868664  1754.35404766]]
[[  955.5405017  2114.8778728  1754.7947645]]
[[  989.78688779  2075.54342745  1754.91083803]]
[[  996.97693304  2012.48653835  1755.09278094]]
[[  994.93138838  2050.06447406  1755.28607145]]
[[ 1299.6746392   1527.38927517  1755.32096798]]
[[ 1295.01944074  1414.80827353  1755.40896876   333.81559337
[[  953.69094112  2121.35371174  1755.52263143]]
[[ 1279.81956864  1833.72164691  1755.76682518   334.14281377
[[  987.07163464  2085.15970282  1755.85353732]]
[[  992.8975077   2026.24570157  1756.16694937]]
[[  951.89915385  2127.64229102  1756.22667048]]
[[  991.76961019  2061.08973324  1756.37064618]]
[[  999.64350689  1538.13539471  1756.71941242]]
[[  984.46618052  2094.43668845  1756.75747734]]
[[  950.16243866  2133.75140934  1756.90802833]]
[[  998.37454306  1555.92304149  1756.9202562 ]]
[[  989.01626748  2039.3875646   1757.18667774]]
[[  988.7456322   2071.71100914  1757.40791467]]
[[  948.47826962  2139.68844067  1757.56777762]]
[[  981.96357854  2103.39089327  1757.62493617]]
[[  985.31943853  2051.9476319   1758.15559783]]
[[  946.84428126  2145.46036182  1758.20692293]]
[[  985.84991025  2081.9485439   1758.40082928]]
[[  979.55750967  2112.03784481  1758.45801926]]
[[  945.25825526  2151.07377803  1758.82640617]]
[[  981.79451712  2063.95914877  1759.07702629]]
[[  977.24220884  2120.39215067  1759.25867486]]
[[  983.07384058  2091.82138337  1759.35210674]]
[[  943.71810853  2156.53494674  1759.42711146]]
[[  978.43012486  2075.45321428  1759.95401574]]
[[  942.22188256  2161.8497996   1760.00986962]]
[[  975.01240154  2128.46755702  1760.02870802]]
[[  980.40964047  2101.34744438  1760.2642502 ]]
[[  957.70574744  1593.04009826  1760.50413613]]
[[  940.7677337   2167.02396303  1760.57546211]]
[[ 1174.12151118  1516.58905936  1760.59000465]]
[[  972.86324924  2136.27700406  1760.76979322]]
[[  975.21588332  2086.45890096  1760.78938592]]
[[ 1250.4074248   1519.96918376  1760.92511623]]
[[  939.35392452  2172.06277725  1761.12462477]]
[[  977.85024717  2110.54358097  1761.13956903]]
[[  970.79030227  2143.8326783   1761.48348568]]
[[  972.14230503  2097.00337668  1761.58574572]]
[[  968.79447994  1592.40062174  1761.59181984]]
[[  937.97881588  2176.97131395  1761.65805109]]
[[  975.38923161  2119.4256487   1761.98019668]]
[[  968.78945886  2151.14606179  1762.17123163]]
[[  936.64085975  2181.75439275  1762.17639532]]
[[  969.20069863  2107.11202529  1762.3455106 ]]
[[ 1403.87251607  1403.10620127  1762.3966084    342.41365964
[[  935.33859274  2186.41659654  1762.68027517]]
[[  973.0207247   2128.00856653  1762.78810655]]
[[  966.85692956  2158.22797818  1762.83437752]]
[[  966.38308592  2116.80856418  1763.07091787]]
[[  934.07063015  2190.96228566  1763.17027445]]
[[  964.98920603  2165.08863586  1763.4741784 ]]
[[  970.73935391  2136.30637591  1763.56512642]]
[[  932.83566053  2195.39561118  1763.64694532]]
[[  963.68212914  2126.11515714  1763.76404046]]
[[  963.1830338   2171.73766823  1764.09180544]]
[[  931.6324407   2199.72052726  1764.11081049]]
[[  968.54018863  2144.33229685  1764.3129513 ]]
[[  961.09106713  2135.05252179  1764.42679976]]
[[  930.45979127  2203.9408026   1764.56236514]]
[[  961.43538815  2178.18417124  1764.68835274]]
[[  929.3165924   2208.0600312   1765.00207879]]
[[  966.41869285  2152.0987809   1765.03315507]]
[[  958.60365902  2143.64003107  1765.06097755]]
[[  959.74345295  2184.43673839  1765.26484356]]
[[  928.20177999  2212.08164235  1765.43039691]]
[[ 1284.26434333  1412.76705788  1765.65181262   334.52257245
[[  956.2141344   2151.89580864  1765.66822702]]
[[ 1286.20934803  1527.23100071  1765.70077892]]
[[  964.37068397  2159.61756099  1765.72720093]]
[[  958.10460178  2190.50349329  1765.82223585]]
[[  927.11434214  2216.00890996  1765.84774249]]
[[ 1036.38448503  1530.28392675  1765.90957215]]
[[ 1273.87098172  1842.23624024  1766.20540158   334.6283537    349.12224998
[[  953.91714925  2159.83681807  1766.2500831 ]]
[[  926.05331589  2219.84496127  1766.25451745]]
[[  956.51638129  2196.39211997  1766.36142742]]
[[  962.39229696  2166.89969822  1766.3964508 ]]
[[  925.01778418  2223.592785    1766.65110399]]
[[ 1031.18152247  1546.15830002  1766.69209391]]
[[  951.70774672  2167.47894602  1766.80797188]]
[[  954.97649628  2202.10989103  1766.88326052]]
[[ 1285.77655771  1528.72955567  1767.00704005]]
[[  924.00687312  2227.25523897  1767.03786573]]
[[  960.47995287  2173.95562567  1767.04217384]]
[[  949.58132224  2174.83707957  1767.34321943]]
[[  953.48279639  2207.66369387  1767.38852607]]
[[  923.01974938  2230.83505723  1767.41514891]]
[[  958.63033128  2180.79518934  1767.66555414]]
[[  922.05561778  2234.33485671  1767.7832834 ]]
[[  947.53359229  2181.92517798  1767.85705974]]
[[  952.03326422  2213.06005507  1767.8779675 ]]
[[  921.1137191   2237.75714346  1768.14258367]]
[[  982.45775199  1581.87980806  1768.16131098]]
[[  956.84034593  2187.42768637  1768.26769762]]
[[  945.56056658  2188.75633915  1768.35064214]]
[[  950.6260046   2218.30516298  1768.35228425]]
[[  920.19332801  2241.10431852  1768.49334969]]
[[  949.25923497  2223.40488885  1768.81213497]]
[[  943.658523    2195.34286115  1768.825038  ]]
[[  919.29375114  2244.37868344  1768.83586779]]
[[  955.10712322  2193.86190059  1768.84963835]]
[[  918.41432531  2247.58244534  1769.17041142]]
[[  947.93127668  2228.36480638  1769.25814045]]
[[  941.82398514  2201.6962991   1769.28124696]]
[[  953.4279831   2200.1061358   1769.41234427]]
[[  994.40198228  1581.20507988  1769.43963708]]
[[  917.55441587  2250.71772183  1769.49724187]]
[[  946.64054713  2233.19020996  1769.69088631]]
[[  940.05370207  2207.82751766  1769.7202025 ]]
[[  916.7134151   2253.78654552  1769.81660895]]
[[  951.80042217  2206.16824654  1769.95672229]]
[[  945.38555264  2237.88613161  1770.11092544]]
[[  915.89074081  2256.79086829  1770.12875165]]
[[  938.34463009  2213.74673958  1770.14277714]]
[[  915.08583499  2259.7325653   1770.4338987 ]]
[[  950.22209849  2212.0556669   1770.48362308]]
[[  944.16488198  2242.45735682  1770.51878028]]
[[  936.69391625  2219.46359049  1770.54978716]]
[[  914.29816246  2262.61343877  1770.73226912]]
[[  942.97720047  2246.90843919  1770.91494488]]
[[  935.09888339  2224.98714029  1770.94199688]]
[[  948.69081803  2217.7754372   1770.99384529]]
[[  913.52720979  2265.43522154  1771.02407278]]
[[  941.82124464  2251.24371418  1771.29988678]]
[[  912.77248411  2268.19958042  1771.30951083]]
[[  933.55701662  2230.32594128  1771.32012264]]
[[  947.2045226   2223.3342289   1771.48813947]]
[[  912.03351209  2270.90811936  1771.58877616]]
[[  940.69581729  2255.46731186  1771.67404883]]
[[  932.06595101  2235.48806348  1771.68483636]]
[[  911.30983896  2273.5623824   1771.86205387]]
[[  945.76127889  2228.73836764  1771.96721163]]
[[  930.62346044  2240.48112717  1772.03676889]]
[[  939.59978301  2259.58316879  1772.03785075]]
[[  910.60102759  2276.16385649  1772.12952161]]
[[  929.22744737  2245.312333    1772.37651299]]
[[  909.90665763  2278.71397417  1772.39135002]]
[[  938.53206407  2263.5950392   1772.39169065]]
[[ 1076.84426984  1524.24934994  1772.41263142]]
[[  944.35926868  2233.99385484  1772.43172647]]
[[  909.22632467  2281.21411605  1772.647703  ]]
[[  927.87593354  2249.98848981  1772.70462613]]
[[  937.49163666  2267.5065053   1772.73594641]]
[[ 1122.00529509  1519.83773189  1772.77665663]]
[[  942.99677992  2239.10638764  1772.88231038]]
[[  908.55963951  2283.66561316  1772.89873811]]
[[  926.56705152  2254.51604036  1773.02163302]]
[[ 1398.3338068   1403.26759682  1773.02776118   342.52273883
[[  936.47752739  2271.320987    1773.07097693]]
[[  907.90622739  2286.06974925  1773.14460685]]
[[  941.67219875  2244.08137756  1773.31955415]]
[[  925.29903687  2258.90108513  1773.32802793]]
[[  907.26572738  2288.42776283  1773.38545496]]
[[  935.48881011  2275.04175096  1773.39712337]]
[[  906.63779165  2290.74084925  1773.62142269]]
[[  924.07022107  2263.14940433  1773.62427686]]
[[  934.52460295  2278.67191904  1773.71471016]]
[[  940.38400221  2248.92396779  1773.74401544]]
[[  906.02208496  2293.01016254  1773.85264507]]
[[  922.87902496  2267.26647836  1773.91081946]]
[[  933.58406562  2282.21447626  1774.02404608]]
[[  905.41828399  2295.23681724  1774.07925213]]
[[  939.1307516   2253.63904938  1774.1562211 ]]
[[  921.72395275  2271.25750669  1774.1880709 ]]
[[ 1222.24004338  1521.59261191  1774.30056857]]
[[  904.82607687  2297.42189011  1774.30136918]]
[[  932.66639688  2285.67227816  1774.32542519]]
[[  920.60358647  2275.12742538  1774.45642347]]
[[  904.24516266  2299.56642171  1774.51911698]]
[[  937.91108647  2258.23127621  1774.55666926]]
[[  931.7708322   2289.04805779  1774.61912767]]
[[  919.51658093  2278.88092341  1774.71624818]]
[[  903.67525082  2301.67141798  1774.73261196]]
[[  930.89664163  2292.34443219  1774.90542066]]
[[ 1267.77504191  1850.43607158  1774.91682984   335.16055359
[[  903.11606081  2303.73785164  1774.94196643]]
[[  936.72371915  2262.70507905  1774.94583127]]
[[  918.46165901  2282.52245773  1774.96789613]]
[[  902.56732161  2305.76666366  1775.14728876]]
[[  930.04312777  2295.56390851  1775.18455902]]
[[  917.43760734  2286.05626733  1775.21169981]]
[[  935.56742971  2267.06467858  1775.32415346]]
[[  902.02877137  2307.75876446  1775.34868353]]
[[  916.44327228  2289.48638631  1775.44797436]]
[[  929.20962392  2298.70888972  1775.45678603]]
[[  901.50015692  2309.71503525  1775.54625175]]
[[  915.47755628  2292.81665595  1775.67701862]]
[[  934.44106137  2271.31409758  1775.6920588 ]]
[[  928.39549235  2301.78168     1775.72233402]]
[[  900.98123353  2311.63632918  1775.74009094]]
[[  914.5394144   2296.05073609  1775.89911621]]
[[  900.47176443  2313.52347247  1775.93029534]]
[[  927.60012268  2304.78448977  1775.98142501]]
[[ 1273.71904398  1410.87447042  1776.02839922   335.24878402
[[  933.34351629  2275.45717231  1776.04994842]]
[[  913.62785118  2299.19211562  1776.11453646]]
[[  899.97152057  2315.37726549  1776.11695603]]
[[  926.82293041  2307.71944045  1776.23427129]]
[[  899.48028027  2317.19848376  1776.30016107]]
[[  912.74191767  2302.2441223   1776.3235353 ]]
[[  932.2737517   2279.49756309  1776.39820298]]
[[ 1009.10046734  1571.61891698  1776.41327901]]
[[  898.99782892  2318.98787897  1776.47999561]]
[[  926.06335547  2310.58856891  1776.48107592]]
[[ 1066.88192548  1538.0740804   1776.51641455]]
[[  911.88070872  2305.20993189  1776.52635607]]
[[  898.5239587   2320.74617987  1776.65654202]]
[[  925.32086095  2313.39383166  1776.72203326]]
[[  911.04336043  2308.09257674  1776.72323032]]
[[  931.23077638  2283.43876425  1776.737184  ]]
[[  898.05846828  2322.47409316  1776.82988002]]
[[  910.22904778  2310.89495373  1776.91437846]]
[[  924.59493186  2316.13710881  1776.9573294 ]]
[[  897.60116262  2324.17230435  1777.00008676]]
[[  930.21364735  2287.28411334  1777.067235  ]]
[[  909.43698246  2313.61983174  1777.10001048]]
[[  897.15185267  2325.84147855  1777.16723694]]
[[  923.885074    2318.8202078   1777.18714264]]
[[  908.66641077  2316.26985863  1777.28032649]]
[[  896.71035515  2327.48226125  1777.33140292]]
[[  929.22146686  2291.03679984  1777.38868268]]
[[  923.19081286  2321.44486688  1777.41164389]]
[[  907.91661177  2318.84756774  1777.45551736]]
[[  896.27649235  2329.09527902  1777.49265478]]
[[  907.18689544  2321.35538405  1777.62576521]]
[[  922.51169265  2324.01275844  1777.63099701]]
[[  895.85009189  2330.68114027  1777.65106043]]
[[  928.25337962  2294.69987326  1777.70183788]]
[[  906.47660103  2323.79562983  1777.79124392]]
[[  895.43098652  2332.24043585  1777.80668572]]
[[  921.84727535  2326.52549209  1777.84535923]]
[[ 1021.9689837   1570.96982996  1777.88780111]]
[[  905.78509553  2326.17053011  1777.95211956]]
[[  895.01901393  2333.77373974  1777.95959447]]
[[  927.3085702   2298.27625068  1778.00699659]]
[[  921.19713982  2328.98461766  1778.05488145]]
[[  905.11177216  2328.48221759  1778.10855088]]
[[  894.61401658  2335.28160966  1778.10984856]]
[[  894.2158415   2336.7645876   1778.25750805]]
[[  920.56088097  2331.39162792  1778.25970857]]
[[  904.45604905  2330.73273749  1778.26068967]]
[[  926.3862607   2301.76872391  1778.30444077]]
[[  893.82434013  2338.22320045  1778.4026312 ]]
[[  903.81736791  2332.92405191  1778.40868113]]
[[  919.93810898  2333.74796125  1778.45997979]]
[[  893.43936817  2339.65796048  1778.54527454]]
[[  903.19519288  2335.05804402  1778.55266426]]
[[  925.48570844  2305.17996614  1778.59443926]]
[[  919.32844856  2336.05500409  1778.65582888]]
[[  893.06078541  2341.06936588  1778.68549296]]
[[  902.58900936  2337.13652199  1778.69277216]]
[[  892.68845558  2342.45790126  1778.82333974]]
[[  901.99832299  2339.16122271  1778.82913234]]
[[  918.73153828  2338.3140933   1778.84738447]]
[[  924.60620403  2308.51253813  1778.87724844]]
[[  892.32224624  2343.82403808  1778.95886667]]
[[  901.42265861  2341.13381519  1778.96186704]]
[[  918.14702992  2340.52651838  1779.03477027]]
[[  900.86155936  2343.05590392  1779.09109345]]
[[  891.9620286   2345.16823514  1779.092124  ]]
[[  923.74706937  2311.76889415  1779.15311304]]
[[  900.31458578  2344.92903191  1779.21692402]]
[[  917.57458781  2342.69352357  1779.21810532]]
[[  891.60767743  2346.49093899  1779.22316059]]
[[  899.78131501  2346.7546836   1779.33946666]]
[[  891.25907091  2347.79258434  1779.35202394]]
[[  917.01388831  2344.81630984  1779.39750418]]
[[  922.90765592  2314.95138743  1779.42226673]]
[[  899.26133993  2348.53428761  1779.458825  ]]
[[  890.91609054  2349.07359449  1779.47876019]]
[[  916.46461922  2346.89603676  1779.57307722]]
[[  898.75426854  2350.26921936  1779.57509856]]
[[  890.57862099  2350.33438165  1779.60341421]]
[[  922.08734306  2318.06227532  1779.68493279]]
[[  898.25972315  2351.96080345  1779.68838299]]
[[  890.24655002  2351.57534738  1779.72602965]]
[[  915.92647929  2348.93382433  1779.74493071]]
[[  897.7773398   2353.61031608  1779.79877023]]
[[  889.91976835  2352.79688288  1779.84664897]]
[[  897.30676761  2355.21898712  1779.9063487 ]]
[[  915.39917773  2350.93075463  1779.91316709]]
[[  921.28553654  2321.10372418  1779.94132467]]
[[  889.59816961  2353.99936936  1779.96531345]]
[[  896.84766819  2356.78800228  1780.01120347]]
[[  914.88243372  2352.88787346  1780.0778851 ]]
[[  889.28165018  2355.18317833  1780.0820633 ]]
[[  896.39971511  2358.31850499  1780.11341641]]
[[  920.50166702  2324.07781391  1780.1916465 ]]
[[  888.97010913  2356.34867197  1780.19693762]]
[[  895.96259333  2359.81159833  1780.21306634]]
[[  914.37597602  2354.80619182  1780.23917998]]
[[  888.66344816  2357.49620337  1780.3099745 ]]
[[  895.53599876  2361.26834673  1780.31022917]]
[[  913.87954252  2356.68668744  1780.39714357]]
[[  895.11963773  2362.68977764  1780.40497804]]
[[  888.36157145  2358.62611683  1780.42121101]]
[[  919.7351888   2326.98654228  1780.43609365]]
[[  894.7132266   2364.07688316  1780.49738343]]
[[  888.06438563  2359.73874817  1780.53068326]]
[[  913.39287986  2358.53030608  1780.55186454]]
[[  894.31649129  2365.43062148  1780.5875133 ]]
[[  887.77179969  2360.83442496  1780.63842643]]
[[  918.98557849  2329.83182892  1780.67485317]]
[[  893.92916693  2366.75191834  1780.67543317]]
[[  912.91574305  2360.33796289  1780.70342846]]
[[  887.48372488  2361.91346678  1780.74447477]]
[[  893.55099742  2368.04166837  1780.76120628]]
[[  893.1817351   2369.30073636  1780.84489363]]
[[  887.20007469  2362.97618549  1780.84886168]]
[[  912.44789515  2362.1105436   1780.85191797]]
[[  918.25233391  2332.61551917  1780.90810423]]
[[  892.82114043  2370.52995851  1780.92655411]]
[[  886.92076472  2364.02288542  1780.95161969]]
[[  911.9891069   2363.84890579  1780.99741289]]
[[  892.46898159  2371.73014357  1781.0062446 ]]
[[  886.64571266  2365.05386366  1781.05278052]]
[[  892.12503427  2372.90207394  1781.08402   ]]
[[  917.53497295  2335.33938767  1781.13601853]]
[[  911.53915641  2365.55387993  1781.13999036]]
[[  886.3748382   2366.06941024  1781.15237509]]
[[  891.78908128  2374.04650674  1781.1599334 ]]
[[  891.46091232  2375.16417479  1781.23403608]]
[[  886.10806297  2367.06980832  1781.25043356]]
[[  911.09782886  2367.2262705   1781.27972495]]
[[  891.14032371  2376.25578757  1781.30637761]]
[[  885.8453105   2368.05533446  1781.34698533]]
[[  916.83303256  2338.00514171  1781.35876072]]
[[  890.82711812  2377.32203214  1781.37700593]]
[[  910.66491625  2368.866857    1781.41668872]]
[[  890.52110433  2378.36357399  1781.44596741]]
[[  890.222097    2379.38105786  1781.5133069 ]]
[[  910.24021705  2370.47639494  1781.5509514 ]]
[[  916.14606779  2340.61442444  1781.57648872]]
[[  889.92991646  2380.37510854  1781.57906782]]
[[  909.82353603  2372.05561672  1781.68258045]]
[[  915.47365088  2343.16881788  1781.78935411]]
[[  909.41468394  2373.60523259  1781.81164112]]
[[ 1196.40025235  1523.26081303  1781.86229109]]
[[  909.01347732  2375.12593142  1781.93819661]]
[[  914.81537042  2345.66984575  1781.99750239]]
[[  908.61973825  2376.61838156  1782.06230809]]
[[ 1261.6442233   1858.36076183  1782.16014143   335.70340379
[[  908.23329418  2378.08323156  1782.1840348 ]]
[[  914.17083054  2348.11897618  1782.20107334]]
[[  907.85397765  2379.52111097  1782.30343416]]
[[  913.53965018  2350.51762424  1782.40020127]]
[[  907.48162619  2380.93263097  1782.42056179]]
[[  907.11608206  2382.31838509  1782.5354716 ]]
[[  912.92146237  2352.86715431  1782.59501531]]
[[  906.7571921   2383.67894982  1782.64821586]]
[[  906.40480758  2385.01488525  1782.75884528]]
[[  912.31591357  2355.1688824   1782.78563962]]
[[  906.05878401  2386.32673565  1782.86740903]]
[[  911.72266304  2357.42407827  1782.97219368]]
[[  905.71898101  2387.61503001  1782.97395481]]
[[  905.38526213  2388.88028259  1783.07852895]]
[[  911.14138225  2359.63396748  1783.15479248]]
[[  905.05749477  2390.12299344  1783.18117638]]
[[  904.73554996  2391.34364889  1783.28194075]]
[[  910.57175433  2361.79973329  1783.33354674]]
[[  904.41930231  2392.54272203  1783.38086444]]
[[  904.10862985  2393.72067313  1783.47798862]]
[[  910.01347353  2363.92251854  1783.50856309]]
[[  903.80341391  2394.87795011  1783.5733533 ]]
[[  903.50353901  2396.01498894  1783.66699735]]
[[  909.46624474  2366.00342734  1783.6799443 ]]
[[  903.20889278  2397.13221405  1783.75895856]]
[[  908.929783    2368.04352673  1783.84778943]]
[[  902.91936579  2398.23003868  1783.84927365]]
[[  902.63485154  2399.30886529  1783.93797836]]
[[  908.40381306  2370.04384825  1784.01219398]]
[[  902.35524628  2400.3690859   1784.02510743]]
[[  902.08044896  2401.41108241  1784.11069465]]
[[  907.88806897  2372.00538941  1784.17325008]]
[[  901.81036116  2402.43522695  1784.19477291]]
[[  901.54488695  2403.44188217  1784.27737422]]
[[  907.38229366  2373.92911511  1784.33104663]]
[[  901.28393287  2404.43140156  1784.35852973]]
[[ 1393.07387176  1404.11529757  1784.37948105   342.61202481
[[  906.8862386   2375.81595896  1784.48566945]]
[[  906.39966338  2377.66682458  1784.63720138]]
[[  905.92233543  2379.4825868   1784.78572246]]
[[  905.45402966  2381.26409281  1784.93131001]]
[[ 1105.68781684  1531.72431982  1784.94119293]]
[[  904.99452818  2383.01216324  1785.07403876]]
[[ 1037.66023322  1562.42252734  1785.1670433 ]]
[[  904.54361997  2384.72759325  1785.21398097]]
[[  904.10110064  2386.41115347  1785.35120649]]
[[ 1259.80907685  1529.56215672  1785.40879807]]
[[  903.66677215  2388.063591    1785.48578293]]
[[  903.24044257  2389.68563029  1785.61777569]]
[[  902.8219258   2391.27797399  1785.74724807]]
[[  902.41104142  2392.8413038   1785.87426136]]
[[ 1259.42840897  1531.20081216  1785.95312845]]
[[  902.00761439  2394.37628125  1785.99887493]]
[[  901.61147491  2395.88354842  1786.12114628]]
[[  901.22245817  2397.36372872  1786.24113112]]
[[  900.84040421  2398.81742749  1786.35888347]]
[[  900.4651577   2400.24523276  1786.47445567]]
[[  900.09656779  2401.64771576  1786.5878985 ]]
[[  899.73448796  2403.02543162  1786.69926121]]
[[ 1263.51591972  1409.13484141  1786.72708521   335.98428509
[[  899.37877581  2404.37891988  1786.80859158]]
[[ 1051.51448761  1561.86219623  1786.81257613]]
[[  899.02929298  2405.70870507  1786.91593597]]
[[  898.68590496  2407.01529721  1787.02133939]]
[[  898.34848097  2408.29919235  1787.12484554]]
[[  898.01689381  2409.560873    1787.22649685]]
[[  897.69101979  2410.80080866  1787.32633456]]
[[  897.37073854  2412.0194562   1787.42439869]]
[[  897.05593293  2413.2172603   1787.52072817]]
[[  896.74648896  2414.39465391  1787.61536083]]
[[  896.44229566  2415.55205854  1787.70833344]]
[[  896.14324496  2416.68988475  1787.79968176]]
[[  895.84923163  2417.80853243  1787.88944057]]
[[  895.56015317  2418.90839116  1787.97764369]]
[[ 1255.52461822  1866.04413166  1788.0643015    336.24112295
[[  895.2759097   2419.98984056  1788.06432404]]
[[  894.99640393  2421.05325063  1788.14951366]]
[[  894.721541    2422.09898199  1788.23324373]]
[[  894.45122847  2423.12738623  1788.3155446 ]]
[[  894.18537621  2424.1388062   1788.39644583]]
[[  893.92389634  2425.13357623  1788.47597621]]
[[ 1148.23751431  1526.95124492  1788.92229671]]
[[ 1249.49600678  1873.51926197  1792.86698045   336.75896666
[[ 1068.14469795  1554.41759882  1794.13988482]]
[[ 1387.89375391  1404.79951213  1795.23544561   342.69165808
[[ 1083.04314777  1554.00260313  1795.85899598]]
[[ 1243.61919459  1880.81491344  1796.76719996   337.24941093
[[ 1253.33588765  1407.50956531  1797.34999715   336.72489061
[[ 1235.55265765  1533.38907012  1797.5338989 ]]
[[ 1235.92623569  1531.60842213  1797.6758053 ]]
[[ 1237.92995703  1887.95657939  1799.94377609   337.70631197
[[ 1232.4490293   1894.9655053   1802.54073176   338.12728707
[[ 1100.58737126  1547.66362412  1802.69408961]]
[[ 1116.60603103  1547.43046241  1804.23228201]]
[[ 1227.19449161  1901.85693366  1804.67129633   338.51364874
[[ 1213.85390898  1533.56932709  1804.84546409]]
[[ 1382.77371067  1405.29759186  1805.51501986   342.76310887
[[ 1222.17400198  1908.64472015  1806.42750897   338.8670857    351.46707168
[[ 1242.69661849  1405.86104695  1807.152666     337.46763559
[[ 1217.38755448  1915.34106059  1807.88403582   339.18948092
[[ 1212.83145363  1921.95601001  1809.09946538   339.48322404
[[ 1135.15652602  1542.11672055  1809.53903358]]
[[ 1208.49947398  1928.49786966  1810.11965138   339.75089107
[[ 1152.44740739  1542.06057749  1810.30185488]]
[[ 1191.3474747   1537.6105399   1810.69340383]]
[[ 1204.38372013  1934.97349458  1810.98048079   339.99504556
[[ 1097.57149909  2305.12256707  1811.47592918   344.03875237
[[ 1098.19965509  2303.19864515  1811.47610398   344.02595219
[[ 1096.94800281  2307.0072862   1811.47691164   344.05134861
[[ 1098.83236865  2301.2347971   1811.47750861   344.01294679   355.5033958
[[ 1096.32926553  2308.85352064  1811.47898211   344.06374231
[[ 1099.4695351   2299.23029499  1811.48021922   343.99973509
[[ 1095.71538339  2310.66198271  1811.4820745    344.075935     355.56391838
[[ 1100.11104764  2297.18440696  1811.48431576   343.98631615
[[ 1095.10644911  2312.43337837  1811.48612574   344.08792832
[[ 1100.75679778  2295.09639798  1811.48988236   343.97268928
[[ 1094.50251052  2314.1684327   1811.49089303   344.09973575
[[ 1093.90363228  2315.86785389  1811.49625098   344.11136475
[[ 1101.40667583  2292.9655306   1811.49700769   343.95885398   355.4518882
[[ 1093.30990621  2317.53232435  1811.50222223   344.12281382
[[ 1102.06057147  2290.79106588  1811.50578552   343.94481003
[[ 1092.72141776  2319.16251809  1811.50881253   344.13408214
[[ 1092.1382465   2320.75910059  1811.51601521   344.14516946
[[ 1102.71837439  2288.57226423  1811.51631536   343.93055748
[[ 1091.56046644  2322.32272864  1811.52381476   344.15607595
[[ 1103.37997502  2286.30838648  1811.52870334   343.91609672
[[ 1090.98814627  2323.85405015  1811.53218939   344.16680218
[[ 1090.42134961  2325.35370405  1811.54111303   344.17734899
[[ 1104.04526534  2283.9986949   1811.54306335   343.90142846
[[ 1089.86013512  2326.82232009  1811.55055687   344.18771752
[[ 1104.71413976  2281.64245439  1811.55951844   343.88655385   355.3835704
[[ 1089.30455669  2328.26051878  1811.56049041   344.1979091    355.68265741
[[ 1088.75466351  2329.66891124  1811.57088234   344.20792522
[[ 1105.38649606  2279.2389338   1811.57820393   343.8714743    355.36937614
[[ 1088.21050023  2331.04809909  1811.58170116   344.21776753
[[ 1087.67210703  2332.39867444  1811.59291559   344.22743782
[[ 1106.06223687  2276.78740706  1811.59926804   343.85619181
[[ 1087.13951975  2333.72121975  1811.60449496   344.23693795
[[ 1086.61276995  2335.01630787  1811.6164094    344.24626989
[[ 1106.74127091  2274.28715467  1811.62287599   343.84070884
[[ 1086.09188505  2336.28450192  1811.62863      344.25543568
[[ 1085.5768884   2337.52635538  1811.64112894   344.2644374    355.74843005
[[ 1107.42351392  2271.73746377  1811.64923206   343.82502597
[[ 1085.06779941  2338.74241201  1811.65387954   344.27327719
[[ 1084.56463362  2339.93320591  1811.66685631   344.28195723   355.7658971
[[ 1108.10822829  2269.13897626  1811.66912493   343.8099424    355.31101935
[[ 1084.06740285  2341.09926155  1811.68003491   344.29047973
[[ 1108.79587827  2266.48943076  1811.69100482   343.79466275
[[ 1083.57611525  2342.24109378  1811.69339224   344.29884692
[[ 1083.09077549  2343.35920793  1811.70690633   344.30706104
[[ 1200.47526275  1941.38854011  1811.71009359   340.2181244    352.35091406
[[ 1109.48637888  2263.78811076  1811.71494634   343.77918556   355.2810598
[[ 1082.61138479  2344.45409984  1811.72055636   344.31512437
[[ 1082.13794109  2345.52625592  1811.73432265   344.32303916   355.8071094
[[ 1110.17965564  2261.03431163  1811.74102361   343.7635102    355.26579462
[[ 1081.6704459   2346.57613583  1811.74828714   344.33079687
[[ 1081.20889381  2347.60419506  1811.76247949   344.33839339   355.8226354
[[ 1110.87562788  2258.22733967  1811.76929963   343.74763087
[[ 1080.75327024  2348.61089375  1811.7768397    344.34583394
[[ 1080.3035588   2349.59668317  1811.7913196    344.35312328
[[ 1111.57420941  2255.3665151   1811.79981862   343.73153669
[[ 1112.27535092  2252.45117287  1811.83264022   343.71522297
[[ 1112.97901644  2249.48066488  1811.86781965   343.69868448
[[ 1113.68518479  2246.45436166  1811.90540636   343.68191538
[[ 1114.39385473  2243.37165377  1811.94544995   343.66490927   355.1699578
[[ 1115.1050648   2240.23195185  1811.98803752   343.64766006
[[ 1115.81885577  2237.03469304  1812.03321961   343.63015999
[[ 1116.53529162  2233.77934043  1812.08104264   343.61240048
[[ 1172.40026159  1537.5778746   1812.10473611]]
[[ 1117.25446165  2230.46538498  1812.13154846   343.59437202
[[ 1117.97648276  2227.0923474   1812.18477407   343.5760641    355.08399978
[[ 1118.70150178  2223.65978005  1812.24075131   343.55746509
[[ 1119.429698    2220.16726887  1812.29950671   343.53856221
[[ 1196.76460188  1947.74766059  1812.33064269   340.42213092
[[ 1120.16128569  2216.61443525  1812.36106145   343.51934137
[[ 1120.89645923  2213.00095027  1812.42531138   343.49977332
[[ 1121.63557186  2209.32651684  1812.49231102   343.47985475
[[ 1122.37896047  2205.59087586  1812.56204288   343.45956799   354.9721842
[[ 1123.12700669  2201.79381112  1812.63447649   343.43889361
[[ 1123.88014084  2197.93515081  1812.70956832   343.41781058
[[ 1124.63884567  2194.01476887  1812.78726346   343.39629618
[[ 1193.24257814  1954.05453751  1812.86024438   340.60943749   352.6281056
[[ 1125.40365923  2190.03258657  1812.86749394   343.37432592   354.8912812
[[ 1126.17517821  2185.98857375  1812.95017814   343.35187343
[[ 1126.95406134  2181.88275001  1813.03522035   343.32891044
[[ 1127.74103254  2177.71518587  1813.12250835   343.30540667
[[ 1128.53688501  2173.48600338  1813.211916     343.28132968
[[ 1129.34248486  2169.19537687  1813.30330276   343.25664485
[[ 1189.89998348  1960.31215664  1813.31328409   340.78189216
    61053 1278.487    0.021 1813.379    0.030 npyio.py:631(loadtxt)
[[ 1130.15877473  2164.84353359  1813.39651409   343.2313142    354.75747895
[[ 1130.98677799  2160.43075378  1813.49138094   343.20529808
[[ 1131.8276027   2155.95737089  1813.58772114   343.17855416
[[ 1132.68244588  2151.42377139  1813.68534091   343.15103738
[[ 1186.72706156  1966.52305852  1813.70062019   340.94108609
[[ 1133.55259796  2146.83039436  1813.78403709   343.12269969
[[ 1134.43944745  2142.17773095  1813.88360026   343.09348984
[[ 1135.34448591  2137.46632344  1813.98381916   343.06335309
[[ 1183.71435577  1972.68927253  1814.03111085   341.08841962
[[ 1136.26931323  2132.69676425  1814.08448665   343.03223084
[[ 1137.21563667  2127.869696    1814.18539381   343.00005913
[[ 1138.18498442  2122.98587459  1814.28572233   342.96672612
[[ 1180.85277174  1978.8123899   1814.3120569    341.22512171
[[ 1139.17925127  2118.04603318  1814.38506549   342.93215189
[[ 1140.2004514   2113.05094528  1814.48298256   342.89625038
[[ 1178.1336128   1984.89362483  1814.54953887   341.35226959
[[ 1141.25072291  2108.00142157  1814.57899499   342.85892886
[[ 1142.33233437  2102.89830602  1814.67259082   342.82008696
[[ 1175.54859607  1990.93386607  1814.74867368   341.47080749
[[ 1143.44768632  2097.74247245  1814.7632051    342.77961627
[[ 1144.59931746  2092.53481968  1814.85021835   342.73739931
[[ 1173.08915687  1996.93377795  1814.91324757   341.58149527   353.359887
[[ 1145.78990972  2087.27626655  1814.93294787   342.69330856
[[ 1147.02229324  2081.96774638  1815.0106362    342.64720536
[[ 1170.74685499  2002.8937896   1815.04633902   341.68496648
[[ 1148.29945149  2076.61020079  1815.08243617   342.59893869
[[ 1149.62490028  2071.20453127  1815.14797719   342.54839851   354.1494704
[[ 1168.5149336   2008.81401864  1815.15170142   341.781901     353.51842616
[[ 1377.7074675   1405.63252231  1815.19775546   342.8274156    348.43501141
[[ 1151.00214126  2065.75166173  1815.20661275   342.49543195
[[ 1166.38696817  2014.6944005   1815.23251986   341.8728987    353.59130083
[[ 1152.43476962  2060.25251842  1815.25752076   342.43985605   354.0576156
[[ 1164.35685798  2020.53471342  1815.29152483   341.95848955
[[ 1153.92655733  2054.70801661  1815.29969266   342.3814728    354.00858965
[[ 1162.41881447  2026.33460007  1815.33107953   342.03914271
[[ 1155.48143185  2049.11905793  1815.33175101   342.32007295   353.9572963
[[ 1157.10359311  2043.48647901  1815.35248865   342.25541687
[[ 1160.56734776  2032.09358652  1815.35324773   342.11527456
[[ 1158.79725243  2037.81109903  1815.35984664   342.18725566
[[ 1231.57055116  1403.95310971  1815.8078152    338.18047725
[[ 1220.09985674  1401.69521442  1823.25559813   338.82085246
[[ 1372.69669253  1405.82542606  1824.25601593   342.88559579
[[ 1208.68457918  1399.2447433   1829.95065199   339.38023469
[[ 1367.75332593  1405.90401122  1832.67484111   342.93844144
[[ 1197.78302806  1396.76434592  1836.32549108   339.89946078
[[ 1362.8912919   1405.88592364  1840.44082095   342.98660626
[[ 1187.67583213  1394.74362775  1842.68137549   340.34133063
[[ 1175.91142734  1394.0263575   1846.24087413   340.72809808
[[ 1358.12908285  1405.78682066  1847.54735822   343.03062846
[[ 1163.83351285  1394.69165933  1848.85586402   341.15175782
[[ 1159.33206207  1396.08278678  1852.13123201   341.23570171
[[ 1353.49061105  1405.62869414  1854.00021017   343.07096034
[[ 1150.70367896  1398.0548521   1856.59387125   341.87385342
[[ 1150.38790025  1398.26053795  1856.94460652   341.81429119
[[ 1348.99266753  1405.4296189   1859.81732201   343.10795507
[[ 1344.64184222  1405.20312321  1865.0290277    343.14188447
[[ 1340.43646335  1404.95890642  1869.67523492   343.17296376
[[ 1336.40324218  1404.86884065  1873.93723933   343.20113617   350.5856935
[[ 1332.49092241  1404.79326064  1877.74175859   343.22680446   350.78818
[[ 1328.67172448  1404.70336219  1881.13270964   343.25005262
[[ 1324.82369604  1404.43837047  1884.15955159   343.27061547
[[ 1193.9451677   1351.89035068  1886.55410157   343.30377576
[[ 1197.92357598  1353.71554228  1886.61112104   343.3098843    353.84614563
[[ 1190.17097255  1350.23063182  1886.61642714   343.29849662
[[ 1186.58700122  1348.72221846  1886.77344772   343.29401357
[[ 1202.12171921  1355.7217601   1886.81701981   343.31682572
[[ 1320.95150422  1404.01652559  1886.85847644   343.28871038
[[ 1183.18061371  1347.35222661  1887.00463656   343.2902736    353.93178674
[[ 1206.55683812  1357.92604231  1887.20711255   343.32456194
[[ 1179.94034637  1346.10895342  1887.29294338   343.28721232
[[ 1176.85575425  1344.98177864  1887.6242446    343.28476065
[[ 1211.24804389  1360.34697505  1887.82352409   343.3330001    353.76728646
[[ 1173.91727194  1343.96107076  1887.98687677   343.2828499    353.98752162
[[ 1171.11609502  1343.03809824  1888.3712416    343.28141524
[[ 1216.22341351  1362.99903994  1888.71838896   343.34136649
[[ 1168.44408254  1342.20494539  1888.76947279   343.28039782
[[ 1165.89367955  1341.45443281  1889.17515596   343.27974567
[[ 1317.05850516  1403.45377715  1889.26250024   343.3045372    351.51573542
[[ 1163.45785735  1340.78004238  1889.58309395   343.27941361
[[ 1221.47100058  1365.87160204  1889.91360444   343.34916431
[[ 1161.13006788  1340.17584706  1889.98911034   343.27936261   354.0698838
[[ 1158.90420824  1339.63644621  1890.38988461   343.27955865
[[ 1156.77459127  1339.15690693  1890.78281341   343.2799717    354.09988292
[[ 1154.73591878  1338.73271201  1891.16589301   343.28057472
[[ 1226.87518313  1368.87591175  1891.33308647   343.35621108
[[ 1313.14662339  1402.76375864  1891.40142008   343.31827965
[[ 1152.78325552  1338.35971454  1891.53761913   343.28134296
[[ 1150.91200294  1338.03409876  1891.89690128   343.28225355
[[ 1149.11787292  1337.75234649  1892.24298953   343.28328528
[[ 1147.39686238  1337.51120821  1892.57541214   343.2844185    354.16861255
[[ 1232.25146715  1371.86704321  1892.82381175   343.36248543
[[ 1145.74522936  1337.30767797  1892.89392284   343.28563519
[[ 1144.15947114  1337.13897132  1893.19845644   343.28691884
[[ 1309.2162759   1401.95782542  1893.3018455    343.33010662
[[ 1142.63630447  1337.00250585  1893.48909182   343.28825453
[[ 1141.17264791  1336.8958838   1893.76602112   343.2896288    354.21761832
[[ 1139.76560591  1336.81687663  1894.02952424   343.29102966
[[ 1237.45275972  1374.72682435  1894.25149195   343.3680286    353.5709327
[[ 1138.41245461  1336.76341117  1894.27994775   343.29244644
[[ 1137.110629    1336.73355718  1894.51768763   343.29386975
[[ 1135.85771138  1336.7255162   1894.74317508   343.29529139
[[ 1134.65142084  1336.73761145  1894.95686502   343.29670422   354.2718508
[[ 1305.26631535  1401.04512201  1894.98727956   343.34017322
[[ 1133.4896038   1336.76827872  1895.15922672   343.2981021    354.28180039
[[ 1132.37022531  1336.81605814  1895.35073634   343.2994798    354.29146134
[[ 1131.29136121  1336.87958663  1895.53187089   343.3008329    354.30083848
[[ 1242.41113066  1377.39776787  1895.54343879   343.37287254
[[ 1130.25119087  1336.95759105  1895.70310358   343.3021577    354.30993684
[[ 1129.24799057  1337.04888198  1895.86490006   343.3034512    354.31876162
[[ 1128.28012745  1337.15234798  1896.01771557   343.30471113
[[ 1301.36829121  1400.11615204  1896.4262303    343.34902127
[[ 1247.11813427  1379.86887733  1896.67605761   343.37702474
[[ 1297.54140155  1399.19710508  1897.63013331   343.35683002
[[ 1251.59573263  1382.15346011  1897.65196655   343.38047219
[[ 1255.87723591  1384.2743372   1898.48446747   343.38318591
[[ 1293.7769752   1398.28213861  1898.6282419    343.3636175    352.37706251
[[ 1259.99776955  1386.25632388  1899.18959182   343.38512315
[[ 1290.06596618  1397.36508716  1899.44529498   343.36941296
[[ 1263.99028962  1388.12300474  1899.78263499   343.3862279    353.18391081
[[ 1286.39887349  1396.43940149  1900.10198148   343.37425346
[[ 1267.8843043   1389.89563082  1900.27690091   343.38643068
[[ 1282.76564096  1395.49807268  1900.61535813   343.37818103
[[ 1271.70577911  1391.59296223  1900.68342718   343.38564782
[[ 1279.15553301  1394.53353749  1900.99921127   343.38124046
[[ 1275.47749856  1393.23148739  1901.01110017   343.38378053
296318052  405.962    0.000 2116.536    0.000 fromnumeric.py:1631(sum)
    29282 2786.191    0.095 2819.011    0.096 AffineBreakPoints.py:71(AffineBreakPoints)
    44814    0.300    0.000 4132.587    0.092 linesearch.py:260(derphi)
    53368    0.217    0.000 4479.526    0.084 optimization.py:175(fLine)
    53368    0.283    0.000 4479.809    0.084 linesearch.py:245(phi)
    49323    0.322    0.000 4553.420    0.092 optimization.py:179(gradfLine)
    29282    2.490    0.000 4613.675    0.158 statGeneral.py:45(aANDb)
  1247363 2438.523    0.002 4648.051    0.004 citiBikeExample.py:152(B)
       30    9.391    0.313 6218.080  207.269 citiBikeExample.py:370(estimationObjective)
       30    0.349    0.012 6298.744  209.958 SBOGeneral2.py:405(optAnnoParal)
    30525 1247.766    0.041 6312.975    0.207 simulationPoissonProcess.py:119(unhappyPeople)
     4509    0.453    0.000 8612.871    1.910 linesearch.py:283(scalar_search_wolfe2)
     4509    0.025    0.000 9034.149    2.004 linesearch.py:187(line_search_wolfe2)
    29282    1.313    0.000 9389.976    0.321 VOIGeneral.py:126(VOIfunc)
    29282    0.517    0.000 9391.624    0.321 citiBikeExample.py:296(functionGradientAscentVn)
    29282    0.070    0.000 9391.693    0.321 SBOGeneral2.py:202(g)
       30    0.001    0.000 9393.064  313.102 SBOGeneral2.py:197(optimizeVOI)
       30    0.000    0.000 9393.065  313.102 misc.py:27(VOIOptWrapper)
       60    0.000    0.000 9469.184  157.820 optimization.py:204(opt)
       60    0.160    0.003 9469.184  157.820 optimization.py:149(steepestAscent)
       61    0.000    0.000 9469.267  155.234 optimization.py:29(run)
       30    1.568    0.052 9511.325  317.044 SBOGeneral2.py:215(optVOInoParal)
        1    0.007    0.007 15810.163 15810.163 SBOGeneral2.py:159(SBOAlg)
        1    0.047    0.047 15827.803 15827.803 citiBikeExample.py:4(<module>)
